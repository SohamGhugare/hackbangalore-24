%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 26.3
%%For:  
%%CreationDate: 6/17/2022
%%BoundingBox: 0 0 850 400
%%HiResBoundingBox: 0 0 850 400
%%CropBox: 0 0 850 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 26.3.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 26.3.1 x1103 R agm 5.512 ct 6.513%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 60 8%%BeginData: 5608 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFD4EFFA87DFD7DFFA87AA5759F7CA8A8FD77
%FFA77BFD05C77AA0FD77FF75CCFD06C79EA7FD76FF7BC7CCC79F9E7BC7C7
%7BFD66FFA8FD0FFF519F517C7DA17DA09E7DFD08FF7D7D7DA87DFD51FFA8
%A8FD06FFA87DFD0EFFCF7CFD05FFA19FA8FD07FFA8A8FFA8FFA8FD51FFF8
%27FD06FFA87D7DFD0EFFFD05A8FFA876FD07FF7DA8A827277DA8A8FD47FF
%A9FD08FFA8A8FD07FF52527DFD07FFA8FD05FFA8FF7DFFFFFFA87DFD07FF
%A8FF5252A8F8A8A8A8FD45FF759F7CFD0FFF7D52527DA8FD05FFA87D7DFF
%FFFFA8A8FF7DA8FFFF7C7DFD07FF7DA8F8A8FF277DA87DFD07FFA8FD3CFF
%A99FC7C77BA8FD0DFF7D7D7DA8A8FD06FFA8FD05FF7DFFA8A8FFFF7DFD08
%FFA8FFA8F82752FF7DFD07FFA8FFA8FD3CFF7BCC9F9F7A7CFD0CFFA87DFF
%FF7DFD0CFFA87DFFA8FF7D7EFD08FF7DA8A8A87DFFA8A8FD07FFA87DA8FD
%3BFFA9A69F9FC7CC9EA1FD0CFFA8A8FFA8A8FD0CFFA87DA87DA8A8FD0AFF
%A8A8A87DA8FD47FF7C9FC79F7BC77AA8FD0CFF7DA8FF7DA8FD0CFFA8A8FF
%FF7D7DA8A8FD07FFA8A8A8FD49FFCF9FC752A951CC7BFD0DFF7DFFA8A8FD
%09FF7D27F87DFFFFFF52F8F82727A8FD52FF7CA47B519FC7A57DFD0CFFA8
%A8FF7DA8FD06FF7D27F8F8F827527D52FD06F827FD16FFA8FD3AFFA89FC7
%C7C7CCC79FA8FD0BFFA8A8FFFF7DFD05FF52FD10F852FD10FFA8A8FFFFA8
%A8FD31FFA8FD09FF7D9FFD04C7C65152FD0BFF7DFFFFFF527D5227FD07F8
%27FD0BF8A8FD10FFA8FFA8A8A8FD30FFA87DFD0AFF7D9FC7CCC7CC9EF8F8
%527DFD08FFA8FFFFFF7DFD05F82727527DA8FFA8FD0AF852FD11FF7DFD04
%A8FFA8A8FD39FF7CA5C7C7C7CC50F8F8F87DFD07FFA8A8FFFF2727F8F852
%A8A8FD05FFA8FD0AF827FD0DFFA8A8FF7DFD04FFFD04A8FD3AFF51C7C7CC
%C79F2752277DFD08FF7DFF7DFD04F87DFD08FFFD0427F82727FD04F8FFFF
%FF7D27F87DFD06FFA8FFA8FD05FFA8A8FD3CFF2726C7C69F7D7DFD0CFF52
%FD06F8FD05FFA8A87D27FD05F827FD04F87D7DF8F827A87DFD08FFA8A87D
%52A8A8FF7DFD3CFF28F84AA084A8A8FD0DFFA8A8FD047DA8FD05FF7D7DA8
%A8F827F82727FD04F827F8277DFFFFA8FD08FFA8FFA8A87DA8A8A8FFA8FD
%2BFF277DFD0DFF52F8007DFD04A8FFFFA87DA8A8FD0BFFA8A8FFFFA852A8
%A852A8FFA8F8F8F827FD05F852A8FFFFA87DFD09FF7DFD04A87DA8FFA8FD
%05FF7DFD24FF52F8F8FF7DFD04A8FD07FF52F852FFFD05A8FFA8FFFFA8FD
%0CFF7DFFFFA8F8A827527DFFFFFF52F82727F827F852FD04FF7DFD0AFFA8
%527D7DA8FD08FFA87DFD25FF52527DA8A8FFA87D7DFD06FFA8F87DFFFF7D
%7DA8A8A8FFFFFF7DA8A8FD09FFA8A8FD05FFA8A8FFF87DFFFFA87D2727F8
%2727FFFFFF7DFD04FF7DF8A8FD04FF7B9E4A7DFD31FFA8A87DA9A8A8FFA8
%A8FD0AFFA8A8A8FD06FFA8A8FD0AFFA8FD08FF27F8A8FD04FFA87D277DFF
%FF7DA8FD04FFA852A8FD04FFA0C7A5A8FD30FFA8A8A87D7DA7FD04A8FD0A
%FFA8A8A8FD06FFA8A8FD0AFFA8A8FD07FF52F8F87DFD05FFA827FFA87DFD
%0CFF7D4BA7FD31FFFD04A8507ACAA8A8A8FD0BFFA8FF7DFD11FFA8A8FD06
%FF7D52F8F8F852A8FD04FF7DA8A8FD0EFFA9FD08FFA8FD29FFA8A87DFFA0
%7BFD04A8FD0AFFA8A8FD14FF7DFF7D7D2727FD08F852A8A8A87D7DA8FD16
%FFA87DFD2AFF7DFF7DFFA8A8A8FFA8FD20FFA8A87DFD0CF852FFA87DFD08
%FFA8FD0FFF7DFD2BFFA87DFFA8A8A8FF7DFD0AFFA8A8FD07FFA8FD0FFFA8
%FD0CF852FF7DA8FD05FFA8A87DA8A8A87DFD09FFA87D7DA8FD2CFFA87DFF
%A8A87DFD0BFF7DFD07FFA8A8FD07FF7DA8FD07FF5227FD07F827277D527D
%FD06FFA87DA8FFA8FFA8FF7DFD09FF7DFD30FFA8A8A8FD0BFFA8A8FD07FF
%7D7DFD07FFA8FD08FF7DA8A8527D527D52A8A8FFA87DA8FD06FF7DA8A87D
%A8A87DA8FF7DFD06FFA87DFD40FF7DA87DA8FFFFA87DA8FD10FF52F8FD09
%FFA8A8FD07FFA8A8FF7DFD04FFFD04A8FD05FFA8FD42FFA8FF7DA8A87DA8
%FD10FF52F827FD04FFA87DA8FFA87DFD08FF7DA87DFD05FFFD04A8FD39FF
%A8A8A8FD0FFFA8A8A8FD10FF7DF852A8FD05FF7DA8A8A8FD09FFA87DFD07
%FFA8FFA8FD38FFA87B74507DFD20FF7DF827FFA8A8FFFFFFA8A852A8FD0A
%FF7D9F7DFD06FFA8A8A8FD38FFA8C69F9F9FFD1FFF7DF827FFFFA8FD05FF
%52FD0CFFA8A49FA8FD05FF7DFFA8FD38FFA89F749E76FD1EFFA8F8F8A8FF
%FFA8A8FFFFA87DFD0DFFA97B9E7CA8FFFFA8527D7DFD3AFFA77B76FD0DFF
%A8FD10FFA8F8F8A8FFFFFFA8A8FFA87DFD0FFFA87BC69F7D28F8F852FD3C
%FFA9FD0CFFA87DA8A8FFFFFFA87DA8A8FD08FFF8F87DFD05FF7D7D7DFD07
%FFFD05A8FD05FFA8A07A7DF8F827A8FD48FFA87DFD06FFA8A8A87DA8FD06
%FF52F852FD05FFA87DA8FD07FFA8FD04FFA8FD08FFA8A8A8FD47FFA87DA8
%7DFD06FF7DA8A87DFF7DFD05FF7DF827FD05FF7DA8FD09FFA8FD04FFA8A8
%FD51FF7DFD09FF7DA87DFF7DA87DFD04FF27F8FD04FFA87DFD0BFFA8FD05
%FFA8FD50FFA8A8FD09FF7D7DA87DA87DFD04FFA8F87DFFFFA87D7DFD05FF
%A8FD06FFA8A8FFFFFFA8FD52FFA8FD09FFFD04A87DA8FD04FFA827A8A87D
%A8FD06FFA87DFD07FFA8A8FFA8FD5FFFA87DFD07FFA8A8A8FD13FFA8FDFC
%FFFDFCFFFDFCFFFD3CFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.1-c000 79.cb7c5a1, 2022/04/14-05:22:35        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
   xmp:ModifyDate="2022-06-17T18:47:05+09:00"
   xmp:CreateDate="2022-06-17T18:47:05+09:00"
   xmp:MetadataDate="2022-06-17T18:47:05+09:00"
   xmp:CreatorTool="Adobe Illustrator 26.3 (Windows)"
   xmpMM:DocumentID="xmp.did:85e0807b-03ea-f04b-92c7-bc517a1e9249"
   xmpMM:InstanceID="xmp.iid:85e0807b-03ea-f04b-92c7-bc517a1e9249"
   xmpMM:OriginalDocumentID="uuid:11571bd5-2104-4f08-856d-3b1328b858e8"
   xmpMM:RenditionClass="proof:pdf"
   dc:format="application/postscript"
   pdf:Producer="Adobe PDF library 16.07"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   illustrator:CreatorSubTool="Adobe Illustrator">
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="120"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAeAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FUm17zVZaPPBbPBPeXdwryJb2wQsI4yoZ2Mjxqoq4pvU9q0zE1eu&#xA;xacA5DVtmPDKf0qWlee/KmqEi0v1NIjMzSpJEgVQC45yKqco6/vFrVP2gMnDV4py4YyBPNBxyAsh&#xA;PUdHRXRgyMAyspqCDuCCMyGDeKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KvD/LfmHQbXR7S+1K5gi1bU0eW5mNDcXLRuwLyUHIsW24jYMeCds841+D&#xA;UajPPhE5gS+V/Z+zcu8wzhCAuhsmVzqVrdC1/SWh3kdlzVpLrUbNoYbaelYeZuAu7bgPHyCtQEgs&#xA;MMuxNXhhKdVXcdyOvL7bUavHIgMq/LK5u/quo6ad9O0qcW1kWVVkU0LvGeAVSqqyMhpXi29eudf2&#xA;Jnnk04Mvg6zVwEZ7M0zbuMl+r+YNJ0hUa/mZDIrukccck0hSOnqP6cKu/BOQ5NSi13xV1p5i0C8v&#xA;BZWmpWtxdsnqrBFNG7lKA8gqkkijA7eI8RiqYYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYqlWteZ9G0Wa3h1CSRJLpZGhEUE8/wxFA7N6KScAvqLu1BlObUY8VGchG+9lGEpchaN0/UdP1G0&#xA;S80+5iu7WT+7nhdZENNjRlJG2Wgg8mNIjCrD/wAu/LvnzRRrQ82+YE1763fST6WVi9Mw27dFPSlf&#xA;99iqpTYmuyrMMVeLWX5gxaN+YWq22lW815o97cPNJDHJEfUKxmW7nto2YNI8fH1OEfJ3japUL6RZ&#xA;V7PHJHLGskbB43AZHUgqykVBBHUHFULq2q2ul2TXdwHZAyRpHGvJ3klcJGijbdnYDcgeJAxVWsb2&#xA;1vrKC9tJPVtbqNZoJACOSOAymhAIqD3xViF036IfzRqtksFrOLuKEKIlAnmktYfq/quAvH/SrqrM&#xA;a7eG+AClTHzdd28nk3XrmS9iOlTadOkU0CLKylo3Rm5NII5Kll4r8Ir1bfYTqjaRzVfIlnJbeWbZ&#xA;pkljmu2lu5BcBVm/0iRpE9VVJVXEbKpUdKUyrTYI4sYhD6QyyTMjZ5p/l7B4v5t82earBtAtNOuw&#xA;nnTzHf3WjpeaiITZ6aqusk6QJEsay8isQhL83ZftfFVcVd5Y8xeZ7bzLrHlPzNe6ZLqPk0wazaa2&#xA;IRbW0sN5FLFJHciMosMpWfZlX34t+0q9e0q9e+0uzvXha2e6gjma3cEPGZEDFGDBWqtaGoHyxVFE&#xA;gCp2A6nFVkE8FxCk0EiywyANHKhDKynoQw2IxVfirsVdirsVdirsVdirsVdirsVdirsVdirsVYN+&#xA;YbraaxomoPDJKpivLGIRDkzTT+hOiBenxJaOeTEAU3IznPabDKeAEchLf5OdoJATPuYrFPPZawb2&#xA;DU7fTfMUwULp6uphlBr6cd0nwvOW4txfYrvw/a5c72f2hm0wuAlLF1518Og/FudmwxnsSBJ6h5d1&#xA;2DWtNW7jQwzIzQ3dqxBeGdPtxtT5gqf2lIYbEZ3+nzxzQE48i6acDE0Uzy5g7FWD2flLRfL/AJwg&#xA;vDYwSLqErrp2oEUubWb0ZD9V5ftW7xc+H8pAU1+DiqnXlB2tbNvL0211oax2yn/flrxpazj/AF40&#xA;4t/lq4GwxVOrm1tru3ktrqFJ7eZSksMqh0dT1VlaoIPviqoAAKDYDoMVY1r0V5o76hrdtFFeabNC&#xA;ZdX06ZvTLNDHxE0LFXVnaNRGyPQNRfiWh5KpJr1tqkOhQR3qraaFBqFjLfvqc0TzSxC9hHp8YALa&#xA;CJNjsSCF48RyLYqzix1HT9QgFxYXUN3bt9maCRZUP+yQkYqiMVee+avIFjeaKNG1e2TWPLDX0lyb&#xA;eKGddQtWuHkk+sRTwyl5GjllNaRhijGpYg81UH5P/Li30jT47fRNEj0uz1C+ttRv9Qvrqa61KVbO&#xA;cXEPrRSxfDI/Hjx9X93yY/aqCq9OxVD6jZ/XLR4OZjJKMrCtKxuHAYAryQlaMtRUVGKqOk6dLZJc&#xA;GaVJZ7qUTSmKP0YwwiSKiJycgUjruxxVHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVpkjEixlgJHBKo&#xA;SKkLSpA9qjFV2KpV5n0Q6zo8tpHIIbtSs1lcMKiO4iPKNiOvEkcXA6qSO+UanTxzYzCXKTPHMxkC&#xA;HlQ0KbUri95XMunxXN5aTa/o7RoZBeaa8MkIWeiuqfuEO1VdTyWgaucLk12fR45aWUR1o+R6u3jh&#xA;hlkMgKfprUPlfU21u4cx6NcKItaIBYR8f7m64qCfgJ4SED7BDNtGMv8AZvtHgn4Mj6Zcvf8AtYa7&#xA;BY4hzD0DStY0nV7JL7Sr2DULKSoS5tZEmjJHUB0LLtndOoReKpZ5l06e/wBFuIbUA30fG4sORAUX&#xA;Vu4mt+Vf2fVReXtiqX3rSahY6b5q0SMzXccCzR29QpubO4CvLbmu3OgDx16OoFQrNiqC1H84fyv0&#xA;2yN5feZ9PhRQOcBnVrhSQTxa3XlMrihBUpUHY4q8H/N3/nMC3a1l0j8uQ/rOeMvmC4j4hVHX6tDI&#xA;K1b+eQCn8taMFXzlH5184S+ZbTzBLqdzf63aTR3Ftc3TtdP6kJ5JUS8wwFPskUxV6Z5y/wCcrfzQ&#xA;8weXrvy9c2thpiXsZgvZraGVZ2ikUq6fvpZVUOrb0WvgRirxyy1C/sLhLixuZbW4jIZJoHaN1I6E&#xA;MpBGKvqP/nGX/nIfXdR1yHyT5xvGvjeAjRtVnYesJlHL6vM7UMgkAPBjVuXw71HFV9U4q7FXYq41&#xA;oaCp7A7CuKobTbqe6sILi4t2tLiRQZrVzVo5Bs6chs1G6MNj1G2KtaXLfTadbzX8Qt7uVA80C7+m&#xA;W34E1apXoSDSuKorFXYq7FXYq7FXYq7FXYq7FXYq7FUHPo+mXGpWupzW6Pf2SyLa3B+1GJRxenbc&#xA;bfSfE4qjMVdirAfzZ+q6FoV152jQi50mOP69GgH+k2nqBWjfb7UXqF4z2NR0Y5q+1OzY6rHXKY5F&#xA;yNPnOOXkk1trnl3WPLg1ZLmGfQ7uEs88hAiMTAq4fl07qwPyzzk6fLjy8FHxAeXW3eCcTG/4Xz/p&#xA;n5Jfm7ZeaNTv/wAtbmfT7SKYeiHuDYXPoShZYvVhkKFkYHbktDQ1AIpnqWkOQ4o+IKnW7z2Th4jw&#xA;8n2R5ffV30LTm1lFi1g20J1GNCpQXPAesFK7FedaUzIYI/FXn/mXz7pP5Z6bqM/mKOddJ9aWfR7i&#xA;CJ5xK1xyma0YqCsUiyl+HPinDjRvhair4F80eZ7vzBqNxqNyoS4vZprq9C/Zeea4mn5AdgPrBUDF&#xA;X1z+UH/OPn5M6x5J0fzHNpkmpy6paxyzC5nkMaTAcZRGsZjoBIrbNXFXr1j5N/L7yzbrdWmj6ZpU&#xA;Vmu156MMRjWo6zMA3h1bFXxJ/wA5BaToFv8Amx5guYr2WS2vpo7qGe2ijuIXeeNZJQJfWQVVmOwr&#xA;9GKvPbDT9PvbyW3hll4JaXM6SOqIS9vC89CvJqBljp9omuKqOh6tdaPrVhq1o5jutPuIrqBx1Dwu&#xA;HU/euKv0H89fnr+Wfku2V9V1ZZ7yWNZoNMsh6906OquhKAhYwyOGUysoI6YqhPy//OHUvN2oQCby&#xA;fqWi6JqDMmk6xeNGFuHETzqDD8LgNFEzB05rXau4xV6ViqV6vd6lp0F/qZeGawtLSWdbIRMs7SRI&#xA;X/vzKUoeNKen9OKsbY+QbS9ltPMjQXutqqfpDUNRtnMJaULRY5pkaCOOrjjGj0Ff5qnFUztbKCG8&#xA;Gk2Vw40TU7N7mzW3lI9D0njVxbyqarFIk68An2KHjSooqyG2t4ra3jt4QRFEoRAzM5oBQVZiWPzJ&#xA;xVUxV2KuxV2KuxV2KuxV2KuxVA65daraaRd3Wk2K6nqMMZe2095hbCZ139P1isgQt2JFK9aDfFXl&#xA;P5Mfmd5+1LTNQsPPOg38Ov284fTbc2rW9zc2sxY1KyrbwhYCOBl5Ku6g/ERyVeky+YNQtU9a+0a6&#xA;itQOUk0LRXBiHcyRRsZTT/itX+7FU3tbq2u7aK6tZUntp0WSGaNgyOjCqsrDYgjocVYt+bek3er/&#xA;AJYeadOs4WubufTLkW9vGrM8kixlkRFUFmZmWigdTirwH/nFv8vtavvJl9rjXbxG31B002wmQSIH&#xA;hiHqSokwMUc/NlWOZkbhxb4TXKvBhx8dDiqr60y4jVdHuXljVFtNQlitLcrpjFTegsJJ0aQMY7+W&#xA;U/vJVl4tDMWJMckf8gZhaxZDPFqGqvHc6brC2+lPCr28tmkMzSyMT8RklWaMxceNAigk1+KmKt+W&#xA;tcXU7CJZz6erwwwtqdm0ckLxSyJU/upQHCMysEbcGhoTQ4qmzKrKVYBlYUZTuCD2OKpFJ+X/AJDk&#xA;laWTy3pTyt9qRrK3LH5kpXFXeU7W3046ro9rDHbWVhet9Tt4lCIsVzFHcniq0AX1ppAKeGKsF8yW&#xA;v5t6pcearbUvLmkalotoFl8obxSzPMXCCXjc841kigeRm5p9vZeS4qk1tpHle58uab5O/MmzXTLj&#xA;XpHufL5eOKIwTngXghk5zOkqNR/3vUMFJalMVeR+Zv8AnGn8yfLnmS2vop5PMugljbT3UHJ7mK0u&#xA;AYJQbY822ikY0j5DFXiI8oa/68tu1uqTwBzNE8sSsgj+2ZKt8AH8z0HatdsVfW//ADjp+Qvkq18t&#xA;6Z5z1eA6vr18vrol6n7q0dWKsiwtXlIrg1d+4+ELir2XTX/TOttq6mumaeJbTTj+zNMzAXFwB/Kv&#xA;D0o2/wCMnVWU4q3qXnrylpnmfTvK9/qUVvrurI0thZPXlIqkjrTivIqwTkRyIIFSMVTm6tbe7tZr&#xA;W4QSW9wjRTRmtGRwVYGniDirxWXzba3GppZ3kd79cuja6RaavErR3F3BbXN2RJb3EboFN4rwx8me&#xA;McpC3RcxMeuxTmYCXqBpslhkBZGz07QfL0kLtcX0EFqq2/1Kw0u1JMNrakguoeicpJWVS5CgDiqi&#xA;tCzZbWnNhYwWNsttAZDElePrSyzvua05zM708BXbFVK5k1karZpbwwtpbLL9fmd2EyMAPS9NQCGq&#xA;a8q/ftRlUbirsVdirsVdirsVdirsVdirz7UtOg1XUQ0z+je3+q3Not0gH1iGK0s5lighZunqcDMV&#xA;PwsrOD9rFWM+VdYuJ9Nu7ttO0vS9Y0uxkv8A1dGh9BYXgKslpcjm7MtwrMpjdVIKtQcgrDW6LWzz&#xA;ZJxMTGMeR/H6G/LiEQDd29M8twx21zrlpCaW0GokwwjpH69tBcyKP9aWZ3/2XhmyaE7xVbHFFECs&#xA;aKiszOQoABZjyY7dyTU4qxi309bWa/utMjN7qOmXk6iAMsPKO+aK9uIOTFlc/vvUjLcfiotVWpKr&#xA;KQABQCg3O3idziqAj0sjXJdVkl5FrdLWCELx4KHLuWap5lmpTYUp7nFUfirsVSQvHaeb5nlIWO/0&#xA;5GVyaKv1CZhIW7bi9T7sVSzXPzd/LHQ4/U1LzNp8Qrx4xzLO9fApD6j/AIYq+a/+cnPzi/Lbzxod&#xA;hY+Xbue61bSrz1oboQvHCYnQiTg7cX5VCH7P44qifyT/AOcsJNMhg8v+fWkuLJAsdrra1eWMbDjO&#xA;vV1A35D4h/lbUVe/a/F+T/nTRjqWo3OmXtsiK8eqpNElxBSjoVnUiWNlYg8a9eoxVA+QrHUj5O0r&#xA;ypCzwpbwl9cvlj9Bo0uHaZbONBwMVw6SDmAtYl8GZMVejW9vBbwR29vGsUEKrHFEgCqqKKKqgbAA&#xA;DbFUHc+X9DudYtNZuLCCbVrBJI7K+eNWmiSXZwjkVXkNvv8AE4qj8VYZoH5dzabq8lxeaq1/pUE3&#xA;raNphgWP6ru3FHmDM06xAgR8gKUqeRpTXYuysEMxzRHrP6W+WomY8J5MzzYtCDuNUhh1Sz00KZLm&#xA;7WWWg6JDCAHkb25yIlOvxexxVGYq7FXYq7FXYq7FXYq7FXYq7FWMa95fuWup7m2hN5ZXjRy3tjHJ&#xA;6FytzAFWK6tJiUVZAqKjKzKCADyFGDqoCW11i6kgVrfVNUeBlljg1RrG1sknRuUck5tUWSX02HJQ&#xA;qyLyANK0YKsm0PSm06zKTS/Wb24ka4vrrjw9Wd6cmC1biqgBEWp4oAKmmKphiqV+ZLu7t9NCWcgh&#xA;uruaG0iuGAIiM8gQyUOxKqSVB6tQd8VTGCFIYwi1JoOTtuzEKF5Me5oBviq26ura0tZbq6lWC2gR&#xA;pJppCFREQVZmY7AADFUPol5c3ui2F7dQm3urm2hmntyCpjkkjDMnE1I4k0ocVRuKoLSL2+vIJZL2&#xA;wfT5Emkijid0kLxo1ElBQ7cx2P4ihKq+90rS79omvrOC6aAloDPGkhRj1KcgeJ27Yq+Ofz2/I3zX&#xA;qf5meZNT8oWKapaA291e2NpIhuLd7mIE8oSVY+o6OyhK7Yq8qP5PfmuK/wDOnazt/wAuFx/zRiqd&#xA;aH/zjn+c+sE+h5ZuLVFNGe+aO0pvSvGdkc/7FTir6Q/I38vvOXlHSdR8mXElo1yt2t3ca7ar6q2S&#xA;TQoHgiklVed0eGy8eMYPNuVVRlXuOmaZY6XYxWNjF6VvFXitSzFmJZndmJZ3diWZmJLE1O+KpVrP&#xA;mGaK4uLLT2giazjE2p6peH/RLNCOSq6hozJIy/Fw5rRfiZhVQ6qV/pG7+ri5/S2tCM/F9YOmR+j0&#xA;7wfVRciOv/XVN8VTTRfMU01zFY6g0Dy3MZm03UbQk2l5EoBYx1L+nItamMu3w/ErNRuKqf4qkvmT&#xA;VWgS206zu0g1a/nhjt0+BpRF6qm4kWN614QhzXiQDSuKonTdFFneXF7LeT313cpHE01x6QKxxFiq&#xA;IsMcKgcpGJ2qa9aAUVTHFXYq7FXYq7FXYq7FXYq7FXYq7FWL+YPzH8u6HdvbXXryvC6RXDQR8wkk&#xA;qh0jAJVpZCjcvThDvT9npmHm1+LHMQkfV9w7z3DzLbHDKQsDZkNhf2eoWNvfWUy3FndRrNbzoaq8&#xA;bjkrD5g5lg21K+FVC+sbW+tZLS7jEsEoAZSSDUGqsrCjKysAVYGoO43xVJJvKjWl/FquizuupRK0&#xA;Mi309zdRzQPxJiLSySNF8SKysvQ1+E8jiqpF5dkv779IeYUt7uSIr9QsVUyW9txPL1AZAPUmJp+8&#xA;4rQABQNyyqfYq7FXYq8h/Pf88Y/I9pHoPl9BqHnfUwEsbNF9X6uJDxWV4xXk7H+7T9o7nbYqqP8A&#xA;zjz+X/mXyjJrs3mi/N55h1+Gx1TUkYl3hlle6Xg8hJ5vRfiPStQKgVKr03zPdaxa6fHLpUtvFO1x&#xA;bwH61C8yEXE6Q1pHLARx9SvXFUp07XtT812UA0xX0+0ZFGqaj+0soA9W1tOQ+NkaqvNTitKLyavB&#xA;VkunafZadZRWVlEIbWBeMcYqe9SSTUszE1Ziak7nfFURirz3y3crqXmBtOvDDxtL/Ub905Tu9xcx&#xA;XPpw/E8EUTLao3GgdiGRDT4a5THUY5TMAQZDmO5kYEC62ehZcxYTqNrDa6heQ2zhUt9T0q/goNoJ&#xA;765FvdRoBsvqxcmb3lY98VZtiqjDZWUM89xDbxx3FyQ1zMiKryFVCqXYCrUUACvbFVbFXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq8u81eR/Nra5FNpUFvfWH1yS+QSukbLJMDzSVmBooZ2o6q54mnAMqued1&#xA;3YssuWU4n6xR8v1/Z+hzsOqEYgEcmdeUtEl0Py5Y6XNKs9xAhNxKgKo0sjGSQopqQnNzxB3pm+w4&#xA;hjgIjoHDlKzab5YxUb29tbK0mu7qQRW0Cl5ZG6BRuem/3YqhtP1q3v5SkEF0ihA/q3FtPbLuacf3&#xA;6Rty+jFVe/1HT9OtWu9QuYrO1T7c87rFGtfFnIAxVUiuLeVmWKVJGTiXVWBIDCq1p0qNxiqpirzj&#xA;88fzgsPy18rfWlRbnX9Q5RaNYvXizqBzmlpQ+nFyBIG7Gi7V5BVg/wDzj5+TOqxXsn5mefy935u1&#xA;Um4sre5AL2yyivrSCnwzOpoqAfu1267Kq9fv9RstI8yy3V9Olva3WnAtLIQADZz0oN6kk3wAAG56&#xA;b4qo3Gn3nmpOGpQvZeXuSuthIOFzd+mwdGnpvDFyUN6X22/b4/EhVZJDDFDEkMKLHDGoSONAFVVU&#xA;UCqBsABiqXnzHpPF5EkklgjryuIYZpYfhDlqTRo0Z4+mwajbN8J3IGKpjHIkiLJGwdHAZHU1BB3B&#xA;BGKvNvNeh3+j6sdStecentcG/tb+FDKbG7YETiaIDe3nDuWbtyepT4GHO9oaTLizfmcA4j/FHvc7&#xA;BljKHhz+BYj+Y3/OS935P0SzePR7bUtTv5bq2t5oLota8raG2kWfiELsrG7p6fIEFSOR65t9FqfH&#xA;xCdGPkXFy4+CVXac/ktdec/OGjjzB5r0+TR1nu0vpbN46R300USpb3USyN6sKKqISjclZkR0Kjkp&#xA;y2t6/irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSzzNfXFjoV5Paml6yCCxJFR9ZuGENuCP&#xA;AyyLXFUG3lW4kktUudYu72wtpo7hrO5WBubwHlDWSOOOQhZAsnxE1KjtWqqf4qwnzNc351y9Ib1l&#xA;0qCyu7KL0zLDbtcyzW0tzPEgWWVki9R1UScaL0VqMyqB0eOOz1ezm0a3tWka6ms42srRIIbvT3+r&#xA;S3F0zI8aA28lUDgsGNQFq1VVehu6IjO7BUUEsxNAANySTir5j/KzyzP+cX5n6n+afmaFn8t6ZcfV&#xA;vLenSn4GNuaxBkJf4IgfUcD4WlY9uS4q+grnzPHJcSWWiQHVr+M8JTG3C1gbwuLmjKpHdEDSd+FN&#xA;8VW2PlhW1GLWNamXUtYgDLaycOEFqslOS20RLcSeI5SMWc9OQX4QqniOjorowZGAKsDUEHcEEYql&#xA;3mT1P0DfcBUGJhL8TofSO0pVoisgYR8uJU1r0xVMI/T9NfTp6dBw4048abUp2xVLdCCA6j6BBs/r&#xA;s31bj6ZWvw/WacPi/wB6/W5c/i5V/ZpiqaYqh207T2uI7lrWFrmEsYpjGpdDJTnxalRy4itOuKoj&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVK5tLe5VFnQSLHIkqA9A8Z5I3+xIqMVVcVd&#xA;iqW6t5e03UnSeRPRv4iht9RhVBcx+nIJAEkZX+EkUZSKEEgihOKqOm+WLK0uor6ee5v9SjVh9aup&#xA;5ZAGk/vGjhLejFy6fu0FBsNsVTeREkRo3AZHBVlPQg7EHFWK6H+WflfRdLh0ezF1+hbZpDbaXJcz&#xA;NbIszmR42j5D1ULMTSbn1xVk9vb29tBHb20SQwRKEihjUIiqNgqqKAAYq64t4Lm3lt50EsEyNHLG&#xA;wqrI4oykeBBxVT03TrLTbCCwso/RtLZBHDHUtRV2HxMSxPiSanFURiqWny/pvFkQTRQsSWginmji&#xA;+Lny+BHCjkZSTQdaeAxVMY0SNFjQBUQBVUdABsAMVbxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:afa1bb74-e802-034a-86f6-f76d4e71dfd0"
    stRef:documentID="xmp.did:afa1bb74-e802-034a-86f6-f76d4e71dfd0"
    stRef:originalDocumentID="uuid:11571bd5-2104-4f08-856d-3b1328b858e8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:b26e10a1-cb6f-db4b-bb08-8bf3c8a1fd86"
      stEvt:when="2021-12-04T11:35:52+09:00"
      stEvt:softwareAgent="Adobe Illustrator 26.0 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:afa1bb74-e802-034a-86f6-f76d4e71dfd0"
      stEvt:when="2022-06-17T18:46:57+09:00"
      stEvt:softwareAgent="Adobe Illustrator 26.3 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:85e0807b-03ea-f04b-92c7-bc517a1e9249"
      stEvt:when="2022-06-17T18:47:05+09:00"
      stEvt:softwareAgent="Adobe Illustrator 26.3 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2206.w039.n003.266B.p1.266</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmpTPg:MaxPageSize
    stDim:w="850.000000"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                               
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
850 400 li
850 0 li
cp
clp
850 400 mo
0 400 li
0 0 li
850 0 li
850 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
165.641 293.908 mo
167.403 287.206 174.264 283.202 180.966 284.965 cv
187.667 286.727 191.671 293.588 189.909 300.29 cv
188.146 306.991 181.285 310.995 174.584 309.233 cv
167.882 307.47 163.878 300.609 165.641 293.908 cv
cp
1 .831373 .180392 rgb
f
177.777 285.04 mo
172.432 285.04 167.536 288.626 166.114 294.032 cv
164.423 300.462 168.278 307.069 174.708 308.76 cv
177.823 309.579 181.07 309.136 183.852 307.513 cv
186.633 305.889 188.616 303.28 189.435 300.165 cv
190.254 297.051 189.811 293.804 188.188 291.022 cv
186.565 288.24 183.956 286.257 180.841 285.438 cv
179.818 285.169 178.789 285.04 177.777 285.04 cv
cp
177.772 310.137 mo
176.678 310.137 175.566 309.997 174.459 309.706 cv
171.092 308.821 168.27 306.677 166.515 303.669 cv
164.76 300.662 164.282 297.151 165.167 293.783 cv
166.053 290.416 168.197 287.595 171.204 285.84 cv
174.212 284.085 177.722 283.605 181.09 284.491 cv
188.042 286.319 192.21 293.463 190.382 300.414 cv
188.845 306.259 183.551 310.137 177.772 310.137 cv
cp
0 0 0 rgb
f
177.385 304.167 mo
177.086 304.167 176.787 304.13 176.497 304.054 cv
173.465 303.256 172.65 301.33 172.617 301.249 cv
172.515 300.998 172.636 300.713 172.886 300.611 cv
173.137 300.509 173.422 300.629 173.524 300.88 cv
173.55 300.94 174.216 302.441 176.746 303.107 cv
177.367 303.27 178.045 303.188 178.606 302.882 cv
179.034 302.649 179.594 302.18 179.833 301.27 cv
180.318 299.425 179.164 298.475 177.827 297.376 cv
176.516 296.298 175.03 295.076 175.498 292.887 cv
175.668 292.09 176.302 291.272 177.152 290.753 cv
177.979 290.249 178.897 290.096 179.74 290.325 cv
182.633 291.086 182.879 292.98 182.888 293.06 cv
182.918 293.329 182.725 293.572 182.456 293.602 cv
182.191 293.633 181.949 293.442 181.915 293.176 cv
181.905 293.108 181.685 291.849 179.487 291.271 cv
178.904 291.112 178.257 291.226 177.662 291.589 cv
177.053 291.961 176.568 292.565 176.455 293.091 cv
176.112 294.698 177.195 295.589 178.449 296.62 cv
179.843 297.767 181.425 299.067 180.78 301.519 cv
180.524 302.492 179.918 303.281 179.075 303.741 cv
178.559 304.022 177.972 304.167 177.385 304.167 cv
cp
f
179.655 291.298 mo
179.614 291.298 179.572 291.293 179.53 291.282 cv
179.269 291.213 179.113 290.946 179.181 290.684 cv
179.647 288.914 li
179.716 288.653 179.983 288.496 180.245 288.566 cv
180.506 288.634 180.663 288.902 180.594 289.164 cv
180.128 290.933 li
180.07 291.153 179.872 291.298 179.655 291.298 cv
cp
f
175.641 305.704 mo
175.6 305.704 175.558 305.699 175.516 305.688 cv
175.255 305.619 175.098 305.352 175.167 305.09 cv
175.632 303.32 li
175.701 303.059 175.969 302.904 176.23 302.971 cv
176.492 303.04 176.648 303.308 176.579 303.569 cv
176.114 305.339 li
176.056 305.559 175.858 305.704 175.641 305.704 cv
cp
f
167.112 248.628 mo
162.432 248.629 158.015 246.842 154.644 243.58 cv
151.201 240.247 149.262 235.773 149.184 230.982 cv
149.125 227.374 150.135 223.878 152.104 220.872 cv
152.253 220.646 152.556 220.583 152.782 220.73 cv
153.008 220.879 153.072 221.182 152.923 221.408 cv
151.062 224.25 150.107 227.555 150.163 230.967 cv
150.236 235.496 152.07 239.725 155.325 242.876 cv
158.58 246.027 162.857 247.719 167.396 247.647 cv
176.747 247.495 184.23 239.764 184.077 230.413 cv
183.924 221.063 176.191 213.573 166.843 213.732 cv
163.47 213.788 160.228 214.829 157.467 216.743 cv
157.245 216.897 156.94 216.842 156.786 216.62 cv
156.632 216.398 156.687 216.093 156.909 215.939 cv
159.83 213.913 163.259 212.812 166.827 212.753 cv
166.926 212.752 167.025 212.751 167.124 212.751 cv
176.88 212.751 184.896 220.606 185.056 230.397 cv
185.217 240.287 177.302 248.465 167.412 248.626 cv
167.312 248.628 167.212 248.628 167.112 248.628 cv
cp
f
167.113 259.457 mo
151.467 259.457 138.613 246.86 138.356 231.159 cv
138.251 224.679 140.255 218.526 144.152 213.367 cv
144.314 213.151 144.621 213.108 144.837 213.271 cv
145.053 213.434 145.096 213.741 144.933 213.957 cv
141.169 218.94 139.233 224.883 139.335 231.143 cv
139.583 246.309 152.001 258.477 167.113 258.478 cv
167.267 258.478 167.419 258.477 167.573 258.474 cv
182.894 258.224 195.154 245.557 194.904 230.236 cv
194.783 222.815 191.779 215.885 186.446 210.723 cv
181.112 205.561 174.086 202.788 166.667 202.906 cv
160.382 203.008 154.486 205.151 149.618 209.104 cv
149.408 209.275 149.1 209.243 148.93 209.033 cv
148.759 208.823 148.791 208.514 149.001 208.344 cv
154.041 204.252 160.145 202.033 166.651 201.926 cv
174.324 201.805 181.605 204.675 187.127 210.019 cv
192.648 215.363 195.758 222.538 195.883 230.22 cv
196.142 246.08 183.449 259.194 167.589 259.453 cv
167.43 259.456 167.271 259.457 167.113 259.457 cv
cp
f
174.691 230.566 mo
174.622 226.385 171.178 223.051 166.996 223.119 cv
162.815 223.187 159.481 226.632 159.549 230.813 cv
159.617 234.995 163.062 238.329 167.243 238.26 cv
171.425 238.192 174.759 234.747 174.691 230.566 cv
cp
1 .831373 .180392 rgb
f
167.122 223.608 mo
167.082 223.608 167.044 223.608 167.004 223.609 cv
165.113 223.639 163.346 224.405 162.031 225.764 cv
160.715 227.123 160.008 228.914 160.039 230.805 cv
160.102 234.71 163.328 237.832 167.235 237.771 cv
169.127 237.74 170.893 236.975 172.209 235.616 cv
173.524 234.256 174.232 232.466 174.201 230.574 cv
174.138 226.709 170.973 223.608 167.122 223.608 cv
cp
167.116 238.751 mo
165.013 238.751 163.028 237.949 161.513 236.482 cv
159.966 234.984 159.095 232.974 159.06 230.821 cv
159.025 228.668 159.83 226.63 161.327 225.083 cv
162.825 223.536 164.835 222.665 166.988 222.63 cv
169.148 222.602 171.179 223.4 172.726 224.897 cv
174.273 226.395 175.145 228.405 175.18 230.558 cv
175.215 232.711 174.41 234.749 172.912 236.296 cv
171.415 237.844 169.404 238.715 167.251 238.75 cv
167.206 238.751 167.161 238.751 167.116 238.751 cv
cp
0 0 0 rgb
f
167.12 231.179 mo
166.997 231.179 166.874 231.133 166.779 231.042 cv
134.92 200.205 li
134.726 200.017 134.721 199.707 134.909 199.513 cv
135.097 199.318 135.406 199.314 135.601 199.501 cv
167.46 230.338 li
167.655 230.526 167.66 230.836 167.471 231.03 cv
167.376 231.13 167.248 231.179 167.12 231.179 cv
cp
f
143.158 207.625 mo
135.196 199.919 li
127.888 200.78 li
135.85 208.486 li
143.158 207.625 li
cp
f
128.97 201.146 mo
136.023 207.973 li
142.076 207.26 li
135.023 200.432 li
128.97 201.146 li
cp
135.85 208.976 mo
135.723 208.976 135.601 208.927 135.509 208.838 cv
127.548 201.132 li
127.412 201 127.364 200.803 127.425 200.623 cv
127.485 200.444 127.643 200.316 127.831 200.294 cv
135.139 199.433 li
135.285 199.413 135.431 199.465 135.537 199.567 cv
143.498 207.273 li
143.634 207.405 143.682 207.603 143.621 207.782 cv
143.561 207.961 143.403 208.089 143.215 208.111 cv
135.907 208.972 li
135.888 208.975 135.869 208.976 135.85 208.976 cv
cp
f
143.222 207.559 mo
135.26 199.853 li
135.819 192.587 li
143.78 200.293 li
143.222 207.559 li
cp
f
135.766 199.661 mo
142.813 206.482 li
143.274 200.485 li
136.227 193.663 li
135.766 199.661 li
cp
143.222 208.048 mo
143.097 208.048 142.974 208 142.881 207.911 cv
134.92 200.205 li
134.815 200.104 134.761 199.961 134.772 199.816 cv
135.33 192.549 li
135.345 192.36 135.467 192.197 135.645 192.129 cv
135.822 192.062 136.023 192.104 136.159 192.235 cv
144.12 199.941 li
144.225 200.042 144.279 200.185 144.268 200.331 cv
143.71 207.596 li
143.695 207.785 143.573 207.949 143.395 208.016 cv
143.339 208.038 143.28 208.048 143.222 208.048 cv
cp
f
572.916 281.398 mo
573.3 276.185 575.338 271.054 579.089 266.855 cv
588.126 256.741 603.651 255.867 613.765 264.903 cv
623.081 273.226 624.551 287.049 617.667 297.084 cv
626.251 304.754 li
637.318 289.964 635.422 268.908 621.389 256.371 cv
606.562 243.124 583.803 244.405 570.556 259.232 cv
564.699 265.788 561.684 273.895 561.422 282.045 cv
572.916 281.398 li
cp
1 1 1 rgb
f
572.916 281.398 mo
572.92 281.398 li
572.916 281.398 li
cp
618.311 297.003 mo
626.176 304.03 li
636.742 289.452 634.543 268.779 621.063 256.736 cv
613.989 250.416 604.879 247.232 595.408 247.762 cv
585.937 248.295 577.241 252.484 570.921 259.558 cv
565.497 265.629 562.317 273.412 561.933 281.525 cv
572.463 280.933 li
572.95 275.547 575.11 270.575 578.724 266.529 cv
583.182 261.54 589.316 258.585 595.996 258.209 cv
602.678 257.834 609.102 260.08 614.091 264.539 cv
623.349 272.81 625.127 286.693 618.311 297.003 cv
cp
626.251 305.243 mo
626.132 305.243 626.015 305.199 625.925 305.118 cv
617.34 297.448 li
617.157 297.285 617.123 297.01 617.263 296.807 cv
624.082 286.867 622.439 273.309 613.439 265.268 cv
603.542 256.426 588.297 257.285 579.454 267.181 cv
575.889 271.172 573.797 276.1 573.405 281.434 cv
573.386 281.679 573.19 281.872 572.944 281.887 cv
561.45 282.533 li
561.314 282.537 561.179 282.491 561.081 282.395 cv
560.982 282.299 560.929 282.166 560.933 282.029 cv
561.207 273.493 564.495 265.281 570.191 258.906 cv
576.685 251.637 585.621 247.333 595.352 246.785 cv
605.082 246.236 614.446 249.511 621.715 256.006 cv
628.567 262.127 632.83 270.531 633.72 279.67 cv
634.604 288.754 632.091 297.767 626.643 305.047 cv
626.561 305.157 626.437 305.227 626.3 305.24 cv
626.284 305.242 626.268 305.243 626.251 305.243 cv
cp
0 0 0 rgb
f
613.456 301.797 mo
609.225 305.461 604.002 307.463 598.685 307.741 cv
598.018 319.211 li
606.714 319.06 615.331 315.778 622.04 309.467 cv
613.456 301.797 li
cp
f
599.148 308.203 mo
598.537 318.708 li
607.02 318.437 615.069 315.173 621.313 309.474 cv
613.448 302.447 li
609.43 305.804 604.384 307.836 599.148 308.203 cv
cp
598.018 319.7 mo
597.885 319.7 597.757 319.646 597.665 319.55 cv
597.571 319.452 597.521 319.319 597.529 319.182 cv
598.196 307.712 li
598.211 307.463 598.41 307.265 598.659 307.252 cv
603.978 306.974 609.119 304.905 613.135 301.427 cv
613.321 301.266 613.599 301.268 613.782 301.432 cv
622.366 309.102 li
622.469 309.193 622.528 309.323 622.53 309.461 cv
622.531 309.598 622.476 309.729 622.375 309.823 cv
615.772 316.035 607.125 319.543 598.027 319.7 cv
598.024 319.7 598.021 319.7 598.018 319.7 cv
cp
f
592.382 307.254 mo
588.298 306.405 584.375 304.51 581.041 301.531 cv
576.824 297.764 574.22 292.869 573.264 287.709 cv
561.772 288.355 li
562.935 296.448 566.844 304.191 573.417 310.064 cv
578.758 314.836 585.128 317.722 591.712 318.77 cv
592.382 307.254 li
cp
1 .831373 .180392 rgb
f
562.336 288.814 mo
563.618 296.86 567.654 304.259 573.743 309.699 cv
578.7 314.128 584.745 317.059 591.255 318.197 cv
591.869 307.644 li
587.733 306.71 583.884 304.729 580.715 301.896 cv
576.652 298.266 573.943 293.546 572.865 288.221 cv
562.336 288.814 li
cp
591.712 319.259 mo
591.687 319.259 591.661 319.257 591.636 319.253 cv
584.736 318.155 578.324 315.104 573.091 310.429 cv
566.698 304.717 562.506 296.903 561.288 288.425 cv
561.268 288.289 561.306 288.152 561.393 288.046 cv
561.48 287.939 561.608 287.875 561.745 287.867 cv
573.236 287.22 li
573.48 287.208 573.7 287.377 573.745 287.619 cv
574.724 292.901 577.36 297.586 581.367 301.167 cv
584.514 303.978 588.357 305.918 592.481 306.775 cv
592.719 306.824 592.885 307.04 592.87 307.283 cv
592.201 318.798 li
592.193 318.936 592.127 319.065 592.019 319.151 cv
591.932 319.222 591.823 319.259 591.712 319.259 cv
cp
0 0 0 rgb
f
574.196 122.744 mo
571.297 120.833 li
567.623 118.412 562.65 120.053 561.14 124.187 cv
559.948 127.448 li
555.167 126.823 555.99 126.93 551.209 126.306 cv
550.895 122.848 li
550.497 118.465 546.114 115.601 541.94 116.997 cv
538.648 118.098 li
536.155 113.971 536.584 114.681 534.092 110.554 cv
536.6 108.153 li
539.779 105.109 539.285 99.8963 535.591 97.5037 cv
532.677 95.6159 li
534.35 91.0944 534.062 91.872 535.735 87.3505 cv
539.176 87.8141 li
543.537 88.4016 547.305 84.7654 546.873 80.3858 cv
546.532 76.9303 li
551.11 75.419 550.322 75.679 554.901 74.1677 cv
556.684 77.1472 li
558.944 80.9234 564.136 81.6019 567.29 78.5333 cv
569.779 76.1122 li
573.815 78.7492 573.121 78.2956 577.157 80.9326 cv
575.939 84.1844 li
574.396 88.3058 577.102 92.7881 581.468 93.3412 cv
584.913 93.7775 li
585.368 98.5771 585.29 97.7516 585.744 102.551 cv
582.443 103.627 li
578.258 104.99 576.441 109.9 578.731 113.659 cv
580.538 116.624 li
577.069 119.972 577.665 119.396 574.196 122.744 cv
cp
1 1 1 rgb
f
551.661 125.871 mo
559.623 126.912 li
560.68 124.019 li
561.451 121.907 563.119 120.292 565.253 119.587 cv
567.39 118.882 569.69 119.188 571.566 120.424 cv
574.139 122.12 li
579.916 116.544 li
578.313 113.913 li
577.143 111.994 576.92 109.683 577.7 107.575 cv
578.48 105.466 580.154 103.857 582.291 103.161 cv
585.22 102.207 li
584.463 94.2137 li
581.407 93.8268 li
579.176 93.5445 577.231 92.2786 576.069 90.354 cv
574.907 88.4295 574.692 86.1183 575.481 84.0128 cv
576.561 81.128 li
569.839 76.7364 li
567.632 78.8841 li
566.02 80.4517 563.818 81.1844 561.588 80.8925 cv
559.359 80.6012 557.418 79.3277 556.264 77.3987 cv
554.682 74.7554 li
547.057 77.2721 li
547.36 80.3376 li
547.581 82.5748 546.78 84.7534 545.162 86.3147 cv
543.545 87.8759 541.34 88.6 539.111 88.2991 cv
536.058 87.8877 li
533.272 95.418 li
535.857 97.0928 li
537.744 98.3152 538.948 100.3 539.16 102.538 cv
539.372 104.776 538.562 106.951 536.938 108.506 cv
534.714 110.637 li
538.864 117.51 li
541.785 116.533 li
543.917 115.82 546.22 116.115 548.102 117.345 cv
549.983 118.575 551.18 120.564 551.383 122.803 cv
551.661 125.871 li
cp
559.948 127.937 mo
559.927 127.937 559.906 127.936 559.884 127.933 cv
551.146 126.791 li
550.918 126.761 550.742 126.578 550.721 126.35 cv
550.408 122.892 li
550.232 120.953 549.196 119.23 547.566 118.165 cv
545.936 117.1 543.942 116.843 542.096 117.461 cv
538.803 118.563 li
538.586 118.634 538.347 118.547 538.229 118.351 cv
533.673 110.807 li
533.555 110.611 533.588 110.359 533.753 110.201 cv
536.262 107.799 li
537.668 106.453 538.369 104.569 538.185 102.63 cv
538.002 100.692 536.959 98.973 535.325 97.9143 cv
532.411 96.0267 li
532.219 95.9021 532.138 95.6609 532.218 95.4461 cv
535.276 87.1805 li
535.355 86.9657 535.572 86.8335 535.8 86.8653 cv
539.241 87.329 li
541.174 87.5891 543.082 86.9622 544.482 85.6103 cv
545.883 84.2581 546.577 82.3715 546.385 80.4339 cv
546.044 76.9783 li
546.022 76.7501 546.161 76.5372 546.378 76.4654 cv
554.747 73.703 li
554.964 73.6308 555.203 73.72 555.321 73.9163 cv
557.104 76.8958 li
558.104 78.5663 559.784 79.6693 561.715 79.9217 cv
563.646 80.1732 565.553 79.5399 566.949 78.1823 cv
569.438 75.7612 li
569.602 75.6014 569.856 75.5773 570.047 75.7023 cv
577.425 80.5228 li
577.616 80.648 577.696 80.8896 577.615 81.1044 cv
576.397 84.3563 li
575.715 86.1795 575.9 88.1812 576.907 89.848 cv
577.913 91.5147 579.598 92.611 581.53 92.8554 cv
584.975 93.2917 li
585.202 93.3207 585.379 93.503 585.401 93.7312 cv
586.232 102.505 li
586.253 102.733 586.114 102.946 585.896 103.017 cv
582.594 104.092 li
580.743 104.695 579.294 106.088 578.618 107.914 cv
577.943 109.74 578.136 111.741 579.149 113.404 cv
580.956 116.369 li
581.075 116.565 581.043 116.817 580.878 116.976 cv
574.537 123.096 li
574.371 123.256 574.118 123.279 573.927 123.153 cv
571.028 121.242 li
569.402 120.17 567.409 119.906 565.56 120.517 cv
563.712 121.127 562.268 122.526 561.599 124.354 cv
560.407 127.616 li
560.336 127.811 560.151 127.937 559.948 127.937 cv
cp
0 0 0 rgb
f
571.628 100.808 mo
571.628 107.665 566.068 113.225 559.211 113.225 cv
552.353 113.225 546.794 107.665 546.794 100.808 cv
546.794 93.9501 552.353 88.3909 559.211 88.3909 cv
566.068 88.3909 571.628 93.9501 571.628 100.808 cv
cp
f
559.211 88.8804 mo
552.634 88.8804 547.283 94.2309 547.283 100.808 cv
547.283 107.384 552.634 112.735 559.211 112.735 cv
565.787 112.735 571.138 107.384 571.138 100.808 cv
571.138 94.2309 565.787 88.8804 559.211 88.8804 cv
cp
559.211 113.714 mo
552.094 113.714 546.304 107.924 546.304 100.808 cv
546.304 93.6911 552.094 87.9014 559.211 87.9014 cv
566.327 87.9014 572.117 93.6911 572.117 100.808 cv
572.117 107.924 566.327 113.714 559.211 113.714 cv
cp
f
567.291 100.808 mo
567.291 105.271 563.673 108.888 559.211 108.888 cv
554.748 108.888 551.13 105.271 551.13 100.808 cv
551.13 96.345 554.748 92.7272 559.211 92.7272 cv
563.673 92.7272 567.291 96.345 567.291 100.808 cv
cp
1 1 1 rgb
f
559.211 93.2168 mo
555.025 93.2168 551.62 96.622 551.62 100.808 cv
551.62 104.993 555.025 108.399 559.211 108.399 cv
563.396 108.399 566.802 104.993 566.802 100.808 cv
566.802 96.622 563.396 93.2168 559.211 93.2168 cv
cp
559.211 109.378 mo
554.485 109.378 550.641 105.533 550.641 100.808 cv
550.641 96.0822 554.485 92.2378 559.211 92.2378 cv
563.936 92.2378 567.781 96.0822 567.781 100.808 cv
567.781 105.533 563.936 109.378 559.211 109.378 cv
cp
0 0 0 rgb
f
331.606 351.604 mo
329.505 350.219 li
326.843 348.464 323.24 349.654 322.145 352.649 cv
321.281 355.012 li
317.817 354.559 318.413 354.637 314.949 354.184 cv
314.722 351.679 li
314.433 348.503 311.257 346.427 308.233 347.439 cv
305.847 348.237 li
304.041 345.247 304.351 345.761 302.546 342.77 cv
304.363 341.03 li
306.666 338.825 306.308 335.047 303.632 333.314 cv
301.52 331.946 li
302.732 328.669 302.524 329.233 303.736 325.957 cv
306.23 326.292 li
309.39 326.718 312.12 324.083 311.807 320.91 cv
311.56 318.406 li
314.877 317.311 314.306 317.499 317.624 316.404 cv
318.916 318.563 li
320.554 321.299 324.316 321.791 326.602 319.567 cv
328.405 317.813 li
331.33 319.724 330.827 319.395 333.751 321.306 cv
332.869 323.662 li
331.751 326.649 333.712 329.897 336.876 330.297 cv
339.372 330.614 li
339.701 334.092 339.645 333.493 339.974 336.971 cv
337.582 337.751 li
334.55 338.738 333.233 342.297 334.892 345.02 cv
336.201 347.169 li
333.688 349.595 334.12 349.178 331.606 351.604 cv
cp
1 1 1 rgb
f
315.401 353.75 mo
320.956 354.476 li
321.685 352.481 li
322.258 350.912 323.497 349.712 325.084 349.188 cv
326.67 348.664 328.38 348.891 329.775 349.81 cv
331.548 350.979 li
335.579 347.089 li
334.474 345.275 li
333.605 343.848 333.439 342.131 334.019 340.564 cv
334.598 338.998 335.842 337.803 337.43 337.285 cv
339.45 336.627 li
338.921 331.05 li
336.814 330.783 li
335.157 330.573 333.711 329.633 332.848 328.203 cv
331.984 326.773 331.825 325.055 332.41 323.491 cv
333.155 321.501 li
328.466 318.437 li
326.943 319.918 li
325.745 321.083 324.109 321.626 322.452 321.41 cv
320.796 321.194 319.354 320.248 318.496 318.814 cv
317.405 316.991 li
312.085 318.748 li
312.294 320.862 li
312.458 322.524 311.863 324.143 310.661 325.303 cv
309.459 326.464 307.821 327.001 306.164 326.777 cv
304.059 326.494 li
302.115 331.748 li
303.898 332.903 li
305.3 333.811 306.195 335.286 306.352 336.949 cv
306.51 338.612 305.908 340.228 304.701 341.384 cv
303.167 342.853 li
306.063 347.648 li
308.077 346.974 li
309.662 346.444 311.372 346.665 312.771 347.579 cv
314.169 348.492 315.058 349.971 315.209 351.634 cv
315.401 353.75 li
cp
321.282 355.501 mo
321.26 355.501 321.239 355.5 321.218 355.497 cv
314.886 354.67 li
314.658 354.64 314.482 354.457 314.462 354.229 cv
314.234 351.723 li
314.11 350.359 313.382 349.147 312.236 348.398 cv
311.089 347.65 309.687 347.469 308.388 347.903 cv
306.002 348.702 li
305.785 348.773 305.546 348.686 305.427 348.49 cv
302.126 343.023 li
302.008 342.827 302.042 342.575 302.207 342.417 cv
304.024 340.677 li
305.013 339.73 305.507 338.405 305.378 337.042 cv
305.248 335.678 304.515 334.469 303.366 333.725 cv
301.254 332.357 li
301.062 332.232 300.982 331.991 301.061 331.776 cv
303.277 325.787 li
303.356 325.572 303.576 325.438 303.801 325.471 cv
306.295 325.807 li
307.652 325.99 308.996 325.55 309.981 324.599 cv
310.966 323.648 311.454 322.321 311.32 320.958 cv
311.073 318.454 li
311.05 318.226 311.189 318.013 311.406 317.941 cv
317.47 315.939 li
317.687 315.867 317.926 315.956 318.044 316.152 cv
319.336 318.311 li
320.039 319.487 321.221 320.262 322.579 320.44 cv
323.937 320.617 325.279 320.171 326.26 319.217 cv
328.064 317.462 li
328.228 317.302 328.481 317.278 328.673 317.403 cv
334.019 320.896 li
334.211 321.021 334.29 321.263 334.21 321.478 cv
333.327 323.834 li
332.847 325.116 332.978 326.525 333.686 327.697 cv
334.394 328.869 335.579 329.64 336.937 329.812 cv
339.433 330.128 li
339.661 330.157 339.838 330.339 339.859 330.567 cv
340.461 336.925 li
340.483 337.153 340.344 337.366 340.126 337.436 cv
337.733 338.216 li
336.431 338.64 335.412 339.62 334.937 340.904 cv
334.462 342.189 334.598 343.596 335.31 344.766 cv
336.619 346.914 li
336.739 347.11 336.706 347.362 336.541 347.521 cv
331.946 351.956 li
331.781 352.115 331.528 352.138 331.337 352.012 cv
329.236 350.628 li
328.093 349.875 326.691 349.688 325.391 350.118 cv
324.09 350.547 323.075 351.531 322.605 352.817 cv
321.741 355.18 li
321.67 355.375 321.485 355.501 321.282 355.501 cv
cp
0 0 0 rgb
f
327.938 335.708 mo
327.938 339.679 324.718 342.898 320.747 342.898 cv
316.776 342.898 313.557 339.679 313.557 335.708 cv
313.557 331.737 316.776 328.518 320.747 328.518 cv
324.718 328.518 327.938 331.737 327.938 335.708 cv
cp
1 1 1 rgb
f
320.747 329.007 mo
317.052 329.007 314.046 332.013 314.046 335.708 cv
314.046 339.403 317.052 342.409 320.747 342.409 cv
324.442 342.409 327.448 339.403 327.448 335.708 cv
327.448 332.013 324.442 329.007 320.747 329.007 cv
cp
320.747 343.388 mo
316.512 343.388 313.067 339.943 313.067 335.708 cv
313.067 331.473 316.512 328.028 320.747 328.028 cv
324.982 328.028 328.427 331.473 328.427 335.708 cv
328.427 339.943 324.982 343.388 320.747 343.388 cv
cp
0 0 0 rgb
f
641.799 222.396 mo
642.863 218.552 li
651.124 220.838 li
650.061 224.682 li
641.799 222.396 li
cp
f
642.401 222.054 mo
649.719 224.08 li
650.522 221.179 li
643.204 219.154 li
642.401 222.054 li
cp
650.061 225.171 mo
650.018 225.171 649.974 225.166 649.93 225.154 cv
641.668 222.867 li
641.543 222.833 641.437 222.75 641.373 222.637 cv
641.309 222.524 641.293 222.39 641.327 222.265 cv
642.391 218.421 li
642.463 218.161 642.734 218.008 642.993 218.08 cv
651.255 220.366 li
651.38 220.401 651.487 220.484 651.55 220.597 cv
651.614 220.71 651.631 220.843 651.596 220.969 cv
650.532 224.813 li
650.472 225.029 650.276 225.171 650.061 225.171 cv
cp
f
678.505 187.732 mo
681.77 175.934 674.704 163.718 662.766 160.716 cv
651.579 157.903 639.996 164.412 636.586 175.431 cv
634.721 181.457 635.587 187.637 638.451 192.684 cv
641.591 198.214 644.088 201.953 642.392 208.082 cv
656.91 212.1 li
658.586 206.046 662.511 204.063 668.01 201.027 cv
672.974 198.287 676.873 193.628 678.505 187.732 cv
cp
1 1 1 rgb
f
642.988 207.739 mo
656.575 211.499 li
658.314 205.81 662.073 203.739 667.222 200.902 cv
667.773 200.598 li
672.845 197.799 676.489 193.183 678.034 187.601 cv
679.58 182.011 678.825 176.172 675.906 171.159 cv
672.988 166.147 668.279 162.607 662.646 161.191 cv
651.647 158.424 640.406 164.744 637.053 175.576 cv
635.29 181.274 635.938 187.264 638.877 192.442 cv
639.079 192.798 639.279 193.147 639.474 193.489 cv
642.209 198.27 644.385 202.073 642.988 207.739 cv
cp
656.91 212.589 mo
656.867 212.589 656.823 212.583 656.78 212.571 cv
642.261 208.554 li
642.001 208.482 641.848 208.212 641.92 207.951 cv
643.452 202.414 641.427 198.874 638.625 193.975 cv
638.428 193.632 638.228 193.282 638.026 192.925 cv
634.952 187.51 634.274 181.245 636.118 175.286 cv
637.804 169.837 641.498 165.282 646.519 162.46 cv
651.54 159.638 657.352 158.85 662.885 160.241 cv
668.776 161.722 673.7 165.425 676.752 170.666 cv
679.804 175.909 680.594 182.016 678.977 187.862 cv
678.977 187.862 li
677.362 193.7 673.551 198.528 668.246 201.456 cv
667.694 201.76 li
662.426 204.662 658.945 206.58 657.382 212.23 cv
657.348 212.355 657.265 212.461 657.152 212.525 cv
657.077 212.567 656.994 212.589 656.91 212.589 cv
cp
0 0 0 rgb
f
640.246 210.645 mo
642.121 203.869 li
659.309 208.625 li
657.434 215.401 li
656.12 220.147 651.208 222.93 646.462 221.617 cv
646.462 221.617 li
641.715 220.303 638.933 215.391 640.246 210.645 cv
cp
1 .831373 .180392 rgb
f
640.175 212.737 mo
640.175 212.737 li
639.72 214.383 639.932 216.107 640.774 217.593 cv
641.615 219.078 642.985 220.147 644.631 220.602 cv
648.554 221.688 li
651.952 222.628 655.479 220.629 656.419 217.232 cv
658.706 208.966 li
642.462 204.471 li
640.175 212.737 li
cp
650.256 222.899 mo
649.607 222.899 648.948 222.813 648.292 222.631 cv
644.37 221.546 li
642.472 221.021 640.893 219.788 639.922 218.075 cv
638.951 216.362 638.706 214.374 639.231 212.476 cv
639.231 212.476 li
641.649 203.738 li
641.721 203.478 641.991 203.325 642.252 203.397 cv
659.439 208.153 li
659.699 208.225 659.852 208.495 659.78 208.756 cv
657.363 217.493 li
656.46 220.755 653.487 222.899 650.256 222.899 cv
cp
0 0 0 rgb
f
656.483 211.346 mo
656.469 211.346 656.454 211.344 656.439 211.34 cv
643.186 207.673 li
643.099 207.649 643.048 207.559 643.073 207.472 cv
643.096 207.386 643.185 207.334 643.273 207.359 cv
656.527 211.026 li
656.613 211.05 656.664 211.139 656.64 211.227 cv
656.62 211.298 656.555 211.346 656.483 211.346 cv
cp
f
662.116 190.988 mo
662.102 190.988 662.087 190.986 662.073 190.982 cv
648.819 187.315 li
648.733 187.291 648.682 187.201 648.706 187.114 cv
648.73 187.028 648.819 186.976 648.907 187.001 cv
662.16 190.668 li
662.246 190.692 662.297 190.782 662.273 190.869 cv
662.253 190.941 662.188 190.988 662.116 190.988 cv
cp
f
665.627 152.847 mo
665.583 152.847 665.539 152.842 665.496 152.829 cv
665.235 152.757 665.082 152.488 665.155 152.227 cv
667.41 144.078 li
667.482 143.818 667.753 143.665 668.012 143.737 cv
668.273 143.809 668.426 144.079 668.353 144.339 cv
666.098 152.488 li
666.038 152.705 665.841 152.847 665.627 152.847 cv
cp
f
686.316 167.117 mo
686.145 167.117 685.98 167.028 685.89 166.869 cv
685.756 166.634 685.839 166.335 686.074 166.202 cv
693.431 162.035 li
693.666 161.901 693.965 161.984 694.098 162.219 cv
694.232 162.454 694.149 162.753 693.913 162.886 cv
686.557 167.053 li
686.481 167.097 686.398 167.117 686.316 167.117 cv
cp
f
697.406 191.858 mo
697.363 191.858 697.319 191.853 697.275 191.841 cv
689.126 189.586 li
688.866 189.514 688.713 189.244 688.785 188.984 cv
688.857 188.723 689.127 188.57 689.387 188.643 cv
697.536 190.897 li
697.797 190.969 697.95 191.239 697.877 191.5 cv
697.817 191.716 697.62 191.858 697.406 191.858 cv
cp
f
641.82 154.805 mo
641.65 154.805 641.484 154.715 641.394 154.556 cv
637.227 147.2 li
637.093 146.965 637.176 146.666 637.411 146.533 cv
637.646 146.399 637.945 146.482 638.078 146.717 cv
642.246 154.074 li
642.379 154.309 642.297 154.608 642.061 154.741 cv
641.985 154.784 641.902 154.805 641.82 154.805 cv
cp
f
627.738 172.581 mo
627.695 172.581 627.651 172.575 627.607 172.563 cv
619.458 170.308 li
619.198 170.236 619.045 169.966 619.117 169.705 cv
619.189 169.445 619.46 169.292 619.72 169.364 cv
627.868 171.619 li
628.129 171.691 628.282 171.961 628.209 172.222 cv
628.149 172.438 627.953 172.581 627.738 172.581 cv
cp
f
647.758 205.497 mo
647.722 205.497 647.684 205.493 647.647 205.485 cv
647.384 205.424 647.22 205.161 647.281 204.897 cv
647.316 204.746 650.734 189.632 645.599 181.438 cv
645.455 181.209 645.524 180.907 645.753 180.763 cv
645.982 180.62 646.284 180.689 646.428 180.918 cv
651.781 189.458 648.382 204.483 648.234 205.118 cv
648.182 205.345 647.981 205.497 647.758 205.497 cv
cp
f
653.888 207.194 mo
653.839 207.194 653.788 207.186 653.738 207.171 cv
653.481 207.087 653.339 206.812 653.422 206.554 cv
653.623 205.933 658.43 191.298 667.412 186.725 cv
667.652 186.603 667.948 186.698 668.071 186.939 cv
668.194 187.18 668.098 187.475 667.857 187.597 cv
659.239 191.985 654.402 206.707 654.354 206.855 cv
654.287 207.062 654.095 207.194 653.888 207.194 cv
cp
f
667.681 187.483 mo
667.638 187.483 667.594 187.477 667.55 187.465 cv
666.448 187.16 666.039 186.396 665.71 185.783 cv
665.408 185.219 665.169 184.775 664.471 184.581 cv
663.772 184.388 663.339 184.647 662.79 184.975 cv
662.193 185.332 661.449 185.777 660.346 185.471 cv
659.243 185.166 658.834 184.403 658.504 183.789 cv
658.202 183.225 657.964 182.781 657.264 182.587 cv
656.566 182.394 656.132 182.653 655.584 182.981 cv
654.986 183.338 654.241 183.783 653.139 183.477 cv
652.036 183.172 651.626 182.408 651.297 181.795 cv
650.995 181.231 650.756 180.786 650.056 180.592 cv
649.355 180.399 648.923 180.658 648.374 180.986 cv
647.776 181.343 647.034 181.788 645.929 181.482 cv
645.669 181.41 645.516 181.14 645.588 180.88 cv
645.66 180.619 645.93 180.467 646.19 180.539 cv
646.89 180.732 647.323 180.473 647.872 180.145 cv
648.47 179.788 649.214 179.344 650.318 179.649 cv
651.421 179.954 651.831 180.718 652.16 181.332 cv
652.462 181.895 652.701 182.34 653.401 182.534 cv
654.1 182.727 654.533 182.468 655.081 182.14 cv
655.679 181.783 656.423 181.337 657.526 181.644 cv
658.628 181.949 659.038 182.712 659.367 183.326 cv
659.669 183.889 659.908 184.335 660.607 184.528 cv
661.307 184.721 661.74 184.462 662.288 184.134 cv
662.886 183.777 663.63 183.333 664.732 183.638 cv
665.835 183.943 666.244 184.706 666.573 185.32 cv
666.875 185.883 667.113 186.328 667.812 186.522 cv
668.072 186.594 668.225 186.863 668.153 187.124 cv
668.093 187.341 667.896 187.483 667.681 187.483 cv
cp
f
245.128 213.015 mo
236.418 206.484 li
234.412 162.178 li
252.911 187.581 li
245.128 213.015 li
cp
f
236.897 206.23 mo
244.864 212.206 li
252.372 187.671 li
234.975 163.782 li
236.897 206.23 li
cp
245.128 213.505 mo
245.024 213.505 244.921 213.471 244.835 213.407 cv
236.125 206.875 li
236.008 206.787 235.936 206.652 235.929 206.505 cv
233.923 162.2 li
233.914 161.984 234.046 161.788 234.25 161.716 cv
234.455 161.643 234.681 161.715 234.808 161.89 cv
253.307 187.293 li
253.398 187.417 253.424 187.577 253.379 187.724 cv
245.597 213.158 li
245.55 213.311 245.432 213.431 245.28 213.481 cv
245.231 213.497 245.179 213.505 245.128 213.505 cv
cp
f
295.183 176.564 mo
291.64 166.27 li
250.089 150.762 li
268.588 176.165 li
295.183 176.564 li
cp
f
268.84 175.68 mo
294.493 176.064 li
291.252 166.648 li
251.443 151.79 li
268.84 175.68 li
cp
295.183 177.054 mo
295.181 177.054 295.178 177.054 295.176 177.054 cv
268.58 176.655 li
268.426 176.652 268.283 176.578 268.192 176.453 cv
249.693 151.05 li
249.566 150.876 249.568 150.638 249.699 150.466 cv
249.829 150.295 250.058 150.228 250.26 150.303 cv
291.811 165.812 li
291.948 165.863 292.055 165.973 292.103 166.111 cv
295.646 176.405 li
295.698 176.556 295.673 176.723 295.579 176.852 cv
295.487 176.979 295.34 177.054 295.183 177.054 cv
cp
f
251.857 193.065 mo
218.15 154.624 li
204.46 139.01 198.057 119.16 201.19 100.053 cv
201.286 100.07 li
219.802 103.425 236.907 114.737 247.225 131.989 cv
274.075 176.886 li
251.857 193.065 li
cp
1 .831373 .180392 rgb
f
201.594 100.625 mo
198.713 119.194 204.866 138.73 218.518 154.301 cv
251.931 192.406 li
273.425 176.753 li
246.805 132.24 li
236.89 115.661 220.427 104.156 201.594 100.625 cv
cp
251.858 193.555 mo
251.721 193.555 251.585 193.498 251.489 193.388 cv
217.782 154.947 li
203.815 139.016 197.591 118.98 200.706 99.974 cv
200.728 99.8446 200.8 99.7293 200.907 99.6534 cv
201.014 99.5776 201.146 99.5483 201.275 99.5712 cv
201.372 99.5884 li
220.65 103.082 237.515 114.799 247.645 131.738 cv
274.495 176.635 li
274.625 176.852 274.568 177.133 274.363 177.282 cv
252.145 193.461 li
252.059 193.524 251.958 193.555 251.858 193.555 cv
cp
0 0 0 rgb
f
221.996 141.252 mo
219.585 137.942 220.314 133.304 223.625 130.893 cv
226.935 128.482 231.573 129.212 233.984 132.522 cv
236.395 135.833 235.665 140.47 232.355 142.881 cv
229.044 145.292 224.406 144.563 221.996 141.252 cv
cp
1 1 1 rgb
f
227.975 129.96 mo
226.522 129.96 225.11 130.417 223.913 131.289 cv
220.826 133.537 220.143 137.877 222.391 140.964 cv
222.391 140.964 li
224.639 144.051 228.979 144.733 232.067 142.485 cv
235.153 140.237 235.836 135.897 233.588 132.81 cv
232.499 131.315 230.893 130.333 229.066 130.046 cv
228.701 129.989 228.337 129.96 227.975 129.96 cv
cp
228 144.789 mo
225.556 144.789 223.145 143.662 221.6 141.54 cv
219.034 138.017 219.813 133.063 223.337 130.497 cv
225.044 129.255 227.132 128.749 229.218 129.079 cv
231.303 129.407 233.137 130.527 234.379 132.234 cv
236.945 135.757 236.166 140.711 232.643 143.277 cv
231.242 144.297 229.614 144.789 228 144.789 cv
cp
0 0 0 rgb
f
258.231 198.199 mo
253.579 191.811 li
272.094 178.329 li
276.745 184.716 li
258.231 198.199 li
cp
1 1 1 rgb
f
254.263 191.919 mo
258.339 197.515 li
276.061 184.609 li
271.986 179.013 li
254.263 191.919 li
cp
258.231 198.688 mo
258.08 198.688 257.931 198.618 257.835 198.487 cv
253.184 192.099 li
253.107 191.995 253.076 191.863 253.096 191.735 cv
253.116 191.607 253.186 191.492 253.291 191.415 cv
271.805 177.933 li
271.91 177.857 272.041 177.825 272.169 177.845 cv
272.298 177.865 272.413 177.936 272.489 178.041 cv
277.141 184.428 li
277.3 184.647 277.252 184.953 277.033 185.112 cv
258.519 198.594 li
258.432 198.657 258.331 198.688 258.231 198.688 cv
cp
0 0 0 rgb
f
203.775 130.153 mo
203.724 130.153 203.674 130.13 203.643 130.086 cv
203.589 130.013 203.605 129.911 203.678 129.858 cv
228.87 111.512 li
228.943 111.46 229.045 111.476 229.098 111.549 cv
229.151 111.621 229.135 111.723 229.063 111.776 cv
203.87 130.122 li
203.841 130.143 203.808 130.153 203.775 130.153 cv
cp
f
272.744 225.522 mo
272.502 225.522 272.292 225.343 272.259 225.097 cv
271.482 219.25 269.931 213.528 267.649 208.09 cv
267.545 207.84 267.662 207.554 267.911 207.449 cv
268.161 207.344 268.447 207.462 268.552 207.711 cv
270.867 213.23 272.441 219.035 273.23 224.967 cv
273.266 225.236 273.077 225.482 272.809 225.518 cv
272.787 225.52 272.766 225.522 272.744 225.522 cv
cp
f
266.108 204.669 mo
265.944 204.669 265.784 204.587 265.692 204.438 cv
263.573 201.035 li
263.43 200.806 263.501 200.504 263.73 200.361 cv
263.96 200.218 264.262 200.288 264.404 200.518 cv
266.523 203.921 li
266.666 204.15 266.595 204.452 266.366 204.595 cv
266.285 204.645 266.196 204.669 266.108 204.669 cv
cp
f
274.547 239.931 mo
274.421 239.931 274.296 239.883 274.2 239.787 cv
273.134 238.716 272.469 237.112 272.327 235.271 cv
272.202 233.66 272.456 232.071 272.701 230.535 cv
272.743 230.268 272.996 230.086 273.261 230.128 cv
273.528 230.171 273.71 230.422 273.667 230.689 cv
273.431 232.169 273.188 233.7 273.303 235.195 cv
273.427 236.805 273.992 238.19 274.894 239.096 cv
275.085 239.288 275.084 239.597 274.892 239.788 cv
274.797 239.883 274.672 239.931 274.547 239.931 cv
cp
f
287.035 207.856 mo
286.906 207.856 286.777 207.805 286.68 207.704 cv
282.455 203.262 278.542 198.455 275.052 193.414 cv
274.898 193.191 274.953 192.887 275.175 192.733 cv
275.398 192.579 275.702 192.634 275.857 192.857 cv
279.318 197.856 283.199 202.624 287.39 207.029 cv
287.576 207.225 287.568 207.535 287.373 207.721 cv
287.278 207.811 287.156 207.856 287.035 207.856 cv
cp
f
296.203 212.683 mo
296.139 212.683 296.073 212.671 296.011 212.644 cv
291.555 210.735 li
291.306 210.629 291.191 210.341 291.297 210.092 cv
291.404 209.844 291.692 209.729 291.94 209.835 cv
296.396 211.744 li
296.645 211.85 296.76 212.138 296.653 212.387 cv
296.574 212.572 296.393 212.683 296.203 212.683 cv
cp
f
292.943 280.308 mo
292.579 280.308 292.216 280.292 291.851 280.26 cv
285.421 279.694 279.965 274.122 279.309 267.759 cv
276.49 271.065 271.74 272.702 267.501 271.696 cv
262.809 270.583 259.013 266.296 258.477 261.503 cv
257.79 255.374 261.839 249.877 266.316 244.851 cv
266.496 244.649 266.806 244.631 267.008 244.811 cv
267.209 244.99 267.227 245.3 267.047 245.502 cv
262.721 250.359 258.805 255.646 259.449 261.394 cv
259.942 265.79 263.423 269.722 267.727 270.743 cv
272.032 271.765 276.908 269.816 279.322 266.11 cv
279.441 265.928 279.667 265.845 279.874 265.909 cv
280.082 265.972 280.224 266.164 280.222 266.382 cv
280.168 272.701 285.642 278.73 291.937 279.285 cv
298.233 279.843 304.676 274.859 305.728 268.628 cv
305.769 268.383 305.991 268.214 306.236 268.221 cv
310.604 268.452 314.988 266.453 317.676 263.002 cv
320.365 259.551 321.232 254.812 319.94 250.633 cv
319.86 250.375 320.005 250.101 320.263 250.021 cv
320.521 249.941 320.795 250.086 320.875 250.344 cv
322.26 254.824 321.331 259.905 318.448 263.604 cv
315.655 267.189 311.148 269.318 306.614 269.214 cv
305.332 275.474 299.305 280.308 292.943 280.308 cv
cp
f
328.023 225.153 mo
327.853 225.153 327.688 225.064 327.598 224.907 cv
327.463 224.672 327.544 224.373 327.779 224.238 cv
331.027 222.377 332.721 218.113 331.634 214.53 cv
330.548 210.948 326.77 208.348 323.036 208.599 cv
322.211 208.657 320.966 208.742 320.444 207.765 cv
320.149 207.213 320.28 206.594 320.376 206.143 cv
321.091 202.765 320.878 200.187 319.722 198.264 cv
318.181 195.697 314.749 194.332 311.378 194.944 cv
307.736 195.606 304.979 198.141 303.307 200.151 cv
303.135 200.359 302.826 200.388 302.618 200.215 cv
302.41 200.042 302.382 199.733 302.555 199.525 cv
304.33 197.39 307.271 194.695 311.203 193.981 cv
314.966 193.295 318.815 194.851 320.562 197.76 cv
321.85 199.906 322.103 202.714 321.333 206.346 cv
321.262 206.684 321.181 207.067 321.307 207.303 cv
321.514 207.689 322.211 207.674 322.969 207.622 cv
327.142 207.334 331.358 210.246 332.571 214.246 cv
333.785 218.247 331.893 223.009 328.266 225.088 cv
328.189 225.132 328.105 225.153 328.023 225.153 cv
cp
f
283.459 221.314 mo
283.296 221.314 283.137 221.233 283.044 221.085 cv
278.681 214.138 274.453 206.979 270.477 199.807 cv
270.346 199.571 270.431 199.273 270.667 199.142 cv
270.904 199.01 271.202 199.096 271.333 199.332 cv
275.301 206.489 279.519 213.632 283.873 220.564 cv
284.017 220.793 283.948 221.096 283.719 221.239 cv
283.638 221.29 283.548 221.314 283.459 221.314 cv
cp
f
290.576 232.143 mo
290.418 232.143 290.263 232.067 290.169 231.926 cv
286.031 225.736 li
285.88 225.512 285.941 225.208 286.166 225.057 cv
286.39 224.908 286.695 224.967 286.845 225.192 cv
290.983 231.381 li
291.133 231.606 291.073 231.91 290.848 232.061 cv
290.764 232.116 290.67 232.143 290.576 232.143 cv
cp
f
148.604 159.261 mo
147.269 159.261 146.184 160.346 146.184 161.68 cv
146.184 163.015 147.269 164.1 148.604 164.1 cv
149.938 164.1 151.024 163.015 151.024 161.68 cv
151.024 160.346 149.938 159.261 148.604 159.261 cv
cp
148.604 165.08 mo
146.729 165.08 145.205 163.555 145.205 161.68 cv
145.205 159.806 146.729 158.282 148.604 158.282 cv
150.478 158.282 152.003 159.806 152.003 161.68 cv
152.003 163.555 150.478 165.08 148.604 165.08 cv
cp
f
733.202 198.117 mo
731.868 198.117 730.782 199.203 730.782 200.537 cv
730.782 201.872 731.868 202.958 733.202 202.958 cv
734.536 202.958 735.622 201.872 735.622 200.537 cv
735.622 199.203 734.536 198.117 733.202 198.117 cv
cp
733.202 203.936 mo
731.328 203.936 729.803 202.411 729.803 200.537 cv
729.803 198.663 731.328 197.139 733.202 197.139 cv
735.076 197.139 736.601 198.663 736.601 200.537 cv
736.601 202.411 735.076 203.936 733.202 203.936 cv
cp
f
453.065 345.416 mo
451.731 345.416 450.645 346.501 450.645 347.836 cv
450.645 349.17 451.731 350.256 453.065 350.256 cv
454.4 350.256 455.485 349.17 455.485 347.836 cv
455.485 346.501 454.4 345.416 453.065 345.416 cv
cp
453.065 351.235 mo
451.191 351.235 449.666 349.71 449.666 347.836 cv
449.666 345.961 451.191 344.437 453.065 344.437 cv
454.94 344.437 456.464 345.961 456.464 347.836 cv
456.464 349.71 454.94 351.235 453.065 351.235 cv
cp
f
377.204 254.212 mo
375.869 254.212 374.784 255.298 374.784 256.632 cv
374.784 257.967 375.869 259.052 377.204 259.052 cv
378.538 259.052 379.624 257.967 379.624 256.632 cv
379.624 255.298 378.538 254.212 377.204 254.212 cv
cp
377.204 260.031 mo
375.329 260.031 373.805 258.506 373.805 256.632 cv
373.805 254.758 375.329 253.233 377.204 253.233 cv
379.078 253.233 380.603 254.758 380.603 256.632 cv
380.603 258.506 379.078 260.031 377.204 260.031 cv
cp
f
396.499 98.8503 mo
394.034 98.8503 392.029 100.855 392.029 103.32 cv
392.029 105.784 394.034 107.789 396.499 107.789 cv
398.963 107.789 400.968 105.784 400.968 103.32 cv
400.968 100.855 398.963 98.8503 396.499 98.8503 cv
cp
396.499 108.768 mo
393.494 108.768 391.05 106.324 391.05 103.32 cv
391.05 100.316 393.494 97.8713 396.499 97.8713 cv
399.503 97.8713 401.947 100.316 401.947 103.32 cv
401.947 106.324 399.503 108.768 396.499 108.768 cv
cp
f
671.064 268.255 mo
670.872 268.255 670.69 268.142 670.612 267.954 cv
670.508 267.704 670.626 267.418 670.876 267.314 cv
683.131 262.205 li
685.388 248.559 li
685.426 248.331 685.619 248.161 685.85 248.151 cv
699.575 247.539 li
708.479 228.307 li
708.593 228.062 708.884 227.955 709.129 228.068 cv
709.375 228.182 709.482 228.473 709.368 228.718 cv
700.338 248.22 li
700.261 248.386 700.099 248.495 699.916 248.503 cv
686.289 249.111 li
684.052 262.633 li
684.025 262.799 683.914 262.939 683.758 263.004 cv
671.252 268.218 li
671.191 268.243 671.127 268.255 671.064 268.255 cv
cp
f
232.071 350.898 mo
232.026 350.898 231.98 350.892 231.934 350.878 cv
231.674 350.803 231.525 350.531 231.601 350.271 cv
239.074 324.636 li
239.149 324.38 239.415 324.23 239.672 324.301 cv
256.336 328.826 li
264.199 313.34 li
264.276 313.189 264.425 313.088 264.594 313.073 cv
281.566 311.606 li
281.837 311.583 282.072 311.782 282.096 312.052 cv
282.119 312.321 281.919 312.558 281.65 312.581 cv
264.949 314.025 li
257.029 329.624 li
256.923 329.831 256.688 329.937 256.464 329.875 cv
239.879 325.371 li
232.541 350.545 li
232.479 350.759 232.283 350.898 232.071 350.898 cv
cp
f
595.011 211.143 mo
600.183 205.972 li
605.354 211.143 li
600.183 216.315 li
595.011 211.143 li
cp
f
595.703 211.143 mo
600.183 215.622 li
604.662 211.143 li
600.183 206.664 li
595.703 211.143 li
cp
600.183 216.804 mo
600.058 216.804 599.932 216.756 599.837 216.661 cv
594.665 211.489 li
594.573 211.398 594.522 211.273 594.522 211.143 cv
594.522 211.014 594.573 210.889 594.665 210.797 cv
599.837 205.626 li
599.929 205.534 600.053 205.482 600.183 205.482 cv
600.183 205.482 li
600.313 205.482 600.437 205.534 600.529 205.626 cv
605.7 210.797 li
605.892 210.988 605.892 211.298 605.7 211.489 cv
600.529 216.661 li
600.433 216.756 600.308 216.804 600.183 216.804 cv
cp
f
266.896 90.025 mo
272.067 84.8535 li
277.238 90.025 li
272.067 95.1964 li
266.896 90.025 li
cp
f
267.588 90.0248 mo
272.067 94.5044 li
276.546 90.0248 li
272.067 85.5457 li
267.588 90.0248 li
cp
272.067 95.6861 mo
271.937 95.6861 271.813 95.6344 271.721 95.5426 cv
266.55 90.3709 li
266.358 90.1797 266.358 89.87 266.55 89.6787 cv
271.721 84.5074 li
271.912 84.3161 272.222 84.3161 272.413 84.5074 cv
277.585 89.6787 li
277.776 89.87 277.776 90.1797 277.585 90.3709 cv
272.413 95.5426 li
272.321 95.6344 272.197 95.6861 272.067 95.6861 cv
cp
f
525.1 314.024 mo
525.061 314.024 525.021 314.019 524.981 314.009 cv
523.752 313.701 522.483 313.516 521.211 313.46 cv
520.941 313.448 520.732 313.22 520.744 312.949 cv
520.756 312.679 520.981 312.464 521.254 312.482 cv
522.592 312.541 523.926 312.735 525.219 313.06 cv
525.481 313.126 525.641 313.392 525.575 313.654 cv
525.519 313.876 525.319 314.024 525.1 314.024 cv
cp
513.551 314.672 mo
513.353 314.672 513.167 314.551 513.093 314.354 cv
512.998 314.101 513.126 313.819 513.379 313.724 cv
514.629 313.254 515.933 312.911 517.254 312.704 cv
517.523 312.661 517.772 312.844 517.814 313.111 cv
517.856 313.379 517.673 313.629 517.406 313.671 cv
516.15 313.868 514.911 314.195 513.723 314.641 cv
513.666 314.662 513.608 314.672 513.551 314.672 cv
cp
532.105 317.402 mo
532.001 317.402 531.897 317.369 531.808 317.301 cv
530.796 316.53 529.704 315.859 528.561 315.308 cv
528.318 315.191 528.216 314.898 528.333 314.655 cv
528.451 314.411 528.743 314.309 528.987 314.426 cv
530.189 315.006 531.337 315.711 532.402 316.523 cv
532.617 316.687 532.658 316.994 532.494 317.209 cv
532.398 317.335 532.252 317.402 532.105 317.402 cv
cp
506.968 318.813 mo
506.839 318.813 506.711 318.763 506.615 318.662 cv
506.428 318.467 506.435 318.157 506.63 317.97 cv
507.596 317.047 508.659 316.217 509.789 315.505 cv
510.018 315.361 510.32 315.43 510.464 315.659 cv
510.608 315.888 510.539 316.19 510.311 316.334 cv
509.236 317.011 508.225 317.799 507.307 318.678 cv
507.212 318.768 507.09 318.813 506.968 318.813 cv
cp
537.224 323.258 mo
537.054 323.258 536.888 323.169 536.798 323.01 cv
536.171 321.907 535.429 320.863 534.591 319.905 cv
534.413 319.701 534.434 319.392 534.638 319.214 cv
534.841 319.036 535.151 319.057 535.328 319.26 cv
536.209 320.268 536.99 321.366 537.649 322.526 cv
537.783 322.761 537.701 323.06 537.466 323.194 cv
537.389 323.237 537.306 323.258 537.224 323.258 cv
cp
502.534 325.204 mo
502.47 325.204 502.405 325.191 502.342 325.165 cv
502.094 325.058 501.978 324.771 502.085 324.522 cv
502.609 323.296 503.263 322.116 504.026 321.016 cv
504.18 320.793 504.485 320.738 504.707 320.893 cv
504.929 321.047 504.984 321.352 504.83 321.574 cv
504.104 322.62 503.483 323.741 502.985 324.907 cv
502.905 325.093 502.724 325.204 502.534 325.204 cv
cp
539.624 330.654 mo
539.378 330.654 539.166 330.469 539.138 330.218 cv
538.997 328.953 538.727 327.701 538.336 326.495 cv
538.253 326.238 538.393 325.962 538.651 325.879 cv
538.906 325.795 539.183 325.935 539.267 326.193 cv
539.679 327.461 539.963 328.78 540.111 330.11 cv
540.141 330.379 539.948 330.621 539.679 330.651 cv
539.66 330.653 539.642 330.654 539.624 330.654 cv
cp
501.461 337.137 mo
501.238 337.137 501.036 336.983 500.984 336.755 cv
500.689 335.457 500.525 334.12 500.495 332.779 cv
500.493 332.699 500.511 332.624 500.543 332.556 cv
500.509 332.489 500.49 332.414 500.49 332.334 cv
500.49 330.992 500.625 329.651 500.89 328.347 cv
500.944 328.083 501.203 327.911 501.468 327.966 cv
501.733 328.019 501.904 328.278 501.85 328.543 cv
501.597 329.782 501.469 331.058 501.469 332.334 cv
501.469 332.41 501.452 332.482 501.421 332.546 cv
501.453 332.61 501.472 332.682 501.474 332.758 cv
501.502 334.033 501.658 335.305 501.939 336.539 cv
501.999 336.802 501.833 337.065 501.57 337.124 cv
501.533 337.133 501.497 337.137 501.461 337.137 cv
cp
538.931 338.4 mo
538.884 338.4 538.837 338.393 538.79 338.379 cv
538.531 338.302 538.384 338.029 538.462 337.77 cv
538.826 336.556 539.067 335.297 539.18 334.029 cv
539.204 333.759 539.446 333.562 539.711 333.585 cv
539.98 333.609 540.179 333.846 540.155 334.116 cv
540.037 335.449 539.782 336.773 539.399 338.051 cv
539.336 338.263 539.141 338.4 538.931 338.4 cv
cp
504.68 344.216 mo
504.528 344.216 504.379 344.146 504.284 344.014 cv
503.496 342.932 502.817 341.767 502.265 340.553 cv
502.152 340.307 502.261 340.017 502.507 339.905 cv
502.754 339.793 503.044 339.902 503.156 340.148 cv
503.681 341.302 504.326 342.409 505.075 343.438 cv
505.234 343.657 505.186 343.963 504.967 344.122 cv
504.88 344.185 504.78 344.216 504.68 344.216 cv
cp
535.241 345.246 mo
535.13 345.246 535.019 345.209 534.927 345.132 cv
534.72 344.959 534.692 344.65 534.865 344.443 cv
535.682 343.466 536.401 342.405 537.003 341.288 cv
537.131 341.05 537.429 340.961 537.666 341.09 cv
537.904 341.218 537.993 341.515 537.865 341.753 cv
537.231 342.927 536.475 344.043 535.617 345.07 cv
535.52 345.186 535.381 345.246 535.241 345.246 cv
cp
510.419 349.465 mo
510.333 349.465 510.246 349.442 510.168 349.395 cv
509.022 348.709 507.941 347.904 506.954 347.001 cv
506.755 346.819 506.741 346.509 506.923 346.309 cv
507.106 346.11 507.415 346.096 507.615 346.279 cv
508.553 347.137 509.581 347.903 510.671 348.555 cv
510.903 348.694 510.978 348.995 510.839 349.227 cv
510.747 349.38 510.585 349.465 510.419 349.465 cv
cp
529.163 350.098 mo
528.985 350.098 528.813 350 528.727 349.831 cv
528.604 349.59 528.699 349.296 528.94 349.172 cv
530.07 348.596 531.147 347.901 532.141 347.107 cv
532.353 346.939 532.661 346.973 532.829 347.184 cv
532.998 347.396 532.963 347.703 532.752 347.872 cv
531.706 348.707 530.573 349.438 529.385 350.044 cv
529.314 350.081 529.238 350.098 529.163 350.098 cv
cp
517.76 352.033 mo
517.739 352.033 517.717 352.032 517.694 352.029 cv
516.369 351.851 515.058 351.537 513.797 351.096 cv
513.542 351.007 513.407 350.728 513.496 350.472 cv
513.586 350.217 513.866 350.082 514.12 350.172 cv
515.318 350.591 516.565 350.889 517.825 351.059 cv
518.093 351.094 518.281 351.341 518.245 351.609 cv
518.212 351.855 518.002 352.033 517.76 352.033 cv
cp
521.665 352.163 mo
521.409 352.163 521.194 351.965 521.177 351.706 cv
521.159 351.436 521.363 351.203 521.633 351.185 cv
522.904 351.101 524.168 350.887 525.389 350.551 cv
525.649 350.48 525.919 350.633 525.991 350.893 cv
526.063 351.154 525.91 351.423 525.649 351.495 cv
524.365 351.849 523.035 352.073 521.698 352.162 cv
521.687 352.163 521.676 352.163 521.665 352.163 cv
cp
f
637.219 106.522 mo
637.026 106.522 636.843 106.408 636.766 106.219 cv
636.663 105.969 636.782 105.683 637.032 105.58 cv
637.89 105.228 638.799 105.049 639.734 105.049 cv
639.735 105.049 639.735 105.049 639.737 105.049 cv
640.214 105.049 640.691 105.097 641.156 105.19 cv
641.421 105.244 641.593 105.502 641.539 105.767 cv
641.486 106.032 641.226 106.202 640.962 106.15 cv
640.561 106.069 640.148 106.028 639.736 106.028 cv
639.735 106.028 639.735 106.028 639.734 106.028 cv
638.928 106.028 638.144 106.182 637.405 106.486 cv
637.344 106.511 637.281 106.522 637.219 106.522 cv
cp
646.247 111.413 mo
646.017 111.413 645.811 111.25 645.767 111.015 cv
645.54 109.818 644.965 108.725 644.103 107.853 cv
643.914 107.66 643.915 107.35 644.108 107.16 cv
644.3 106.971 644.61 106.972 644.8 107.165 cv
645.799 108.175 646.465 109.444 646.728 110.832 cv
646.779 111.098 646.605 111.354 646.339 111.405 cv
646.308 111.41 646.277 111.413 646.247 111.413 cv
cp
633.572 115.096 mo
633.377 115.096 633.193 114.979 633.117 114.787 cv
632.786 113.953 632.619 113.071 632.619 112.166 cv
632.619 110.747 633.036 109.376 633.824 108.202 cv
633.975 107.977 634.28 107.918 634.503 108.069 cv
634.728 108.219 634.787 108.523 634.637 108.748 cv
633.957 109.76 633.598 110.942 633.598 112.166 cv
633.598 112.947 633.742 113.707 634.027 114.426 cv
634.127 114.678 634.004 114.962 633.752 115.062 cv
633.693 115.085 633.632 115.096 633.572 115.096 cv
cp
643.358 118.207 mo
643.199 118.207 643.042 118.129 642.948 117.985 cv
642.8 117.759 642.864 117.455 643.09 117.308 cv
644.115 116.638 644.909 115.691 645.387 114.568 cv
645.492 114.32 645.779 114.203 646.029 114.31 cv
646.278 114.415 646.394 114.703 646.287 114.952 cv
645.734 116.253 644.813 117.351 643.626 118.127 cv
643.543 118.181 643.451 118.207 643.358 118.207 cv
cp
639.653 119.283 mo
639.651 119.283 639.649 119.283 639.647 119.283 cv
638.228 119.265 636.863 118.831 635.698 118.028 cv
635.476 117.874 635.42 117.57 635.573 117.347 cv
635.727 117.124 636.032 117.069 636.254 117.222 cv
637.258 117.915 638.436 118.289 639.659 118.304 cv
639.929 118.307 640.146 118.529 640.142 118.799 cv
640.139 119.068 639.921 119.283 639.653 119.283 cv
cp
f
379.351 352.904 mo
376.384 352.904 374.204 352.137 372.875 350.586 cv
367.8 344.665 376.545 329.924 384.775 318.601 cv
396.115 303 413.995 283.528 435.122 263.773 cv
435.32 263.589 435.63 263.599 435.814 263.797 cv
435.999 263.994 435.988 264.304 435.791 264.489 cv
392.232 305.218 366.085 341.159 373.618 349.949 cv
377.827 354.861 392.624 350.619 414.215 338.313 cv
436.324 325.713 463.282 306.105 490.124 283.103 cv
516.965 260.1 540.469 236.462 556.307 216.543 cv
571.773 197.09 578.23 183.117 574.021 178.206 cv
569.77 173.246 554.764 177.607 532.849 190.171 cv
532.615 190.306 532.315 190.225 532.18 189.99 cv
532.046 189.755 532.127 189.456 532.362 189.322 cv
555.052 176.313 570.111 172.139 574.764 177.569 cv
579.374 182.948 573.091 197.005 557.073 217.152 cv
541.198 237.118 517.648 260.804 490.761 283.846 cv
463.874 306.888 436.861 326.533 414.7 339.164 cv
398.786 348.234 386.674 352.904 379.351 352.904 cv
cp
f
447.71 115.274 mo
449.513 123.014 449.183 132.569 449.183 132.569 cv
442.174 135.292 li
442.174 135.292 437.876 152.962 464.962 147.547 cv
470.224 146.495 485.459 134.925 485.459 134.925 cv
473.412 131.48 li
473.412 131.48 472.258 113.967 471.798 105.267 cv
465.467 108.216 455.307 112.903 447.71 115.274 cv
cp
1 1 1 rgb
f
449.183 132.569 mo
449.186 132.569 li
449.183 132.569 li
cp
442.6 135.651 mo
442.401 136.755 441.803 141.36 444.919 144.601 cv
448.373 148.193 455.084 149.022 464.866 147.067 cv
469.284 146.184 481.199 137.488 484.376 135.125 cv
473.278 131.951 li
473.079 131.894 472.937 131.719 472.924 131.513 cv
472.913 131.342 471.826 114.836 471.348 106.016 cv
465.971 108.519 455.851 113.188 448.287 115.605 cv
449.972 123.239 449.675 132.491 449.672 132.586 cv
449.665 132.781 449.542 132.954 449.36 133.025 cv
442.6 135.651 li
cp
455.722 149.071 mo
450.491 149.071 446.635 147.803 444.207 145.272 cv
440.291 141.192 441.639 135.42 441.698 135.176 cv
441.736 135.02 441.847 134.893 441.996 134.835 cv
448.701 132.231 li
448.737 130.505 448.817 122.183 447.233 115.386 cv
447.175 115.136 447.32 114.883 447.564 114.807 cv
455.424 112.354 466.344 107.268 471.592 104.823 cv
471.739 104.755 471.911 104.764 472.05 104.847 cv
472.19 104.931 472.278 105.078 472.287 105.241 cv
472.706 113.168 473.714 128.607 473.878 131.104 cv
485.594 134.454 li
485.772 134.505 485.906 134.653 485.94 134.835 cv
485.975 135.017 485.903 135.203 485.755 135.315 cv
485.13 135.79 470.37 146.965 465.058 148.027 cv
461.575 148.723 458.46 149.071 455.722 149.071 cv
cp
0 0 0 rgb
f
431.117 66.5438 mo
428.643 67.1354 426.173 64.6308 426.124 61.9823 cv
426.074 59.3338 427.932 56.937 430.215 55.7743 cv
432.498 54.6116 435.129 54.4782 437.691 54.1097 cv
436.726 51.5415 437.948 48.4514 440.08 46.8065 cv
442.212 45.1616 445.032 44.7698 447.657 45.092 cv
449.381 45.3038 451.118 45.8235 452.479 46.9453 cv
453.84 48.0672 454.766 49.8719 454.692 51.8069 cv
456.986 48.9149 460.69 46.9708 464.183 47.8076 cv
467.675 48.6443 470.31 52.912 470.574 55.8488 cv
472.273 53.763 474.495 52.0487 477.113 52.1899 cv
482.307 52.4701 483.479 56.8851 481.142 62.5651 cv
483.907 61.2038 488.028 62.3939 489.342 66.4113 cv
490.321 69.4028 489.224 74.1626 487.141 76.5027 cv
486.779 76.9094 486.255 77.3047 485.614 77.6626 cv
484.805 82.1052 483.794 86.7565 482.265 92.6195 cv
481.16 96.8566 479.243 101.551 476.999 105.412 cv
475.943 107.228 475.121 108.11 472.994 109.102 cv
472.876 107.262 470.959 106.349 470.661 104.52 cv
470.296 102.271 471.743 100.29 470.387 98.2977 cv
467.804 94.5025 466.045 90.3388 465.219 86.0678 cv
464.542 82.5607 464.517 78.8704 466.172 75.6329 cv
466.762 74.4798 467.601 73.3986 468.626 72.4676 cv
468.17 71.5556 467.815 70.6263 467.527 69.7171 cv
466.006 72.3298 464.892 74.1274 461.082 75.3766 cv
458.301 76.2883 454.996 75.1817 454.06 72.5303 cv
453.467 75.2058 449.307 78.9834 446.692 79.2486 cv
444.078 79.5138 443.097 78.3083 442.045 75.7997 cv
439.723 77.8552 437.984 79.9519 435.615 80.851 cv
431.996 82.2249 427.518 79.9587 426.32 76.1462 cv
425.121 72.3337 427.432 67.7084 431.117 66.5438 cv
cp
1 .831373 .180392 rgb
f
467.526 69.2276 mo
467.544 69.2276 467.562 69.2286 467.58 69.2305 cv
467.773 69.2517 467.934 69.3844 467.993 69.5689 cv
468.309 70.5629 468.659 71.4395 469.064 72.2486 cv
469.162 72.4448 469.118 72.6824 468.955 72.8299 cv
467.978 73.7178 467.166 74.764 466.608 75.8557 cv
465.21 78.5909 464.913 81.9008 465.7 85.9749 cv
466.518 90.2062 468.231 94.2593 470.792 98.0224 cv
471.718 99.3835 471.495 100.725 471.279 102.023 cv
471.147 102.81 471.012 103.625 471.145 104.442 cv
471.268 105.198 471.73 105.795 472.22 106.427 cv
472.675 107.015 473.142 107.618 473.361 108.375 cv
475.012 107.514 475.701 106.672 476.576 105.166 cv
478.779 101.377 480.68 96.7591 481.791 92.496 cv
483.201 87.09 484.263 82.3489 485.133 77.5749 cv
485.159 77.4308 485.248 77.3066 485.375 77.2352 cv
485.971 76.9021 486.456 76.5366 486.775 76.1774 cv
488.783 73.9216 489.785 69.3391 488.877 66.5635 cv
488.324 64.8733 487.18 63.5889 485.655 62.9467 cv
484.244 62.3527 482.638 62.3743 481.358 63.0042 cv
481.175 63.0944 480.956 63.0616 480.807 62.9226 cv
480.659 62.7835 480.611 62.567 480.689 62.3788 cv
482.029 59.1232 482.167 56.381 481.078 54.6571 cv
480.314 53.4459 478.97 52.7803 477.087 52.6788 cv
474.992 52.5644 472.927 53.7362 470.954 56.158 cv
470.828 56.3124 470.621 56.3744 470.431 56.317 cv
470.241 56.2587 470.104 56.091 470.087 55.8927 cv
469.85 53.2606 467.446 49.0926 464.069 48.2838 cv
461.028 47.5549 457.498 49.0575 455.076 52.1111 cv
454.944 52.277 454.721 52.3399 454.522 52.266 cv
454.324 52.1927 454.195 51.9999 454.203 51.7884 cv
454.266 50.121 453.486 48.41 452.168 47.3231 cv
451.048 46.3998 449.51 45.8126 447.597 45.5779 cv
444.747 45.2285 442.184 45.8018 440.379 47.194 cv
438.274 48.8185 437.315 51.7175 438.15 53.9375 cv
438.202 54.0763 438.188 54.2313 438.113 54.359 cv
438.037 54.4866 437.908 54.5731 437.761 54.5943 cv
437.284 54.6628 436.805 54.7234 436.326 54.7838 cv
434.215 55.0502 432.221 55.3016 430.437 56.2104 cv
428.499 57.1977 426.564 59.3626 426.613 61.9733 cv
426.637 63.2663 427.311 64.5797 428.372 65.4009 cv
429.197 66.0396 430.132 66.2765 431.003 66.0676 cv
431.261 66.0069 431.518 66.1593 431.589 66.4129 cv
431.659 66.6669 431.516 66.9311 431.264 67.0105 cv
427.849 68.0899 425.673 72.4583 426.787 75.9994 cv
427.332 77.7342 428.646 79.2149 430.391 80.0613 cv
432.044 80.8635 433.884 80.9846 435.442 80.3934 cv
437.13 79.7528 438.49 78.4612 440.066 76.9659 cv
440.592 76.4663 441.137 75.9497 441.72 75.4331 cv
441.838 75.3286 441.999 75.2875 442.154 75.3224 cv
442.307 75.3574 442.435 75.4647 442.496 75.6103 cv
443.49 77.9793 444.326 78.9956 446.643 78.7617 cv
449.077 78.5147 453.033 74.9019 453.582 72.4244 cv
453.629 72.211 453.812 72.0549 454.03 72.0416 cv
454.247 72.0279 454.449 72.1615 454.521 72.3672 cv
455.4 74.8577 458.545 75.6938 460.929 74.9114 cv
464.647 73.6925 465.677 71.9216 467.103 69.4709 cv
467.192 69.3192 467.353 69.2276 467.526 69.2276 cv
cp
472.994 109.591 mo
472.907 109.591 472.821 109.568 472.744 109.523 cv
472.605 109.44 472.516 109.294 472.505 109.133 cv
472.454 108.327 471.964 107.696 471.446 107.027 cv
470.903 106.326 470.341 105.601 470.178 104.599 cv
470.02 103.623 470.169 102.728 470.313 101.862 cv
470.514 100.653 470.688 99.6098 469.982 98.5731 cv
467.346 94.6994 465.582 90.5233 464.739 86.1604 cv
463.908 81.8638 464.235 78.3471 465.736 75.4102 cv
466.295 74.3166 467.084 73.2675 468.028 72.357 cv
467.807 71.8893 467.601 71.4001 467.409 70.8816 cv
466.139 72.9881 464.802 74.6721 461.234 75.8417 cv
458.453 76.7536 455.52 75.8274 454.135 73.7621 cv
452.843 76.4544 449.24 79.4823 446.742 79.7356 cv
444.095 80.0043 442.908 78.8602 441.869 76.6169 cv
441.48 76.9732 441.106 77.3289 440.74 77.6762 cv
439.157 79.1789 437.661 80.5983 435.789 81.3087 cv
433.981 81.9945 431.858 81.8613 429.964 80.9422 cv
427.977 79.9785 426.479 78.284 425.852 76.293 cv
424.771 72.8529 426.32 68.8649 429.196 66.9357 cv
428.704 66.7789 428.224 66.524 427.773 66.1752 cv
426.483 65.1769 425.664 63.5737 425.634 61.9914 cv
425.577 58.9575 427.783 56.4637 429.993 55.3381 cv
431.929 54.3518 434.102 54.0777 436.203 53.8126 cv
436.486 53.7767 436.77 53.741 437.052 53.7036 cv
436.419 51.1932 437.525 48.1593 439.781 46.419 cv
441.791 44.8684 444.609 44.2238 447.717 44.6062 cv
449.817 44.8641 451.524 45.5239 452.791 46.5678 cv
454.036 47.5941 454.855 49.04 455.105 50.5884 cv
457.713 47.861 461.213 46.593 464.297 47.3317 cv
467.535 48.1072 470.161 51.6338 470.887 54.7417 cv
472.868 52.606 474.967 51.5886 477.139 51.7011 cv
479.327 51.8192 480.976 52.6605 481.906 54.1344 cv
483.047 55.9409 483.067 58.6127 481.981 61.7346 cv
483.283 61.3939 484.733 61.4959 486.035 62.0445 cv
487.825 62.7985 489.165 64.2952 489.808 66.2592 cv
490.825 69.3694 489.75 74.3082 487.507 76.8282 cv
487.148 77.2307 486.661 77.6154 486.055 77.9739 cv
485.188 82.6972 484.133 87.3972 482.739 92.7433 cv
481.606 97.0883 479.668 101.796 477.422 105.658 cv
476.364 107.479 475.503 108.472 473.201 109.545 cv
473.135 109.576 473.064 109.591 472.994 109.591 cv
cp
0 0 0 rgb
f
435.134 81.4201 mo
435.134 81.2854 435.136 81.1475 435.138 81.0074 cv
435.298 80.9612 435.458 80.9108 435.615 80.851 cv
437.984 79.9519 439.723 77.8552 442.045 75.7997 cv
443.097 78.3083 444.078 79.5138 446.692 79.2486 cv
449.307 78.9834 453.467 75.2058 454.06 72.5303 cv
454.996 75.1817 458.301 76.2883 461.082 75.3766 cv
464.892 74.1274 466.006 72.3298 467.527 69.7171 cv
468.358 72.3332 469.711 75.1191 472.568 77.1619 cv
473.614 77.9097 474.751 78.4195 475.917 78.7428 cv
475.958 79.2557 476.004 79.754 476.059 80.2292 cv
476.26 81.9883 476.717 85.8139 476.307 89.6827 cv
479.273 87.2212 481.729 87.6331 483.57 89.4975 cv
485.412 91.362 485.26 94.3043 483.458 96.1379 cv
481.656 97.9715 478.492 98.6663 475.712 98.0786 cv
474.989 102.762 473.914 112.143 470.66 116.289 cv
467.2 120.699 461.078 123.521 454.748 123.626 cv
448.418 123.73 442.047 121.114 438.188 116.826 cv
433.804 111.955 432.828 105.51 433.197 99.4693 cv
433.566 93.429 435.115 87.4739 435.134 81.4201 cv
cp
1 1 1 rgb
f
435.623 81.4218 mo
435.613 84.8735 435.104 88.3336 434.612 91.6798 cv
434.235 94.2408 433.845 96.8885 433.686 99.4992 cv
433.246 106.702 434.883 112.422 438.552 116.498 cv
442.255 120.614 448.292 123.139 454.377 123.139 cv
454.498 123.139 454.619 123.138 454.74 123.136 cv
460.942 123.034 466.895 120.294 470.275 115.987 cv
473.114 112.369 474.289 104.37 474.991 99.5906 cv
475.075 99.0192 475.153 98.4867 475.228 98.0039 cv
475.248 97.871 475.323 97.7521 475.433 97.6756 cv
475.544 97.5995 475.682 97.5717 475.813 97.5995 cv
478.548 98.1782 481.479 97.4522 483.109 95.7947 cv
484.785 94.0894 484.835 91.4742 483.222 89.8413 cv
481.327 87.9231 479.106 87.9964 476.62 90.0593 cv
476.467 90.1867 476.252 90.2084 476.076 90.1141 cv
475.901 90.0201 475.8 89.8292 475.821 89.6309 cv
476.215 85.901 475.79 82.1879 475.586 80.4036 cv
475.572 80.2847 li
475.533 79.9361 475.495 79.5594 475.457 79.1183 cv
474.295 78.7601 473.229 78.2365 472.283 77.5599 cv
469.53 75.5912 468.179 72.9754 467.408 70.8835 cv
466.138 72.9889 464.8 74.6724 461.234 75.8417 cv
458.453 76.7536 455.52 75.8275 454.135 73.7621 cv
452.843 76.4544 449.24 79.4823 446.742 79.7356 cv
444.096 80.0052 442.908 78.8605 441.869 76.6169 cv
441.48 76.9732 441.106 77.3289 440.74 77.6762 cv
439.157 79.1789 437.661 80.5983 435.789 81.3087 cv
435.736 81.3291 435.681 81.3488 435.624 81.3683 cv
435.624 81.3864 435.623 81.4043 435.623 81.4218 cv
435.623 81.4218 li
cp
454.379 124.118 mo
448.022 124.118 441.709 121.469 437.824 117.154 cv
433.973 112.874 432.252 106.914 432.709 99.4393 cv
432.871 96.7874 433.263 94.1184 433.643 91.5373 cv
434.13 88.2252 434.634 84.8002 434.644 81.4186 cv
434.644 81.4186 li
434.645 81.2819 434.646 81.142 434.648 81.0002 cv
434.652 80.7847 434.795 80.5967 435.003 80.5371 cv
435.15 80.4947 435.296 80.4485 435.441 80.3934 cv
437.13 79.7528 438.49 78.4612 440.066 76.9659 cv
440.592 76.4663 441.137 75.9497 441.72 75.4331 cv
441.838 75.3286 441.999 75.2875 442.154 75.3224 cv
442.307 75.3574 442.435 75.4647 442.496 75.6102 cv
443.49 77.9793 444.326 78.9956 446.643 78.7617 cv
449.077 78.5147 453.033 74.9019 453.582 72.4244 cv
453.629 72.211 453.812 72.0549 454.03 72.0416 cv
454.247 72.0279 454.449 72.1615 454.521 72.3672 cv
455.4 74.8577 458.545 75.6938 460.929 74.9114 cv
464.647 73.6925 465.677 71.9216 467.103 69.4709 cv
467.201 69.3036 467.387 69.2101 467.58 69.2305 cv
467.773 69.2517 467.934 69.3844 467.993 69.5689 cv
468.65 71.6351 469.868 74.6292 472.853 76.7638 cv
473.794 77.4369 474.869 77.9439 476.048 78.2712 cv
476.245 78.326 476.388 78.4985 476.405 78.7031 cv
476.452 79.2831 476.496 79.7503 476.545 80.1735 cv
476.559 80.2924 li
476.747 81.9378 477.119 85.1919 476.888 88.6382 cv
479.437 86.9453 481.905 87.1142 483.919 89.1535 cv
485.911 91.1712 485.862 94.3899 483.807 96.4812 cv
482.056 98.2627 479.02 99.1053 476.12 98.6511 cv
476.068 98.9925 476.016 99.3542 475.96 99.7331 cv
475.197 104.924 474.045 112.769 471.045 116.591 cv
467.487 121.125 461.246 124.008 454.757 124.115 cv
454.631 124.117 454.505 124.118 454.379 124.118 cv
cp
0 0 0 rgb
f
440.75 90.1857 mo
440.665 89.4412 441.234 88.7657 442.02 88.6769 cv
442.807 88.5881 443.512 89.1197 443.597 89.8642 cv
443.682 90.6087 443.113 91.2843 442.327 91.373 cv
441.541 91.4618 440.835 90.9302 440.75 90.1857 cv
cp
f
460.713 91.2626 mo
460.628 90.518 461.197 89.8425 461.983 89.7537 cv
462.769 89.665 463.475 90.1965 463.56 90.9411 cv
463.645 91.6856 463.076 92.3611 462.289 92.4499 cv
461.503 92.5387 460.797 92.0071 460.713 91.2626 cv
cp
f
454.776 114.674 mo
454.159 114.674 453.541 114.597 452.94 114.438 cv
452.679 114.369 452.523 114.102 452.592 113.84 cv
452.661 113.579 452.93 113.423 453.19 113.492 cv
455.538 114.112 458.175 113.291 459.752 111.449 cv
459.928 111.243 460.237 111.219 460.442 111.395 cv
460.648 111.571 460.671 111.88 460.496 112.086 cv
459.083 113.735 456.933 114.674 454.776 114.674 cv
cp
f
451.377 107.173 mo
450.429 107.173 449.419 106.983 448.364 106.605 cv
447.806 106.405 447.174 106.13 446.716 105.602 cv
446.13 104.928 445.922 103.931 446.146 102.868 cv
446.305 102.118 446.638 101.444 446.961 100.793 cv
447.107 100.498 li
448.826 96.9739 449.724 93.0387 449.704 89.1185 cv
449.703 88.8479 449.921 88.6277 450.191 88.6264 cv
450.192 88.6264 450.193 88.6264 450.194 88.6264 cv
450.463 88.6264 450.682 88.8441 450.683 89.1134 cv
450.704 93.1834 449.771 97.2687 447.986 100.927 cv
447.839 101.227 li
447.529 101.852 447.237 102.442 447.104 103.07 cv
446.946 103.819 447.077 104.526 447.455 104.96 cv
447.765 105.317 448.255 105.526 448.694 105.683 cv
449.978 106.143 451.171 106.293 452.238 106.13 cv
453.449 105.944 454.526 105.307 455.118 104.425 cv
455.269 104.201 455.573 104.141 455.797 104.292 cv
456.021 104.443 456.081 104.747 455.93 104.971 cv
455.178 106.092 453.886 106.867 452.386 107.097 cv
452.058 107.148 451.722 107.173 451.377 107.173 cv
cp
f
475.989 93.2513 mo
475.967 93.2513 475.946 93.25 475.924 93.2471 cv
475.656 93.2117 475.467 92.9657 475.503 92.6977 cv
475.72 91.0526 475.8 90.1743 475.947 88.5796 cv
475.972 88.3103 476.212 88.114 476.48 88.1369 cv
476.749 88.1618 476.947 88.4002 476.922 88.6695 cv
476.774 90.2763 476.693 91.1616 476.473 92.8258 cv
476.441 93.0722 476.231 93.2513 475.989 93.2513 cv
cp
f
430.011 77.3952 mo
429.969 77.3952 429.926 77.3786 429.894 77.3458 cv
428.539 75.9556 428.044 73.7865 428.661 71.9479 cv
428.69 71.8625 428.782 71.8168 428.868 71.8452 cv
428.953 71.8738 428.999 71.9664 428.971 72.0518 cv
428.391 73.7774 428.856 75.8133 430.128 77.1182 cv
430.191 77.1826 430.189 77.2858 430.125 77.3489 cv
430.093 77.3799 430.052 77.3952 430.011 77.3952 cv
cp
f
482.831 75.5278 mo
482.786 75.5278 482.741 75.5091 482.709 75.4727 cv
482.649 75.4051 482.656 75.302 482.723 75.2422 cv
485.002 73.2299 485.894 69.8197 484.892 66.9493 cv
484.862 66.8644 484.907 66.7713 484.992 66.7415 cv
485.076 66.712 485.17 66.7568 485.2 66.8419 cv
486.244 69.8341 485.315 73.3891 482.939 75.487 cv
482.908 75.5144 482.87 75.5278 482.831 75.5278 cv
cp
f
354.004 174.31 mo
348.017 160.544 341.001 135.21 333.902 121.753 cv
329.318 118.831 324.117 113.695 321.428 108.597 cv
320.333 106.522 320.163 105.618 321.319 103.817 cv
322.165 102.501 324.139 102.459 325.491 102.938 cv
324.646 101.665 323.054 100.683 324.478 98.9067 cv
325.119 98.1066 326.152 97.5383 327.113 97.8959 cv
326.066 95.1818 328.858 92.8605 331.189 95.1913 cv
329.116 92.0073 327.227 89.1601 325.159 86.2465 cv
323.878 84.4432 322.546 82.2447 323.617 81.1736 cv
324.99 79.8005 327.074 81.6717 329.558 84.6385 cv
333.796 89.6999 335.203 91.386 339.64 95.8237 cv
343.816 99.9996 348.269 108.367 346.532 112.166 cv
347.926 117.951 369.049 151.485 375.975 158.412 cv
378.504 160.94 376.44 163.376 375.846 166.902 cv
375.128 171.162 372.018 186.158 361.201 181.282 cv
358.136 179.9 354.362 175.133 354.004 174.31 cv
cp
1 1 1 rgb
f
323.861 103.148 mo
322.988 103.148 322.154 103.423 321.731 104.081 cv
320.699 105.689 320.822 106.399 321.861 108.368 cv
324.676 113.705 330.069 118.729 334.165 121.34 cv
334.237 121.385 334.295 121.449 334.335 121.524 cv
338.506 129.432 342.596 141.271 346.552 152.72 cv
349.342 160.794 351.977 168.421 354.453 174.115 cv
354.453 174.115 354.453 174.115 354.453 174.115 cv
354.776 174.857 358.467 179.512 361.402 180.836 cv
363.979 181.997 366.282 182.055 368.246 181.006 cv
372.765 178.595 374.645 171.084 375.363 166.821 cv
375.536 165.795 375.833 164.847 376.095 164.01 cv
376.758 161.894 377.236 160.365 375.629 158.758 cv
368.842 151.971 347.561 118.525 346.056 112.281 cv
346.03 112.174 346.041 112.062 346.087 111.963 cv
347.651 108.541 343.65 100.525 339.294 96.1698 cv
334.876 91.7512 333.466 90.0672 329.28 85.0692 cv
329.183 84.9526 li
327.858 83.3703 325.953 81.2602 324.717 81.2054 cv
324.43 81.1939 324.191 81.2927 323.964 81.5196 cv
323.051 82.4324 324.938 85.0899 325.558 85.9631 cv
327.748 89.0477 329.755 92.0928 331.599 94.9244 cv
331.736 95.1344 331.692 95.4139 331.497 95.5716 cv
331.302 95.7297 331.02 95.7141 330.843 95.5375 cv
329.996 94.6911 329.028 94.4881 328.252 94.9926 cv
327.584 95.427 327.086 96.4656 327.57 97.7196 cv
327.639 97.8994 327.596 98.103 327.461 98.24 cv
327.326 98.3768 327.123 98.4223 326.942 98.3548 cv
326.201 98.0788 325.362 98.5868 324.86 99.213 cv
324.026 100.253 324.426 100.831 325.266 101.845 cv
325.482 102.106 325.706 102.376 325.899 102.667 cv
326.016 102.842 326.007 103.072 325.877 103.239 cv
325.748 103.404 325.527 103.468 325.328 103.399 cv
324.874 103.238 324.361 103.148 323.861 103.148 cv
cp
365.233 182.735 mo
363.903 182.735 362.489 182.399 361 181.728 cv
357.783 180.277 353.96 175.436 353.555 174.505 cv
353.555 174.505 li
351.064 168.777 348.423 161.133 345.627 153.039 cv
341.702 141.68 337.645 129.937 333.529 122.095 cv
329.338 119.395 323.868 114.272 320.995 108.825 cv
319.82 106.597 319.642 105.523 320.908 103.552 cv
321.604 102.467 322.959 102.082 324.279 102.185 cv
323.546 101.273 322.856 100.147 324.096 98.6005 cv
324.752 97.7818 325.613 97.3197 326.446 97.2989 cv
326.244 96.0404 326.715 94.8243 327.718 94.172 cv
328.235 93.8361 328.93 93.6452 329.69 93.7914 cv
328.157 91.4554 326.516 89.0041 324.759 86.5298 cv
323.283 84.4506 321.952 82.1471 323.271 80.8274 cv
323.694 80.4042 324.193 80.2022 324.76 80.2274 cv
326.045 80.2841 327.544 81.4712 329.933 84.3241 cv
330.031 84.4408 li
334.195 89.4139 335.598 91.0893 339.987 95.4776 cv
344.05 99.5406 348.749 107.997 347.048 112.205 cv
348.682 118.035 369.267 151.011 376.322 158.066 cv
378.348 160.092 377.707 162.137 377.029 164.303 cv
376.764 165.149 376.49 166.024 376.329 166.983 cv
375.581 171.424 373.595 179.262 368.707 181.87 cv
367.627 182.447 366.466 182.735 365.233 182.735 cv
cp
0 0 0 rgb
f
329.144 110.905 mo
328.847 110.905 328.538 110.848 328.236 110.732 cv
327.596 110.487 327.086 110.04 326.637 109.646 cv
324.551 107.818 li
324.347 107.64 324.327 107.331 324.505 107.127 cv
324.683 106.924 324.993 106.903 325.196 107.082 cv
327.282 108.91 li
327.689 109.266 328.11 109.635 328.586 109.818 cv
329.035 109.99 329.503 109.953 329.778 109.725 cv
330.115 109.446 330.158 108.901 330.056 108.512 cv
329.919 107.992 329.564 107.529 329.212 107.1 cv
327.9 105.496 327.574 105.238 326.606 104.472 cv
326.244 104.186 325.793 103.83 325.177 103.313 cv
324.97 103.139 324.943 102.83 325.116 102.623 cv
325.29 102.416 325.599 102.389 325.806 102.562 cv
326.412 103.071 326.856 103.422 327.213 103.704 cv
328.215 104.497 328.59 104.794 329.97 106.479 cv
330.371 106.97 330.815 107.553 331.002 108.263 cv
331.228 109.12 330.992 109.99 330.403 110.478 cv
330.064 110.76 329.619 110.905 329.144 110.905 cv
cp
f
332.936 109.086 mo
332.47 109.086 332.001 108.932 331.576 108.76 cv
331.055 108.55 330.531 108.322 330.021 108.082 cv
329.776 107.967 329.671 107.675 329.786 107.431 cv
329.901 107.186 330.193 107.081 330.437 107.196 cv
330.931 107.428 331.437 107.648 331.942 107.852 cv
332.434 108.051 332.939 108.21 333.293 108.029 cv
333.737 107.802 333.837 107.079 333.708 106.481 cv
333.507 105.553 332.166 103.397 326.922 98.3905 cv
326.775 98.2496 li
326.579 98.0628 326.572 97.7528 326.759 97.5574 cv
326.946 97.3624 327.256 97.355 327.451 97.5421 cv
327.598 97.6823 li
332.013 101.898 334.325 104.707 334.664 106.273 cv
334.874 107.239 334.669 108.426 333.738 108.9 cv
333.478 109.033 333.207 109.086 332.936 109.086 cv
cp
f
336.718 112.656 mo
336.542 112.656 336.372 112.561 336.284 112.395 cv
335.029 110.018 336.086 107.587 336.857 105.812 cv
337.148 105.143 337.587 104.133 337.412 103.946 cv
336.835 103.329 334.349 103.121 333.155 103.021 cv
332.481 102.965 332.175 102.937 331.993 102.878 cv
330.66 102.442 330.103 101.73 329.871 101.21 cv
329.667 100.752 329.642 100.26 329.804 99.8931 cv
330.023 99.3972 330.874 98.3057 331.55 98.0813 cv
332.799 97.667 335.78 97.7588 338.475 97.877 cv
338.822 97.8923 339.123 97.9057 339.357 97.9134 cv
340.368 97.9465 343.337 99.024 343.686 100.214 cv
343.762 100.473 343.614 100.745 343.354 100.821 cv
343.094 100.897 342.823 100.749 342.747 100.489 cv
342.603 99.9989 340.3 98.9236 339.325 98.8918 cv
339.088 98.8841 338.784 98.8707 338.432 98.8551 cv
336.548 98.7726 333.041 98.6183 331.858 99.0106 cv
331.585 99.1011 330.881 99.8778 330.699 100.289 cv
330.676 100.341 330.643 100.537 330.766 100.811 cv
330.889 101.089 331.253 101.606 332.297 101.947 cv
332.397 101.975 332.843 102.013 333.237 102.046 cv
335.289 102.217 337.356 102.454 338.127 103.277 cv
338.741 103.934 338.306 104.935 337.755 106.202 cv
337.024 107.884 336.115 109.976 337.15 111.938 cv
337.276 112.177 337.185 112.473 336.946 112.599 cv
336.873 112.637 336.795 112.656 336.718 112.656 cv
cp
f
333.902 98.755 mo
333.733 98.755 333.569 98.6677 333.478 98.5109 cv
333.198 98.0278 332.321 97.0816 331.616 96.3212 cv
331.245 95.9212 330.895 95.5436 330.652 95.2571 cv
330.477 95.0509 330.503 94.7418 330.709 94.5671 cv
330.915 94.3922 331.224 94.4173 331.399 94.6235 cv
331.628 94.8938 331.971 95.2638 332.334 95.6558 cv
333.111 96.493 333.99 97.442 334.325 98.0201 cv
334.461 98.2541 334.381 98.5533 334.147 98.6891 cv
334.07 98.7337 333.986 98.755 333.902 98.755 cv
cp
f
334.853 107.388 mo
334.728 107.388 334.604 107.373 334.484 107.344 cv
334.221 107.279 334.061 107.014 334.126 106.751 cv
334.191 106.489 334.456 106.327 334.718 106.393 cv
334.981 106.458 335.412 106.32 335.69 105.937 cv
336.114 105.354 336.014 104.468 335.416 103.505 cv
335.274 103.275 335.345 102.973 335.574 102.83 cv
335.804 102.687 336.106 102.759 336.248 102.988 cv
337.41 104.862 336.799 106.077 336.482 106.513 cv
336.085 107.06 335.454 107.388 334.853 107.388 cv
cp
f
533.459 196.244 mo
529.694 176.457 529.666 155.216 513.726 141.911 cv
506.075 135.524 487.936 132.767 477.304 132.085 cv
476.652 142.379 466.589 144.828 460.148 144.415 cv
449.389 143.724 447.475 141.61 444.742 133.441 cv
442.328 134.403 427.798 135.133 418.361 143.563 cv
400.846 159.21 377.907 156.777 376.658 158.026 cv
374.921 159.764 379.194 174.95 363.75 182.102 cv
357.253 185.111 396.19 191.302 423.007 184.204 cv
422.002 198.238 430.212 237.103 433.121 252.863 cv
461.093 272.369 515.452 252.386 515.452 252.386 cv
515.452 252.386 511.053 239.437 511.053 229.67 cv
511.053 224.827 527.996 234.849 530.245 235.248 cv
530.992 235.381 532.688 234.769 532.987 234.071 cv
534.878 229.648 536.924 214.448 533.459 196.244 cv
cp
f
433.566 252.575 mo
447.883 262.439 469.262 261.766 484.703 259.455 cv
499.839 257.19 512.358 252.956 514.838 252.085 cv
514.063 249.686 510.564 238.371 510.564 229.67 cv
510.564 228.84 510.97 228.41 511.312 228.196 cv
513.361 226.912 519.155 229.529 525.953 232.817 cv
527.922 233.769 529.781 234.669 530.331 234.766 cv
530.931 234.87 532.356 234.301 532.537 233.879 cv
534.181 230.031 536.576 215.236 532.979 196.336 cv
532.979 196.336 li
532.27 192.611 531.685 188.781 531.119 185.078 cv
528.598 168.568 526.216 152.975 513.412 142.287 cv
506.422 136.452 489.954 133.438 477.754 132.605 cv
477.331 137.086 475.049 140.568 471.13 142.695 cv
466.797 145.048 461.985 145.023 460.116 144.903 cv
449.446 144.219 447.171 142.079 444.432 134.053 cv
443.803 134.223 442.871 134.391 441.687 134.604 cv
436.189 135.593 425.957 137.434 418.688 143.928 cv
404.92 156.227 387.744 157.463 380.409 157.991 cv
378.788 158.108 377.256 158.218 376.981 158.392 cv
376.706 158.671 376.637 160.114 376.57 161.51 cv
376.311 166.941 375.828 177.049 363.956 182.547 cv
363.578 182.722 363.518 182.846 363.517 182.847 cv
363.769 183.762 370.887 185.868 384.178 186.693 cv
398.339 187.573 412.446 186.493 422.881 183.731 cv
423.034 183.691 423.197 183.726 423.319 183.827 cv
423.441 183.928 423.506 184.081 423.495 184.239 cv
422.655 195.971 428.42 225.824 431.864 243.661 cv
432.53 247.109 433.107 250.098 433.566 252.575 cv
cp
466.459 261.876 mo
454.64 261.877 442.249 259.824 432.841 253.264 cv
432.736 253.19 432.663 253.078 432.64 252.951 cv
432.176 250.44 431.586 247.385 430.903 243.847 cv
427.294 225.158 421.875 197.094 422.478 184.847 cv
408.287 188.469 392.501 188.182 384.28 187.68 cv
374.094 187.059 363.376 185.303 362.599 183.15 cv
362.477 182.813 362.438 182.171 363.544 181.658 cv
374.878 176.409 375.343 166.687 375.592 161.464 cv
375.688 159.457 375.746 158.246 376.312 157.68 cv
376.699 157.293 377.587 157.212 380.339 157.014 cv
387.574 156.494 404.517 155.275 418.035 143.198 cv
425.511 136.519 435.921 134.646 441.513 133.64 cv
442.947 133.382 444.079 133.179 444.561 132.986 cv
444.686 132.936 444.826 132.941 444.948 132.997 cv
445.07 133.054 445.164 133.158 445.206 133.286 cv
447.889 141.304 449.591 143.247 460.179 143.926 cv
461.962 144.041 466.554 144.066 470.663 141.835 cv
474.465 139.771 476.535 136.48 476.815 132.054 cv
476.823 131.924 476.883 131.803 476.98 131.717 cv
477.078 131.631 477.207 131.588 477.335 131.596 cv
489.727 132.391 506.776 135.472 514.04 141.535 cv
527.128 152.46 529.649 168.967 532.087 184.93 cv
532.651 188.624 533.235 192.445 533.94 196.153 cv
533.94 196.153 li
537.258 213.586 535.601 229.2 533.437 234.264 cv
533.025 235.227 531.064 235.891 530.16 235.73 cv
529.509 235.615 528.05 234.919 525.527 233.698 cv
521.355 231.68 513.589 227.924 511.832 229.026 cv
511.697 229.11 511.543 229.26 511.543 229.67 cv
511.543 239.242 515.871 252.1 515.915 252.229 cv
516.001 252.48 515.87 252.754 515.62 252.846 cv
515.484 252.896 501.788 257.888 484.848 260.423 cv
479.286 261.256 472.959 261.876 466.459 261.876 cv
cp
f
504.595 214.023 mo
504.389 214.023 504.198 213.892 504.13 213.687 cv
498.421 196.4 495.192 185.465 495.192 161.764 cv
495.192 161.494 495.411 161.275 495.681 161.275 cv
495.952 161.275 496.171 161.494 496.171 161.764 cv
496.171 185.315 499.383 196.189 505.059 213.38 cv
505.144 213.637 505.005 213.913 504.748 213.998 cv
504.697 214.015 504.645 214.023 504.595 214.023 cv
cp
f
423.333 183.839 mo
423.333 183.84 423.333 183.84 423.333 183.84 cv
423.333 183.84 423.333 183.84 423.333 183.839 cv
cp
423.007 184.694 mo
422.89 184.694 422.774 184.652 422.68 184.569 cv
422.39 184.309 422.385 184.024 422.335 180.539 cv
422.298 177.945 422.235 173.605 421.991 167.01 cv
421.981 166.74 422.192 166.513 422.462 166.503 cv
422.731 166.486 422.959 166.704 422.969 166.974 cv
423.214 173.579 423.277 177.927 423.314 180.525 cv
423.341 182.395 423.359 183.654 423.425 183.95 cv
423.534 184.129 423.519 184.366 423.371 184.531 cv
423.275 184.639 423.141 184.694 423.007 184.694 cv
cp
f
453.145 175.032 mo
442.407 175.032 432.653 174.083 427.508 171.464 cv
427.428 171.423 427.396 171.325 427.437 171.245 cv
427.478 171.164 427.576 171.132 427.657 171.173 cv
438.276 176.579 468.777 174.811 486.687 172.303 cv
486.776 172.291 486.859 172.353 486.871 172.442 cv
486.884 172.531 486.822 172.614 486.733 172.626 cv
477.423 173.93 464.714 175.032 453.145 175.032 cv
cp
1 1 1 rgb
f
464.609 190.112 mo
450.353 190.112 437.318 187.843 427.544 185.454 cv
427.456 185.433 427.403 185.344 427.424 185.257 cv
427.445 185.169 427.533 185.116 427.621 185.137 cv
442.618 188.803 465.316 192.186 488.28 187.489 cv
488.368 187.471 488.455 187.528 488.473 187.616 cv
488.491 187.704 488.434 187.791 488.345 187.809 cv
480.295 189.456 472.274 190.112 464.609 190.112 cv
cp
f
534.714 218.771 mo
534.668 218.771 534.622 218.751 534.59 218.713 cv
527.714 210.62 516.507 206.544 506.038 208.331 cv
505.95 208.348 505.865 208.286 505.85 208.197 cv
505.834 208.109 505.894 208.024 505.983 208.009 cv
516.562 206.203 527.889 210.322 534.838 218.502 cv
534.897 218.571 534.888 218.674 534.819 218.732 cv
534.789 218.758 534.751 218.771 534.714 218.771 cv
cp
f
533.461 211.307 mo
533.441 211.307 533.42 211.303 533.4 211.295 cv
532.29 210.848 531.385 210.039 530.51 209.257 cv
530.204 208.984 529.888 208.701 529.569 208.44 cv
527.618 206.84 525.267 205.8 522.771 205.43 cv
522.682 205.417 522.621 205.334 522.634 205.245 cv
522.647 205.156 522.73 205.095 522.819 205.108 cv
525.373 205.486 527.779 206.551 529.776 208.188 cv
530.1 208.453 530.419 208.738 530.728 209.014 cv
531.582 209.777 532.465 210.566 533.522 210.992 cv
533.606 211.026 533.646 211.121 533.613 211.204 cv
533.587 211.268 533.526 211.307 533.461 211.307 cv
cp
f
379.091 173.154 mo
379.071 173.154 379.05 173.151 379.029 173.142 cv
378.946 173.108 378.906 173.013 378.94 172.93 cv
380.705 168.617 381.572 163.876 381.446 159.219 cv
381.444 159.128 381.515 159.053 381.605 159.051 cv
381.704 159.054 381.77 159.119 381.772 159.21 cv
381.899 163.913 381.025 168.7 379.242 173.053 cv
379.216 173.116 379.155 173.154 379.091 173.154 cv
cp
f
385.519 164.477 mo
385.507 164.477 385.495 164.476 385.483 164.473 cv
385.395 164.454 385.34 164.366 385.36 164.278 cv
385.736 162.62 385.842 160.922 385.673 159.23 cv
385.664 159.141 385.729 159.061 385.819 159.052 cv
385.91 159.044 385.989 159.108 385.998 159.198 cv
386.17 160.925 386.063 162.658 385.678 164.35 cv
385.661 164.426 385.593 164.477 385.519 164.477 cv
cp
f
506.01 215.049 mo
505.795 215.049 505.597 214.906 505.538 214.688 cv
501.674 200.48 499.037 185.874 497.699 171.275 cv
497.675 171.006 497.873 170.768 498.142 170.743 cv
498.408 170.718 498.65 170.916 498.674 171.186 cv
500.007 185.728 502.634 200.278 506.483 214.431 cv
506.554 214.692 506.4 214.961 506.139 215.032 cv
506.096 215.044 506.053 215.049 506.01 215.049 cv
cp
f
421.853 187.348 mo
421.851 187.348 421.848 187.348 421.846 187.348 cv
421.576 187.344 421.36 187.121 421.364 186.851 cv
421.61 170.709 li
421.614 170.441 421.832 170.227 422.099 170.227 cv
422.102 170.227 422.104 170.227 422.107 170.227 cv
422.377 170.231 422.593 170.453 422.589 170.724 cv
422.343 186.866 li
422.339 187.134 422.12 187.348 421.853 187.348 cv
cp
f
414.176 241.007 mo
399.972 168.352 li
455.712 157.455 li
469.916 230.11 li
414.176 241.007 li
cp
f
400.546 168.739 mo
414.562 240.433 li
469.342 229.724 li
455.325 158.029 li
400.546 168.739 li
cp
414.176 241.497 mo
414.079 241.497 413.984 241.468 413.902 241.413 cv
413.795 241.341 413.72 241.229 413.695 241.102 cv
399.491 168.446 li
399.466 168.319 399.493 168.186 399.566 168.079 cv
399.638 167.971 399.75 167.897 399.878 167.872 cv
455.618 156.975 li
455.883 156.92 456.14 157.096 456.192 157.361 cv
470.396 230.016 li
470.448 230.282 470.275 230.539 470.01 230.59 cv
414.27 241.488 li
414.238 241.494 414.207 241.497 414.176 241.497 cv
cp
0 0 0 rgb
f
440.344 322.81 mo
440.108 322.81 439.9 322.639 439.862 322.398 cv
436.779 303.097 435.927 283.25 435.103 264.057 cv
434.958 260.685 434.813 257.314 434.657 253.943 cv
434.644 253.673 434.853 253.444 435.123 253.432 cv
435.39 253.425 435.622 253.628 435.635 253.898 cv
435.791 257.269 435.936 260.642 436.081 264.015 cv
436.904 283.18 437.755 302.999 440.829 322.244 cv
440.871 322.511 440.689 322.762 440.422 322.804 cv
440.396 322.809 440.37 322.81 440.344 322.81 cv
cp
f
482.565 290.613 mo
482.374 290.613 482.192 290.501 482.114 290.314 cv
480.699 286.944 479.882 284.603 479.162 282.537 cv
478.439 280.466 477.86 278.807 476.925 276.843 cv
474.836 277.123 470.392 277.002 468.187 276.943 cv
467.617 276.928 li
467.347 276.921 467.133 276.696 467.14 276.426 cv
467.147 276.155 467.363 275.951 467.642 275.949 cv
468.213 275.964 li
470.526 276.027 475.34 276.157 477.117 275.822 cv
477.334 275.783 477.551 275.89 477.648 276.088 cv
478.702 278.249 479.313 279.999 480.086 282.214 cv
480.802 284.267 481.614 286.594 483.016 289.934 cv
483.121 290.184 483.004 290.471 482.755 290.575 cv
482.693 290.601 482.629 290.613 482.565 290.613 cv
cp
f
515.777 260.726 mo
515.569 260.726 515.376 260.592 515.31 260.383 cv
515.161 259.906 514.926 259.266 514.677 258.587 cv
514.008 256.77 513.177 254.508 513.112 253.049 cv
513.1 252.779 513.309 252.55 513.579 252.539 cv
513.845 252.51 514.078 252.736 514.09 253.006 cv
514.148 254.313 514.951 256.496 515.595 258.25 cv
515.849 258.939 516.088 259.59 516.245 260.09 cv
516.326 260.349 516.182 260.623 515.924 260.704 cv
515.875 260.719 515.826 260.726 515.777 260.726 cv
cp
f
524.382 216.105 mo
520.488 214.605 483.266 201.788 478.068 195.942 cv
474.748 192.208 465.269 184.709 462.559 184.305 cv
458.017 183.627 455.078 182.625 451.254 183.342 cv
448.061 183.94 442.311 186.719 442.491 187.841 cv
443.051 191.34 450.333 186.592 451.088 186.606 cv
453.723 186.657 456.361 186.829 459.347 188.803 cv
456.122 190.008 450.659 192.633 449.507 194.017 cv
448.296 195.474 445.955 201.718 445.791 202.744 cv
445.507 204.523 446.825 205.748 448.192 203.537 cv
448.266 203.417 451.216 199.436 452.041 197.26 cv
452.373 196.382 457.935 193.951 460.734 193.592 cv
457.729 193.594 452.804 195.89 452.015 197.285 cv
451.827 197.617 449.115 203.65 449.004 204.205 cv
448.539 206.525 450.677 206.63 451.807 205.008 cv
453.087 203.173 454.194 200.498 454.56 200.126 cv
456.562 198.093 459.282 197.972 461.435 197.536 cv
459.274 197.818 456.795 198.189 454.626 199.958 cv
454.239 200.273 450.9 205.402 452.545 206.846 cv
453.427 207.62 455.414 206.395 457.073 202.568 cv
458.709 202.272 459.718 202.345 461.128 202.223 cv
462.111 202.139 467.472 207.98 471.646 208.816 cv
472.483 208.983 487.39 226.04 508.184 236.387 cv
510.041 237.311 526.322 243.743 533.044 233.305 cv
534.693 230.744 536.115 220.626 524.382 216.105 cv
cp
1 1 1 rgb
f
451.079 187.096 mo
451.08 187.096 451.082 187.096 451.083 187.096 cv
451.082 187.096 451.08 187.096 451.079 187.096 cv
cp
461.148 201.733 mo
461.681 201.733 462.405 202.302 464.048 203.633 cv
466.112 205.306 469.232 207.833 471.742 208.336 cv
472.035 208.394 472.322 208.658 474.181 210.47 cv
479.03 215.194 491.912 227.743 508.402 235.949 cv
508.571 236.032 525.762 243.708 532.632 233.04 cv
533.482 231.721 534.181 228.336 533.074 224.944 cv
531.862 221.229 528.796 218.33 524.206 216.562 cv
523.689 216.363 522.566 215.958 521.011 215.397 cv
510.42 211.575 482.286 201.423 477.702 196.267 cv
474.285 192.423 464.924 185.153 462.487 184.789 cv
461.356 184.62 460.342 184.435 459.36 184.255 cv
456.441 183.722 454.134 183.299 451.344 183.823 cv
448.028 184.444 443.223 186.981 442.978 187.791 cv
443.06 188.256 443.275 188.417 443.431 188.498 cv
444.625 189.119 447.713 187.614 449.371 186.806 cv
450.415 186.298 450.801 186.117 451.085 186.117 cv
451.089 186.117 451.094 186.117 451.098 186.117 cv
453.853 186.171 456.577 186.385 459.617 188.395 cv
459.771 188.496 459.855 188.675 459.834 188.858 cv
459.813 189.041 459.691 189.197 459.519 189.261 cv
455.958 190.591 450.866 193.149 449.884 194.33 cv
448.763 195.677 446.437 201.799 446.274 202.821 cv
446.156 203.558 446.372 204.122 446.64 204.222 cv
446.862 204.306 447.302 204.046 447.776 203.279 cv
447.786 203.263 447.836 203.191 447.921 203.072 cv
449.471 200.913 450.398 199.426 450.952 198.41 cv
451.289 197.669 451.539 197.133 451.589 197.044 cv
452.468 195.49 457.526 193.104 460.734 193.102 cv
460.734 193.102 460.734 193.102 460.734 193.102 cv
460.992 193.102 461.206 193.302 461.223 193.56 cv
461.239 193.818 461.053 194.044 460.797 194.077 cv
457.906 194.449 452.869 196.799 452.491 197.449 cv
452.366 197.78 452.159 198.237 451.82 198.86 cv
450.972 200.736 449.57 203.93 449.483 204.304 cv
449.352 204.96 449.461 205.433 449.776 205.568 cv
450.162 205.733 450.896 205.459 451.406 204.729 cv
451.584 204.473 451.76 204.197 451.932 203.914 cv
452.581 201.952 453.989 199.845 454.316 199.579 cv
454.66 199.299 455.011 199.052 455.367 198.834 cv
455.988 198.426 456.643 198.134 457.306 197.914 cv
458.765 197.391 460.197 197.204 461.372 197.051 cv
461.632 197.016 461.875 197.196 461.918 197.456 cv
461.961 197.716 461.791 197.964 461.532 198.016 cv
461.165 198.09 460.782 198.156 460.389 198.223 cv
459.366 198.397 458.266 198.584 457.225 198.988 cv
456.843 199.142 456.468 199.322 456.1 199.534 cv
455.68 199.787 455.279 200.093 454.909 200.47 cv
454.801 200.589 454.479 201.223 454.196 201.781 cv
453.822 202.519 453.348 203.455 452.822 204.333 cv
452.666 204.827 452.572 205.298 452.583 205.7 cv
452.592 206.063 452.685 206.318 452.868 206.478 cv
452.908 206.513 453.033 206.621 453.323 206.556 cv
454.083 206.386 455.403 205.188 456.623 202.373 cv
456.689 202.223 456.824 202.115 456.985 202.086 cv
458.097 201.885 458.944 201.848 459.764 201.813 cv
460.183 201.795 460.616 201.776 461.086 201.736 cv
461.106 201.734 461.127 201.733 461.148 201.733 cv
cp
520.709 239.675 mo
515.238 239.675 509.961 237.818 507.966 236.825 cv
491.339 228.551 478.377 215.925 473.498 211.171 cv
472.55 210.248 471.727 209.446 471.489 209.283 cv
468.758 208.709 465.682 206.217 463.431 204.393 cv
462.505 203.643 461.457 202.793 461.141 202.714 cv
460.661 202.754 460.227 202.773 459.806 202.791 cv
459.051 202.824 458.335 202.855 457.414 203.006 cv
456.271 205.544 454.832 207.221 453.538 207.512 cv
453.036 207.624 452.569 207.518 452.222 207.213 cv
451.874 206.908 451.671 206.482 451.617 205.944 cv
450.923 206.538 450.072 206.758 449.392 206.469 cv
449.102 206.345 448.183 205.809 448.524 204.109 cv
448.537 204.042 448.578 203.918 448.64 203.751 cv
448.622 203.776 448.609 203.794 448.602 203.804 cv
447.608 205.412 446.66 205.274 446.299 205.139 cv
445.528 204.853 445.12 203.836 445.307 202.667 cv
445.487 201.542 447.863 195.228 449.131 193.704 cv
450.297 192.302 455.173 189.949 458.25 188.705 cv
455.771 187.311 453.532 187.144 451.105 187.096 cv
450.928 187.136 450.33 187.428 449.8 187.686 cv
447.733 188.693 444.611 190.214 442.979 189.367 cv
442.611 189.175 442.143 188.768 442.007 187.919 cv
441.724 186.148 448.513 183.357 451.164 182.861 cv
454.132 182.305 456.517 182.74 459.536 183.292 cv
460.51 183.471 461.517 183.654 462.631 183.821 cv
465.513 184.251 475.071 191.834 478.434 195.616 cv
482.853 200.587 511.823 211.04 521.343 214.476 cv
522.904 215.039 524.031 215.446 524.558 215.649 cv
524.558 215.649 524.558 215.649 524.558 215.649 cv
530.715 218.021 533.094 221.848 534.005 224.64 cv
535.279 228.545 534.344 232.19 533.455 233.57 cv
530.442 238.25 525.501 239.675 520.709 239.675 cv
cp
0 0 0 rgb
f
429.554 201.028 mo
429.171 198.627 431.275 196.295 434.253 195.821 cv
437.231 195.347 439.956 196.909 440.338 199.311 cv
440.721 201.712 438.617 204.044 435.639 204.518 cv
432.661 204.992 429.936 203.43 429.554 201.028 cv
cp
f
435.324 196.225 mo
434.996 196.225 434.664 196.251 434.33 196.305 cv
433 196.516 431.82 197.129 431.007 198.03 cv
430.22 198.902 429.876 199.939 430.037 200.951 cv
430.377 203.082 432.855 204.466 435.562 204.035 cv
436.892 203.823 438.072 203.21 438.885 202.309 cv
439.672 201.438 440.016 200.4 439.855 199.388 cv
439.694 198.375 439.044 197.496 438.026 196.912 cv
437.237 196.46 436.302 196.225 435.324 196.225 cv
cp
434.582 205.092 mo
431.807 205.092 429.445 203.455 429.07 201.106 cv
428.862 199.795 429.291 198.47 430.28 197.374 cv
431.242 196.308 432.626 195.585 434.177 195.338 cv
435.727 195.091 437.267 195.348 438.513 196.063 cv
439.793 196.797 440.613 197.923 440.822 199.234 cv
441.03 200.544 440.601 201.87 439.612 202.965 cv
438.65 204.031 437.266 204.755 435.716 205.001 cv
435.333 205.062 434.954 205.092 434.582 205.092 cv
cp
f
473.21 298.004 mo
472.944 298.004 472.726 297.791 472.72 297.524 cv
472.614 292.133 472.58 289.539 472.547 287.031 cv
472.514 284.525 472.48 281.933 472.373 276.545 cv
472.368 276.275 472.583 276.052 472.853 276.046 cv
472.856 276.046 472.86 276.046 472.863 276.046 cv
473.129 276.046 473.347 276.259 473.352 276.526 cv
473.459 281.917 473.493 284.511 473.526 287.019 cv
473.559 289.525 473.593 292.117 473.699 297.505 cv
473.705 297.775 473.49 297.999 473.22 298.004 cv
473.216 298.004 473.213 298.004 473.21 298.004 cv
cp
f
376.959 352.233 mo
376.959 352.233 369.516 349.073 406.262 306.934 cv
434.528 274.521 435.904 274.625 435.904 274.625 cv
435.387 264.154 li
435.387 264.154 400.167 298.245 385.334 318.666 cv
363.031 349.373 376.959 352.233 376.959 352.233 cv
cp
f
435.869 275.113 mo
435.87 275.113 435.87 275.113 435.871 275.113 cv
435.87 275.113 435.87 275.113 435.869 275.113 cv
cp
435.871 275.113 mo
435.898 275.115 435.922 275.115 435.944 275.113 cv
435.92 275.114 435.896 275.115 435.871 275.113 cv
cp
434.952 265.262 mo
429.692 270.401 399.15 300.477 385.73 318.954 cv
373.088 336.359 372.2 344.623 373.68 348.49 cv
374.247 349.971 375.164 350.799 375.9 351.251 cv
375.365 347.919 378.766 337.72 405.894 306.612 cv
420.501 289.861 427.789 281.962 431.33 278.285 cv
433.782 275.74 434.872 274.749 435.401 274.368 cv
434.952 265.262 li
cp
377.15 351.782 mo
377.15 351.782 li
377.15 351.782 li
cp
376.966 352.723 mo
376.931 352.723 376.895 352.719 376.861 352.712 cv
376.745 352.689 374.029 352.096 372.778 348.872 cv
371.192 344.782 372.013 336.172 384.938 318.379 cv
399.626 298.156 434.694 264.144 435.047 263.802 cv
435.185 263.669 435.388 263.629 435.567 263.699 cv
435.746 263.77 435.867 263.938 435.876 264.13 cv
436.393 274.601 li
436.4 274.741 436.346 274.878 436.245 274.975 cv
436.194 275.025 436.134 275.063 436.068 275.086 cv
435.705 275.299 432.287 277.836 406.631 307.256 cv
378.633 339.363 376.487 348.595 376.863 351.074 cv
376.939 351.571 377.118 351.747 377.167 351.787 cv
377.411 351.862 377.527 352.104 377.468 352.356 cv
377.415 352.579 377.193 352.723 376.966 352.723 cv
cp
f
531.382 190.502 mo
531.382 190.502 571.458 165.172 575.305 179.435 cv
571.175 173.327 532.88 200.538 532.88 200.538 cv
531.382 190.502 li
cp
f
531.914 190.747 mo
533.247 199.679 li
538.046 196.309 566.325 176.739 573.975 178.126 cv
574.079 178.145 574.179 178.167 574.275 178.193 cv
573.725 177.241 572.901 176.559 571.783 176.123 cv
562.078 172.337 534.924 188.882 531.914 190.747 cv
cp
532.88 201.027 mo
532.815 201.027 532.75 201.014 532.688 200.988 cv
532.532 200.921 532.421 200.778 532.396 200.61 cv
530.898 190.574 li
530.869 190.382 530.957 190.192 531.12 190.088 cv
532.354 189.308 561.45 171.043 572.139 175.21 cv
574.017 175.943 575.242 177.322 575.777 179.308 cv
575.839 179.539 575.726 179.781 575.508 179.881 cv
575.29 179.98 575.033 179.908 574.899 179.71 cv
574.681 179.387 574.321 179.184 573.801 179.089 cv
566.016 177.683 533.491 200.703 533.164 200.936 cv
533.079 200.996 532.98 201.027 532.88 201.027 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 26.3.1
%%For: ( ) ()
%%Title: (2206.w039.n003.266B.p1.266-temp_01.eps)
%%CreationDate: 6/17/2022 6:47 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2KKoCqkQ^97>pJ4?:giq1Ie/=I#FN/:cgm#+.p,pEndS<LV\J+fdh<BUGoNk*7D4li+MXQf!;Wij%9Ru*!@HDafDe.*;\
%J'Y$oe?!FgWBaZ:lbEIfR!;rj0"3HMYuEB":<L!<<jQ*`[p$=g[GG`EVfG!0[FBN]OId.an&s6rrNF^[[88u_GI"8q041]EoC_6;
%Tq1a0('C*jIee,EhP(MLft^[)`G2;MhP0bfV:?6*hVop^*riNEDRX>+1oeEO[T=5k-\El.^T!:Kjhj]kh(5o`p"JSC1sN1L1?_KD
%;32%4)>-As:!pl.;Yd!4WO?@rWGX6_fUbj3Mj`(,"-=;5jj?>Ns0Kq!ns]tq5kNs8_Z/G(B0Y@]ST7W2N3fq"KJ@:Wi)qL1dpq.F
%T[!rGa:qD_1u'[T1oc7QR2=8YF[i9@D9JZ'H@Lbie*:m>4&!n6b=`!qWj4bY\@^nb+-lD(o;Up76E/`s9:Ke,G:L@@$,Ik).gEZB
%WKs$WCR$eT8id<5p?VBL\LMB-?I)[\=Nt/ui+LPK\'R5g[tuj*eIG,G,K6EoFACBo5Kh;Pe7#krfdPHqlYh$BZ[Tpc6f02#S;[s6
%+JgjI8L_]b;k\6,Fn,iV7g&?tRdSQ>HA]`3Yr#\'K:C-.@APkHla\'6/G'@#Xu%Z*/pmG<.Zbb-G:)PL)b,>%XGI/KG.AB^U$TJJ
%HFG8*X7[Jh`pQ^eAA;0DJ;/4I`X"9!7H4$p;P@B`:MJ,^BT<!d/cKRmkZIJtEU_HKn1tLC1RF#mNe;g%#>Z?F:E;rsk4AM^]]OKQ
%k'?aHo?b_Qd*2+Pq5Dar7%5kuRumX=lX>T]@>JOjKV)qDbFr&kLKAOW4NZ^3-D/?-I,=Jiom@einp,LP-7r/^)9J9:'X(!P*J[tA
%5A186n.X&s=+m\<"&eoN2F%U6)>Aq,nhT^O:](Emn.T(6Z(u.XKqF;c4oc#(0WNK!Aq4JY%6r5eT*HoN-(_bG>%f@\_G>GWYSRFQ
%qD(,MT-k^4<RaG9TG_^e:NRlj.@A:7ZZ,\iB#$-)Bd&JK$lndN^B$XZ"8k!>#7*QA$om7E/>fY0&6EIo0dC#_a[_j8/Y,R4BTHal
%]SJIt]cb+SQ`8*JdW`'7dNn[A2F&tU;'<r`$g.!s38u<S$*OG$To6RBT4e<0l1KkU,=rO=aV_nZ&N`KV'Cd)=?<B[a+qg&PD2%gA
%5G>cL/B$Sj7gg!h-dtSlBRK&N3frOqa%TeB<B+46?3hf^jS=k@E``,!*I9l3hQEA;`9PKrE-`c3>u'J4]A+)lIWr1E>'F$MF,J&\
%YBNPN9fJM]1pV3SY:=,R+8fnRV)!O:>97qePs;E%^N]^C5P2P<!p]b8IsbUPn,=heJj=bqJp?q'r5iR4;>4GnZa_EuGQ3pmo_R"!
%J@bd'TB0Y[^&,#2Z/Ru;cXRFS;q>$!O+*:BJYVVp>b,6EK;s>ah;s#J)u*)%-2NNqfrXmiR.k[T+<(mAk69$)raL>udQ*p<=9.OU
%^8=>&ZFl\L/n]Tad3ACE3M4mK&+ea8J&^f!'e>+>0INthqFf/#ZASWbe<It^!d]8$s2fYq_Af_PGg2/DC!hTT1d0';@+5oUp[Ob;
%jiq.]4ce33^\`?,!FD(H1hhCVULjV_[se'?Pjt/`fheOm5W%$"[^dX?TVQ-u&.j?84O*2C]KlK$ftd6]6+g$UaQ#_RZJ-8C1s_DI
%nD_K%S;V]+#X=MEpWgn&RE:50/:tXXI4o^lga/tZ.B@BAi73p3(MXRkZu$lZ>oI2e>3-a+G2CP#3]Vi-9V,UI6%Xj+*3HWq,9GN[
%/TcLd?DLrGXG>ZK<Q&Gul7UgsO^.NVN)nM+?@%[`da+VVOBIg8fXr\E27/FV2Ns2K1u-&U5t1=&BMh.!LtNRhdRJ;0@"nXmmfa;-
%&-82\[a4:HEos[1^BePpq':);XUNsO8U40'H*[ug(PW0&D.OL1al6ZL"`rTl@`Vh+Sm#@CZWU1,4u!#VcXVfQP[P%k,_X7Ke>]>\
%O1s9.GF9&$RGX:>7:o9CGF*];'amQ53gQ1CH%@(gX%48PPi>7jnVj.%bt8?Fb-Z-tl-*6Qdo\C`BEW/Y&\Dj1"/&l6[;FPCQ>%Ck
%d>>h0`aKVA7W^"1huT59@31Vc84ItJ^D''ir.ZqOA:@u%FUuqhin:):,+54X4KLu=2_$D7<P[qE(>\-.R3>im"+#M9.3!BNN6b2n
%/ri%(20;FIduPVL+QemB<EC@l6M[8r/,;mVKpr<QDM[@\Sq(Yn7?bhQ&/R+598:af8BO^aF>gq9H$%WCXKD[n_-EWff7hUe(u5a_
%DNs(Bm7*i(D&DMck-c>k&YXp1F-/_D;AMah9"sd3rj)=/VXpmO3&EN-%AKiU3jLUTRETCR?Ppc!$eM5OJ..j_Ge%oiYTTA\Gf,OE
%Q9KC:9dXN()&b\DG-fC+.UK\?RT!aiZX"H8$$N"o'ZQ$APgOj%7/$^8Q[H67(;!1+7]*VC]II&oUs:'kGN"KO0cb'p,&t87mNQr\
%IaY^6r+mu)GJ"bsGh+b"E+\Zq?$`@hY5l59fR]\A%3koU4l[GL\4$9F2c:Q+M=>g6Z=t_;<h@-u=X>$QR=)2;fiC3VPQ\=2,kmFL
%2_G@n?L/Tq*aRAfb,@J,Hah=-hk_jVOh>faD>1UHEKe@JcQX:LFNM]BfbSSR+;'a=bP+PI]L7m@GM/i`AOMQHOei>]fHCiBL;.#n
%le:<"<Q;aA^+5BAjBBt_En@&;@0`2rBQc,Zp6q](FsXFZXrSZ$%EZ+Mr>A>a6\hi#ai6Fb)lp3`22YEi)]NN_]jYC+FjR^XM#$bU
%KhIGb\ELPn<OH[)Z$WRQHnsMiNQ?c9A2ACg]?7Cf#B)uk]3TPr+KNZ;;ffiTrbL!mFmi4-6,($9N\!N`f6&Z8A8AIoF<!W=aJ&ra
%YYR^51C"3ue&FS2l*K]MRgu:\75<,sd0q_-14%U=ZZ\Ed<<au<Y.>7$4f5kH5*;q/Rd/UJ@[?F5@a[a4bHDj((5EcUEp`Q=l#%%H
%F'[:6`/7i=dO\AA2A+,#SJnBUW`MH\0$JuS0bI]7NqG#I)_3EZq5U<U8CjLf\qVptQTAH_fKeLBSe?`*Sb4rGVCN38QM4]7mgD(@
%FT++e\\sW.q4(TthQYbV)2E->\Q2$(fR1on:QW#'`Tc?`B"_A41f(`un?\[+]@/HJD[,QFeEMZZ%4UN@rb"Ti"aaJ(%R"'2eiSlA
%g-P\Ps-_#qlMK\mRrYc>DcV=P9<$27DtM4pC5TK9;S11?Onta.j#3;lV(mBeL\Y\Y=\d(;HC',@r_;t_;Yd!B4R%#3d,iuBEjacf
%kucXcl#EcZCc)KPb)bcZ'K:n2^SF0AUI7IX2kX;H/XIqTYmX%5[*?m'Km*!"Xg6hV1g[Rd.l:$2Yf:o%L]tB>6Gmj@?'7BmKke#9
%fISk>.`KnHZdUs-mFLUR\GL?=a2@O5j%"@cnj/*P7gG;_WSC27F=QZuGF\M$"'_4nSYJLRi,6`/CTPKe%I]jC8@/r+E6'rlnkMLS
%DIU!JXn,#VLUUu^SK_"p]J97)`T%g)&<7sQWg7Fs<ntCdg?f^9.Bl53rcteVY?"gSh<FVu[L19&V-#><r+rda4j$UiOeq9L"LGF9
%g'D93_jr_:q+A&SNT.MDF)%:qHag_t;(n41F10aQr4ElXOIH%CUfo#<D"4H%/N(_)qSW@48#>?K8MA$nnY?$ri_9q^F$"6-eRAL<
%+,+H"SkgAkG<=(J%M>m8OE4XX$7F8HDQ-OP[WA/<)q2/IS*!]IW_)hV=l-a@<-or\*8%@ZGM;-o2l%hk/-_*\eYk=JX\Q8e87\G9
%#E4\.Z1QT1lk`jeI'`aa6OW^2OBA(=GehDNl9"A?\Hl7]f]%'&&nqdf]tS@hN1>;R<jg5pB!GY:0j(5tH[U-agM<S^^Zmq)KNd^\
%h3c@>WHXfMnqq[8="b0ph;B'H;S+*3=/fKDOM?X-4`EeAUi[+c'K7lW'Pe*iQYrEsMp!1T%!G<^:aVE<9jCEjUN5JcBV8B^l>aV0
%PRO+t.])i-[cb-(0c^bX"\=0dhh+>Wmi+Q$TRP)BI?j0a?FJQI.dX,;]!aFl<EgA$13H?Qoi,($NK^:hY,33bEdcbMTml0jap4o"
%;(-Y)U)l-!jRuS4lBTpKR/>d&q.%6G!p).ojb>FSF%<Lj.$bgkEhc`S'[)JF\PXo%B4ACSG't(JrQAZ\PsVD!WYB3+e]pm(EUdk4
%:%*U>Z[X\aDdsoV5]=$`V5<aD$D6,qCm`]+n$'b6Rg02#no\%'+'tA`5RhODn.mng%Kj,CV88YRA-,!fHE5?hI#0<IVmP&o8bkS$
%qci_cXhFEI;8jXoC_ipTDnV2pb9qm[]q7H'-UZqG+OTt,K;!d?Vbo'iWeDdX!EU8uQm>YU'P<8N-d?!g(ME%0gm4S_JaNo5%S,[C
%4>]lq^"Kqe?f"8u=="OQQ4];A^DliL\Md9kcLsD7"I%l4X4LPB_OnZJg\66g92KKXl80"Y`UZd/0ORo.fC,qt2T)cTO]YtL1uCO#
%q6$-i)=??eJBN(YE;k8(+G"f$^;r_@eoIFmJ)5i"3s3I<\Ifec.cSL$QghVqH![V[q5E3l1+Lm0pd8srP,POA;P1]O1@Dqt-o<IA
%UQ]^[M7a7pEVsHDk'FR`=N5;=BJQcT_u1f@DQ'(m@9AZQMY\[Nj,[)eJEZpAWSVk'PC'bgQkH*69.H<@m5n.^PRNBlhd+@,mOa`S
%PcHl9Ki7lQ)`sC,40*b[lcmE]DP+K-+qIX-A.fjpDAGj0c9U^&U)jR,)rH3U]":sbPlQSD'+(!Tpb%EX)Kh%hfWA"\8^:ZO],J9h
%b3LZ#r#7)go9@jd(Q6SqM+Yt'E$.<kTsnH3=:#aPphE4sP]2\D`;c5MnbWW?Xl1)j,W]`)jZSIPHWrTH.u=d$\sd%%XsQ\9YP7Lt
%RUE,CC>c-SEVK*OTlG]#kb:,(?D\Zd*G&J@3Dajb!0r]*q*tihJsEi'L*r*J1]53Df`^&$\YDKn<j(kTX*b6P5^/R?oK?U[[M/$'
%rB^A,p-!4=8%r*85g?IDpGp<+3k9&.[k6+oI^+"[bX^4XnS3aQj$<R8W5h3i_n0k873Z)IkfmpqPo.5_c9J<$$FS$u`Hgj#AF&LF
%,s#_j:Bn?pdbfS#X\etsnFIjseB`(#6?CK^-X@3C0MR'ml.T4?>b56i%,UMG&7;p4"#ZqJ_&Lf*9<hhf*3;Uf*=`pOK4_[l.mYf^
%TMhm%<9h$/!@(ODf+O`S-l+llSP(jPIg_t,?3cEiZcpOX"IPHH'mq%P5k0a/*&(D"0(eBs/Xk;r,;DI]qE#`PP1<1,>Y%[=?S#07
%lh,$0O^EuK\'M+'T0F(0%E[^=q['@Ln-8tc,+5,8!YVTQXi[ss\[u6kD:snJU',\5&u@Rf6l?K2Q"2%m068kJ7(HUfg#?;96qO2\
%L0ia*<[GoP)\6k".8#c8^IGUZ2eRaUpmAOd(8Z6lC/ODRl+'Hp.#C'T;(]p*.#ht=DVF01C/G3(Q!RdIE]7c2MKba0-'>AboOdet
%etUsi?(0bYfVM.bj$PI@UKs<3g84W>?"fNp'Dr.[)Ci-W$nIHRkBsWLs1h7^e/]5^<&l_Fh='6I]:ZZ-\,5Cm\.&8rIYmi8pb2Bb
%ea(c)K]T@(+(gJGV=Y7(r08Q%Ip9)S\ndYkhj,djm\l=:qKn'#@.0u$.S"gP[hm@0l*ZX[)sOcRoi_D?)<nQfdVC(WD0Y_W\QQ[$
%>rPYss+"9W`WD+3[G.V07c)iiX,XL?V-7`sX51Y`Op$IV_bp_YGNG`h(\VaH*,[#ks2-&W,;C)l0hSYo,;Cs,(kO9H;JO%V;G,D6
%.n+q(kVN1L5S$b:W7^nU?GWJ$>l8[OmbkZDpK'5q-hRj#4<!$_27gQfO54.hDSYt"](ku+?<*tiap428-->ilX`:nu?5fp5lfiN,
%W3mPRRHnUpDYd\BIq=;<TBrVtLV6+ADLM7jZ:2;]LI,lU'`1[uFZjHg>8QW'+]8<X/i(D%Pae5%7,g+^cF*CGLAl`'Kq'tf>:TY:
%/WeoOp[L[bqgN<@d+b3L"po7YBT)f_E,][tLOk?Xn_b_kHE-a@=dGPkS+$Vfk+O^b8Q=>2Rp`uY3pse'-o<IAUQ]^[M6.jp,Pgdi
%.saqg0KM.='2op'D8`R!hrX-([IA8+/mL7r]P$4.q?8?L8gghn=/Dhp#J@JY>RNRGs1NOQYQJ]G$OPF*[-'O)o,[5oNqRijHbQ7<
%hpJ%an"Ou0^5H^4kBhPCOO9Zg&8)etrLWJm.o?(FY#ak</K?[ljk9d@@X3N`;rt6tn=rmbQJ2elEbV6(/CZ:GpP^;piJ=/pa>__2
%,,e?A22\(+B.*WHW(h?'/`KP(;&D.tU[CSg[8\=0=_k5>`[.)V[C&;PFE6>AjeO]bgG@kB#L%!j!d)RbqJFRhHV^P@ZeD$]We5q!
%X1W%djpgl]8S2uJ,4mrp>FKe&DG>5E?jGC.SZC@Efa]iH38O7XZ'/ShC(q?W8&'c:l(7qNjV,Ye)>%"iolW?(X:j<;hs*$/aA3m;
%>5eF!Y.sSs8f=$"Oedq0reN@#UQj.SAMd!sND`6@P`]?38f<Ud7\c3q-tO*Lf,Y.`8#`](Pks*JP`'&tRmW;7\g&)fQD*Nu3fH`E
%h-EdU,fr9<F^>!Y6!iqdZXRSE*]/HTP[$&%5EYY$g\4FDi)"'Jrfi-ZL*Pj4dYT1XIj5m2Y+5k?>rFErRNT]u#K)#D7$?$]_g^9,
%&fcZ)ZAH3eV$#7?H`KuRd.+],7O<=C_seV0d3TGNj7m8Hj6.hei@p:9i?kG_`oP_'`Og3odkrB0O`;?Ya!%KM)NGc(Y+Ze([kHRU
%</9c4V2NjeD;'I[h7b_WIHbJM0dP?[N6^YuYn*9g)\2U&rBDSjRg02#nkI[B-2>?kdRAK^pPO"k*]S?i_;Vt4^O%sN5As*NLL+oL
%R@dmpRcRF6Ac,'+fI49*A*\:O;9lppAVOXZBbYk'J*=Fa<%-;s)Vt8e8)qllKJn_7mUh.7N?Yb$L$-H#[,;E^BM!.[7;/G%D%r\'
%,.(R`18>+l'VSgS,g*A=Y3(_=no#Kg]p(aU*X?LMPa_fH^FH(rT$0#3%N(U:V%Xt-:`jKB/lj_Q#3o_.hT+pD0h2''[l9B<n%,46
%as8qXGgNOa%!4eG^B*rl*P?RZY1u(&8T<.,]08bBd+a)U(gT*X+G<3#%UBaKrBdQTDjJ.^b-g4t0$rgrT`JisJ,=X]Ik&h%m54Q!
%<T;l)oQ1S3KjqYjh5FD<S?nFR#&'*mGmk=^ia%?rMDnOur_K`9Xk?EA'GD`H9##RUA:MW%GC4SfQ$2\l]M@@=+kl<aWe2mlmd#&3
%a<eC1VUdc\,X(p4YZUSlHF9=>pRPD\UoB,Tac11%)%8.L3PT`-2\_?'D&3hU+<5\4k22UU^!k@qql36C[TEP9h'jGr)EFe+dRd/0
%9f;K=DbB,N][W(13q?1\natWeHV&n9/Lc$<K$'/k]d,mPpe+r)meYd/pJm3I\PY1BgA;c,F-jmf$-pAJ_R\V5k7T?#.%D61F/*\l
%'[D]T\PY=F$Kl;&30tc(4ppKPA`;F+gr>HF3:j@qk:dmi**k)b^Vi%*CF*jdr^Re)%EGjhoue322JM0ur>:#R*=nFhb#dp%lS@Hb
%e'Jq=^7'+l^KN$,0;J_MD\S(op<WP&=jU4HkCC=6;*#[N.jk1;oV'kF$1[fb8C9+:2d:[T554MTZ'"^ia^F'$XtUdUUG'FE[XF"U
%;MDlIH0mPR_h1*E9&nf_@t2WmOBsL9Wgn/8S%aop*&'Q_K!SP?.fD9h9L2IP=%gu6P7ITkau/e`o/A'?ahLDgfHoU=KVXG@jOSPW
%#nAL*UiZ2I>E+2GEDC^@@-mkR8ot5(eVO(gA^9U[+aCT]It%'DDg%"l_8b/Vh$t:&"NIh!Bc[tGjaj2Whs\XU]<4):#>E[hRCc,;
%glD3UeKOGEmYDBqX`(JX21EoCpCn6RJS8V]s)->%jhZ7hBD_\k?(kpAJ&7C4g\8c<qA6!tYP6;u,7T,))LbY54Y4_C];u;OR%`Pu
%gAKNBTXOrC<WZ@]pnHf2^P@G_,<-*2`/b-ViHMDuZ<Cs\'e1$r?+84[,gXgJ^HkF81)H5Jr1;!>"37+^XL+$`b)%b2)B$SFg,LG<
%Y[KJN8IYO$)oj3`%(gLQDG3NCnXm:Kf*mI*[W,gsLMgI9(r"C8oNd*e\hZ3\Ir8p]m14Thi91N?.jfZpY4/u+?R^FMQeY'&CimiO
%H`":@>,'DG+e51OW7II("_r5:_m+i!S!2#BE8-Ve8m1;ko01-TX0LcI"6IJ"`uA"M6Z9A5kj?qIS,`N2'7N;haiE6.O7)5:\Bu<7
%(C8EJhiTX?(G<gs:#LL3r@JmSOGb#&3h+$1b]g#HIMasPYMn"?4h$!6i3hCQFlDlZ#gk6VoGLZ]%B2.34YaNJ>2_)^pSpjVh5eH\
%;#eFW3d#2Vm2M:jG%!UlRCs?G/3B+>CWZpt)0iHeYM3L7iF&sV&X*Z99>s\0W=bV*`+FoP2B*'oWS=2lrb*^;PCpKl6EPBLUR1H,
%[?1#$OY^?YNqNp:/G4"r[CI$R-MnoQ^hbrU:hQ$h\,_jmNTcuNX+,IZiZMs]j(GFCiO58+M#'(0*D$$EI0WXoFDf3E+O-oJn1@2Q
%O;Ruc6$cb=QO]L=,Y!4GYNNLQ?\1+s>ufJ4Eig%*)%shD5^OICg(qqmDZQ:anAXs,V:PP)^]2u#n?YBOD,i[iF-ESTeLoDHbGiHm
%Vfe5-0@U>aj^r86=X$"We\dV6bn[8/b+Z>NVWi!3?Cdj`S`8$WO6<B=))EF&U454R!4<3s#7N5RiA?lZ.\$II/H4Dqhr*Z>b-Poj
%]n<L5BG"UbXO[?NnSd?dWK4t."g[!WM'4g6q3^o".OU3j3GrB(2Xr"A_o.&n$@lsAO,OkZ[cOFNKC?CCM[rS@=dhPL:?X``U`A:C
%J1+W90B<Yt%9)`$kU*=rI.n;h]qA0Y#kf's-afQBpt89)r_!d2i?lpm-(5quGQAcXnoG'<oq6Ugc*du0Ek>TmjL4c5NUMV9XVdO(
%KoD"0&WAo,Q?'BOjuW0TRsJbUS%Pple,pWXIY"6l&,uHuXWm^Lm*6t"om2P*7\06)fNG#Ha`$_WW<7UZoCHM-?:@rqY?+GgJmL9c
%RIjCjfJtD4g.R,XEQZ5V>Qb$kiR^9\2R,a^i$&J'MN!5Z;`gO>K:L(bl7FVU95XYV2]L#!\]a9.[n5Pt"4Er)h!NYQFCDW..^rV8
%b<O7PQ;Qm'N(V'1g*sKmNRV.*G1[s<PhN,r3Xt[In&/1?Me5t,r[=[fbC@!"bG>OT;Q3^N;>6[5NfJl#;h\h1^KtT>;LFfLECdE@
%9%rpA=Z1FO60%pb`_>`5gU2ZlgY+f3\?]gE[m[doEhOrlf?9uW[L4ZB)jOdSkc*riX'Y23S"+o&[Sd?1Z:*dmWVImU2>`$U)@`rY
%W"uo*3I7NWfVN8,Nbe=IEP9gJP18NG\Y*enAl0\BTs\OFI,=3K47*7FG/aCH*l>:Hl>76(3&3h,W0C2^b-/_dmp4&lC%mdEd&U2^
%j]%]d.q)B)1%f$dfIq,JXB$5r'.ELfC$?-7_=M"'H<r%^5c4t>8tgBf&G5\PLr>u.8SIaNgI%%7["kjVW`+GTUt3[Qb12;q6+f0]
%jX/8g[js\c.n&I3[IQV1q<rJeQMaD0DBfk\CHQ0T)(3m[8DlJ>RdX4VOkd^F/r1M>oJDmc<m0S;7XnA#8q=KlNM?\gpmeik1eOoI
%qb_%oFSY$WqJs5^gd[tOaeiQ:!`Wo618e34aEV<:>)i@rei>1dN__55brD0]!p5onG1uUk(sW`40\%R.BXM'0P>8N)^4b6f4#FO=
%K]+3+3V6RX\(gS>?Ab>J7+WgLamG=ncO4S6jBB6!W5:]3EJ*KJ$X2#Tb0AJ5^:(`$G@;@CoXWF]7d?OUs5Vp]U\CIB*j/K.Us-9j
%ND?n3,uL$'cEfM+=H_=@Zr7p+qbP<+KIZr!r_lTF$B)KYE,K(5MtHgb&;fP16F28D\2"OThqDEKhVd'%`;?<#c*n&,ZZ(5(JU[p6
%hjO89@4FueZI[_[G$6/<$Wi(]e/Su'^FW6k^V)a$YU$Ad--($)`ui/2*C!6=WW.X5m9G'KiZDXK>.o+P^&YRAP/CA81')Lqjb`j4
%@pHNN@B]:fPDQS-ZneBH#E<D8ha>D@_k\'OV_J+O;Z*02g<CJI<jbi<>:,jpP!)Lalja?.\lS0N?9%UggIp/]d@O(05D!+4YJr0A
%?ISRElg?b2&^7DtlcO(BhbYbO%\ME"Cj>%geFc]8q<(S3KBEX4g#o:K\U_q:jm_PuL$PLXG(a;.fWBe@L-t^?Tr-Mu,!5`NfB&g`
%/sId"r%hCJigGT%o?>7M,jjOAVl+;4+uNB%2bW8\3?>!Z2X9]/k<0^.S\gHYHDfK":aDYjBtdWV>2:W/bJeWE4kMnHjX@5E2rDGQ
%O4Ojrkh3Y)e!\B1J)%%>C?8AG'CSgE5YpN'f;7>/Zd`f&U1A/BF_^:"Q@ChKa9co[\1ab/VWC+GSLIPXc%C=$(OTQ$i^kIh*nT.:
%jZ%mm0,X\mGre*l0(62mo(2X>nJQQ13!r5LQZPbC([JINj^q_[m?dItBP!9:a0sOO%-aaGX`>A&^RFG"n=E@*DHcg7e)hMTg#k;1
%RE[VgU7lnGSW^8NGtcXG4?:]Oap6R=k]N6)$QG]PR`DQ,_*OsOj#8;u?6o\u);3BH6&]0M*Rl;BrH!7b=j#6`'bZr+P1=4AD"_\s
%Sp&o7FA&Z3/Mo4I/n=9`1M3(F4dL]kfSdf-7ogK1kd8JXl^VM"<-5)=Ge[h)=t!^skMPS%RJfbTUsM*=*p4a#5GOerl)O)+c"W,[
%V-Uc.3%tf5DkSJ`\V)ANg\O4tdS>(,hLF4V0`EhbdE3%'2id1J?WZpPY7hPq8A)FmCu3eC&unRD[\!\h1Z_L)8b\+>^49[?kb-*O
%#uGEh)p,#)D1%qHMO@l07,\rf9<2?PIR6U/^JI,#RFaBQ7Pdt'+Y@`bA;b-s=5@+?PGH*FrH1De7t!O,KhnIcKhRcSXib(S=*:([
%;<ZM+VoQul\?.GlGC2W^01S2,=7[CMV%`FYW]cR8e.l9`nnMOBdWpJ,3e3Pdo]XDF?K_A/FDAcShUu4<9W]r14;E2!XPL@(I)a4:
%;Dkj;[IR`,IU./scTtJ,Y:KMNpf+B@Id8cT89V]'.!;\3AOm'GKNp0s.\2cpZA4?/8h]lhQZG@!eXd6K$b[c_l"=8V1J"lJDmu?]
%0>TtVl#G91=4i1LV:tTScUXS[7&8eAM&5JZc)HC8XioL$RT$7hXMl]<Sn98IK,f*9TcEBG`C+V+;5$s,Q7p^Ye6<G@0;1\*<f=!d
%r:<SddGR\QcafR?i$K6mFnJr!ZQPREdeGbJQ2"MCTL?;3k6cFu8eOD@f(p*'72DZ=7D@D^2\.S7+OO%.c`-N&=SS^h/]Xag>UP_]
%1Bo-<ISup$cBhH+5>t3LdS\6s6m&W+TRGoYIU#I:^1?f2"H!;@Ms\D2@UC6RNG:1WUeAp6ho$;iE^,eVAttZkSsg8+>E22_Qa_-3
%"jPgA.;W5TPD/uc6F>%3/1YAUZF9YQZ;`b+NlmeiFu?\U/<g^mU^FMm.D@n2c<m9mj+/ka3U'BeEVhVXRUqsD1m^B)`mB[_AL"84
%EhcgO>>UWce@9hLS:EaiHgWmCl+(eCap\1T8:Pf*2bf.c:1&ia5C%N0$)lTWM.KoICsZ5EmrEQOgcQu$:V2g`iMinUUJU9acgc,M
%V&alZ__n0,PhTAI\qmTR,Mc^;LiP:N(M<PC8QY#W0%S0B+Wb@n_olk32Zg*^UN`F]?JIX5%D=o3jG,\9rFr^_F[![(C_BhAfK-/l
%.(HHd(#6^c/]<h"YIIogpK),8oi-F?g\Hc9gJ'E%;pr(!]!t\0<deUaoIi7oS@@e7KlYX,)ejCTD7WXrS5TfCDY>t3QVDm5X]@NR
%$R.J!Rut]no)e9eQL]B"q;<P-&iJc;b,+rA2(9r#=fG\mV<koBq+&=!'!@'pk=MW0QM999b(#i1mM1.K4O[C!IPnQL=2`%*NOO6c
%YcYU>aFc#2GPVYI05nVX9bL`$7%&8\;Sc"*]6sjkMcWEm&4!UhHM(OV<iTDed#:HHD,sE_Od8SU#D1!6:Pnu1AE#W:[)ld>CaDE`
%S;@!oDt#FHH`>e8=!XiO<NfG\Qc0!Q4#Hn*URTFk2bP3#]L0MW\XfXCF;oj;4sQD,AFd$_\.b47S79dERch7D#74r^Dk3pOVKS$A
%\Ot79VV4Q%Pk"ZMKJ60cZr2AoQ#!@"i<L.!:eO+79hPQ+kWP_";M>l-b!@s)/j<X)8\K"]a7Q\an+Ci$Zee82aD@^<[8\%18u#c4
%dck1k]X^X/hFmMigP73r3:<G/PYSXPkbqTY<S.O-UoFTDmjCk^csdYuaN9DW%boBa=)1I!%dS9b,Fe3o)ETeAqE]<lPuan`42ui]
%bQV1aLF%l'8gC&)D3<SWg>/X9X=8uqT:fMp%<G^Whk#_#/sH`I/p7GBYKh9\,CW]%X=tmK+F,-B8"GkB>+nhgU3F$k*slb,qeB`g
%HfM-d.2S"bqWujGD55Qc4cHp&4IdoYjIfR#p1nOB]I_,-#(./Rbj9fW`td)tG];gq`R(ATb__hTVu9AY#C8""gXRipoi\,4'1g_7
%-[)?PF<L[foI;K?`96P]?a/0q,.M^':1=Fh%=ro5IR7r,?hNQ$O3_ncT'Q&Q]m)rKQ*93qg-(7$Mm@KZ`a4[>^X`-%&af1?cJR6f
%%,!G3]9c85?!JS8QheAOdEh!9l_2"?e[G7,Dg#WGbEYm'.OEV.I4?pTCtA=gmBsgWEq>gn7K9D[:K/\2EbT.HAo,R!9<YMG(Cm%t
%0^?%cm*u_CTlNu?1mX3Z2,de_(!1-ZOetcX]E$j'pF2]3VP8<VEPRtrS39Xd.'BPXg6lE`;`gQ:>cf$EE5&qC>n@7u#e&V3d1k3u
%n/V0N(-FX!!&8Au;_7Qc)cKrkq48gtL9U3"7$%&ucq>Zk^HFOZHeliD$`DB%+6(h<6^?ChGcL,%gm6;GeU%XEYnBnd]9?H)%J191
%YJ_5"9Vg/%j\E>Y@W=("rlGgdBl<Nf\<&@;1`nC=*3>4)3=?ejFRuW"SogTC5F^PXeda5+ohW>Sc1dd(r8c"(j4CJAl1FW"V0)RM
%rNUHjlGXT_)sF]kc!T9k1ecVPepOm*kek(\Ibi9FT+A!p@H&%#(^j@[T9WJg7[$>UTV&pnr-b"tgqV1M/q5IU^;-o[r9L'j/3LnT
%S'lQU6ZF0^(AZQunB,IlLT*"Mr[8_%I64)tduX%b/e,.-5EgLd^H=c^Z0dg5isgc-4l!j=bIL5\G7MCY<:s.$HaZ?bAedPTkK;'<
%q"6LnSR)6kjSKWT'^/&c([\!r-N>RJKJYV`T6)%5EsJ<Zs7/?uNMGV6?#)"kBW73?3,;;33/_ja>M7j$XbluHiWG\64nX)Gs5*[o
%V1\Zk-^J(^S1dPnVPcf;o*W]Pa4!QPd]0Wk0AZLbDgd&/[X\7ECtreio=Pm)6Z72Br<I[04hE[tFRirh=qc3&s6r?b$""dA-%'\0
%6%D*omkoq_j("bTbT6lV3l,/7WqTkL+o$%'C-4D8-/..L-`c"X$2_q'Mm%;q#0s-+N*9A3s'\"$?$\QB\3)_<nr0G$LYokj/3Q"B
%]KB>HpL%S&PP94iGeWh>g%Y6+`?(')G.S'06dIn@-qtb4c^rVs48DDBeP4A:=aZF64FTIYZb4#LSpc)loOjKAnf+0AY>bAlC[Uu:
%bOj#BG1/BLWkFeGmQ>ktb>f$F\7`ZCq=Gq"dDAh3q85LIn_*i[\)Y#c#;`N4nkm(a24sPqe^j?:jaHH'-i<K5p]7M[\!b4gnC>RU
%e^E`2l>Em'XQh?;ou+T5ca=7QCpUXOAradT&<sG$050^[H?Q3M5+5VZ[LZEEW]<04/9cS.)pDp6Q4@Lk3D5:rlVC8/XBEqXbfmiM
%j3qa$4[)q08WT..InQ]+hR^Y<c!3=.oL0]T*A\']rS[9LH@"W-p[j+6n,Y>WX=c@bdQ@+>^Q%ESl@JWOHTPH&H.JEJ%.IpG9V.hL
%O%k(p:QI_Fg.:,-BD0df5"Y;*j%Tt3\3Fo6Uo0eb5Gk?FGO"Dt0,HD.R9*mVl%a2k]LgFu>5ji5m*AG)k70#'e(2XlX0cX;jg6i#
%^6a"(YJ%<7I.SWM4WOKbp=3J**B[PMdUD!\St:G&rfUS9o$oJZa-1H?oTLXU2UbIZ4?cG'X/VNZir"G*FRJ2a?@$n&GqY`GqYi&E
%I%p-[]t2l6:VWFeACG=JM7rQ$e!]ImetfdDI^PfMUj#kkh=PLKh<X^&cF:(N]DBG,oS:-#7i:C;]@VN.bH'p+o[dCI0YRKuHRE*F
%f=7/2-p:^++4Ubdo^SaM4FK!brd25jR9<+20>@CVDEkM#O/5ncS[%_)iqh<giqVTeeBtn[@l(Znf%=eSip2u>?<A%ceG9I\1T%q3
%^DI>:mSAfobh#%<4h4pE2"n$HrqfgcBR=ACs5g(=[eb9W3k"bHq<$=AC#'faY.goq]l(U<*ID^%8"[*;Z*D!5o\S7"#n;<eY\K5!
%?;h(Vj,MApNNHS'_mJmIp;Y-rReOfLh5<d'e!9m@j0Li(o5Wm)&'":<1G^)B'O'OX^+LCa5MQ22@=2eL`THse*@j@gp@e:Opsu?E
%meH4Za0Xgpa/ABeIh!E-j+XU%F1cn1F#*a>IeetX)6[o?NlG:efu&/HRnjR_h1(eR]JoFnjli;DnFG<sSUQ!-0Dr3OrSEa)NV'p>
%P.H/3\W`St[m'CahqNV4H@50uAq&juVn"`jpBpNP+7C5O^HB)Or3b(cf4_?u-IN9ma#)#YjL^DZM4)Zf:D7K<:n-t.fpR[e)j=&E
%(9N4[M3Xi;7hb2A+&>]!pmGb.n&O/N-GEH?^JC*.<P40,HXF6/)@+6Fa`ON?:>S2f]pd/=Shqd"Ir&P6IS5*ZHre?ad4gb7hOBjq
%lgKjLPIm"h+&@?1[B`#"YU])%@9J)MX=_-19Qk$GhqjuA]q)i$>Fp1chgP)VF+<0!_Pd9h0C/')e]jZ5rN/jkT&+s$R;1OWdQ(LG
%J)J#4\UUon\p(o;r9Pl>iVb-bdo2ZenD0<FHLk'r^BO#(jo!!-WHHXO;nKH.af/(.$H9!mMoOIMFj]cWg5@W)VXH1(MplaXRB:1Q
%D=,I;dk@iIoZHp)f(<#*\2=0P7IKR8f6[;TFQLUsL7/$I%J5:0V=-2N16Wg#+*aEE^-?l=gc^,UgppL8n7o78GjrFRrpjI3>57aJ
%\FTIUK6D\3j37/fiTD(?W:.t^4<N=M=o)kRb\TCHWm87_J(L2>N3t!E^9%X.RJ,:A:W#;bg)FCHB]iGU*^6$pIsec]b#]X%(0ff0
%hgaL'*YuLOb7@DBO5J6CeTR!dB.':pbkgq;g"G`3pU@I^WsA=N2u8^oqt8Fmp"ABLp<d^>n:R!o=o>e$nL""2R:f#!%$Pu4B'O6q
%c.\q>RDR/!cSO)f[HcQ"$g5pmm.U/P>Yl?jF1KTf06<WSD.i:SlPEpjL`Q0DpT6+Gf$m[mOla4s5IR0K6Jd%9hAWl[*%nq4p0Ti6
%WmSUs@WcFFL/D\qH;6W[R6FNL"`%DWY5>Z]=1PoB4l:Qq:OK?VD>Wl%)>d!R\SAn'I<fbGH]VC89B@2Ork::>hjIg)WB$P3rRK$S
%YHOKKJ+86a3P>+1q6kG`\79G9/K2X"CZf<ba,g-ipVm#t1&'LVHYp7ira*cb3VQ^'k4h5HLN!,G]opQ5kgsmFe%.McB^+sr+8F]F
%#E)Bk5^e(KjVR*']\VtG4`A(r<V=(]mjJ&=T3T\QVb;;;\<S^#ht_2^fZ/H?=b#A=8h`0hRr<pLc_!.JQaoODq!_g&,H/8&p+79A
%HtJ.Wq;kYe3;KE`^03^H'RhXk,KUH;4e.!uH2hW.5!P>[p%<E<rdFU@0jiU^]L9Xggj<2+0=\QXr5-n1rRSjRdc\#ldb>T4(YT&Y
%m3?C]>X*P#qc8!LF];Uo<!YZ^5PfiuiToOWVse\fT0+Mr5Mde.'d)nX\bGZ7j+VZJ4C!0bI.DMrs7;G6QOd,hm!Vt@$Tr-&)O!s0
%B62*hT56>K5M^.WD*9K3+"f]n2@AEL\]pDMB3F-&s(l=_,5nTbEnna5^O/5j3e`W[luM@h@J9*IgOnk%qh:faqi?cP/V^Gi-]9Vs
%<cdfSil_%*UKO+\@<.cq#>QmeY<C"p[+d6S#Q$#iQL;HPPa;6lNRlO9btMa6o@p&,;WI*>cLTcOPKNH*n6gS<oqunT\an\>IK'6#
%DlrrSgejHr-m-4Lmr,X=/*Zloa")Hopp.1d]n'Tm5#2mE=2*!S2kO=5bM;]cXlf0FG=ThPStA-D*j.]^IJID24$EOZp%?@7DY75D
%dX3e*Yr>uO.?Dfff\&Far8Qp7q8pgZc&\unO$A#;o9,ikOHaCS]f$T^hlf3"ZZ0^2g<TZ`K=.I5+2=pRX7VnS-^D[+qX3[,^&Dkg
%+h]Vj+!,90^#b:oDtWnF`lXuO9:M@Br5.UE(X(\537`Abq0i)6rg%t3(uJMFqPgg/fDa3IQ2Z0XGnoE+A$7f.W<jL*e\R2']fe6^
%ASjYS^A6N%K"7f6-QB6rm*(_B?gk)?D=?q@fplsHVT1mFlit't+73sj:MoM@[L`(=5:F5`J%bXIjo"ET43q6HDXK+s^X6C0X#K?7
%:Y+DC9J1gA42&/adP,UGLBk$?IL%:?hDPn9/ALeJJ,].ZF(T1Gh;RmMnbp\`HiEo=c`d*#J,X*d+4>kc_2%i][AP*i+3rJ&S1II>
%I8gHR#9R;6LL362^?e)[2#XqOrfinNI/*>J^[^B+qK$83LAAKd0u*baorFXkch6+os2?R7j'O^n*tH"ar!0G"19Y%<n#]>6J$8Y8
%B]eWf]A!(LX/Y-_?TtoVKmTltT*eAd]m3iWn8)m<cro1N[D/rZ[C-%3oO_mRq-\]a(i6S:cnNG0QMO^b^K`@T]SD:"9!=+QZZPd#
%j)it&@Hm@6it%(0C2RJW^j5pmGd.#;?0C/@i0eZMfZrd@k0E&EiGkoi5&su[(65ic:>QsjO.4COqe:AMo'5oGa%C2Y%?B[3Dl^DE
%D<KBlag]:KlJpoDZ<B;<Z]t-D>Mg?QlD*HB61oXrPu#EVSNJoXp1WXMjGTRY;7f%-hQJNg=.a6H3U:\`Tq?&N?T`PherTNs4DNO"
%k'1BOBCBW25*LF]_gE!/51/9FXqo$GBdZhs50J>&e(f<.YI(/S%`86mdLFdRM/8OR8=0_IcfP:TDTFn^2;86dG=.A2IsWf(j1LH.
%\#7ICI/)r].:i`5^</+*!F=I[msh4E285&qXi?KG[b3k5>i=qu-&T.-ocCLV>c^)'r]723_*n$:+WoSMq!Ke/,29Wg%`6/N#ND7.
%T3sfJ6iOG>?*;;epd=]?i'M6T"/ZEjq0A]Z]21TUq_AAkf.'#-4%FuoH%,a<TiS1ZRi@]aFIQI9rBMRf<$u\KoCKM=ZW:rf75@*2
%U)_@ADf(u%9'&5!oKMrY@r)rRPtpZ>8$Sf$N(M0^C:m`Ni)&+-:''H<mDOYL'&\(l357>*IB>6*h\ma8>Q#iHh5.APVq+Vh%9KD(
%<GA#'Cq18SW7O:glCo*;f_'T87CQE^,>$-a(U\SG]*m>6O2.`,DgUb;YFO;CDHc[sn5AUR3,)[f\6jZ,UAlfB?5^rW?(Z%%Fa_k_
%pbl!q[ldNhRD;[[&#]gd-a[$a.8OS=fCDkHG3DbD5ChloStC!S7hITI1UcDU.HS/ZgN+Bc*!4dr$>9E8#6;=,aUM-:HC*LX4Pp@m
%bP3uD,&1XN?RZj\#6EZjBs`EIFY#%Q#@T%L"uLNBNM'T)%$a0h'g:-tSYKl.O?R)&3cKJR$8],#bI]Uo+KukOC%f9;;p'/:JKMBW
%LhDFkh-#,`Qg!A,=mVFN8d@L1^UTX_P',N^pDs2gMt3N^SI8bL$%+ttqmO=;3M,@Zn3)*<%sjnkf,<t$[br0\^1L9Q3ckKm95QI6
%I$Ls'`<6N'JSgN<on&,3RP8;9h[9_NA[KlZ*J]r>H=8S?);hbERX#5LC$>`]JS'@#Be*RH.Tp:+UE;HN0(iml=q6-f)-:O5a&SfL
%#Uel`,nS>H[Y0i$0kI:pc8:@:6&:r1^]eaH(i2MnbBXkh4of2\/Zmf)l%j1-f5R7TW'_<Re=5R@r*7RF@;/>/5`<L8\[2XiX#-+T
%]%A.%U;=2`Re9SXbS'$)CK,$t>!QHaZ!<_<YFhA*BeDPFE2[q:2[hGu-cKkoP`'5gdLHSK=T[2uU7$>9=Zp2(5@\ticR\HgJLt[(
%CZ;Ij9SI#mY_`!E^mJY%<g9?]`\5]U*AepNbF:m\c]L/#<<=KMc&uU.(rQo7!f=&FBLeph>Tc-B6:uJkM*W[e_kCM3Pa2IqIH,<k
%$F3GMRZaf4EOD]]+c=NdU'ZQXLU*KsIL`EI^h#hE2-i^/NK5fA6Xo-hQhs1.+:*:MIV*S1jW;)6mseZ%B84U$^!tPRlJ:3t7U:na
%_/%6"'5/.;(D>^70+_+b;/6@Cnb*&l)3>jC$pqE3Yr#=:E<Q0%eArPA=q,G:VaWpP`hCrb;SF_*gC9*4fs-&pFU$u6#G_OELS##P
%?m\CB.4^4o<MEs)$qWQlJ7`9F;*,^*66P&V/"e#h<:m1KLsWA$.*QEV)4&2B$crNj"[k^\SrWTtnU,tk(OE`iQKnaP?/YSgngr1@
%R(J6d_/a)/KVT",-P/kV!RYgLK*'(JK^t)i+msAM^tObBgL_a#dc*9go)c3Eg.@-;H+n7.j(gG%CJiZ.`2pV3`+W6fK$Yke@SS&?
%#WH4-)dt$sj98/K<l!0/"_QF[AAj5F_6?PdXsd;=L`6pU`(:VsdY\F/!Z2(F=eQT^Hmi)$3OY4W$GZe)Oi)]LJdk*3a\5#P,_H0U
%(eP/O_7WBp,nMJ-?>8WXY%^G8dUSB>4b7iYUnh]26K80pn;9)%k_;Ps]DNj=PVu]tLg^K6W25J/=3QU+ncC`]*9`$V/<M*788!0%
%TNBf'&5Xf%3eDL3["DrZiNYd=f7>Z0&6`q?+[Q]/'Pm(B9h;WR[S\<W=rThB_.,2nTp535o%iuEN!<Jq+%R0kFbT+VHrX\_M*jkT
%$Cgj_-RtXsP51;H3lMHRpVT65=d*0O(g5Tg,\Ngq<!c-i7QR%cO8A?O,@nM-9fX>s(PG9V5gY5*Cu)"tcKI2aV\c;[hbp-kWAe[[
%$j(Q\JBA215aH7FaTA_7!?&_+e(E1Y[MM?8.`W.[<jjAb&\:G0Ls/=d4Ru*p(_>pf:Q]W('f".*5fk=2m'nr@LTFPWE^Q-Aa<e/@
%J]PcTnHuPhiccDEQI>AL2AjA1nuaAnnr08tf\Z[n1q$nk%1ubWW9$NOPGU$+Y(no%XaZuSIbEAY%`EjiAkLX6GWcIX&!TB62\!GS
%'Su;gJ:.,_3Kd/M5o#k.;Q$455s"&a'nDMrAeYbedAX`'C^V7098:iZnT?G.qEgBFLW54)Q6R0tG/U[!-rM3BbK:YO$CjKpG`bQA
%-d!+Ii.jeG1qLq#C-]_"-B+=-9q[gGba_8e`+0!*9k#lKU?BKgp3L]J9DBn3m"niJcX>fsPL'pI]5X?5$oh(C]ki8J;J:(f=HHgL
%'Ii[A-6;HYno/$26BOZq0Z7EK,S`r%KrX(f*29tS<T-7tYTMfMU]TSM")>/YgMd<e02Pb=%MS/PS"i`/aPr?N!YDn4^2\B(C5Z@@
%W!=RKdW"RjU]]6p!r3h<!9=e(aLfBA<Y5!22?q68Hu0LG]Rk>pgG'i1+Xb.Yo&05*DPnAf`ad:6$PO9ol@C+QMh%sC]J>)m%U;EK
%`=6C)Q3SLmX::SI%4W$L$ValN'8FSZ&=ch>Z4TaWOp,<E?*\CQ>Zb/WoX'-2[ju^;bPi8Ch9\Si5r6"1@6KW#aBJBZM)kq.*'k>`
%K^BZj=JQF/6n(sK]*_g$E:?;^eeX&`7pk>9QrZU_9UN&ng#l3bH%8S1RZN3;$Bm:Lp7^tC!O=Y^4nuc(KE>TeM5-p"j;XCMm%mB;
%EgT"-LG4c4<bMjd[+OD;Uq*#2]Lo1FqOH_AmYBf'#6hD8/S-.4o*&'^Bhk>RLEn;@Ce%;J.q.*lDQ"8%Lt>W;a=If]r49?\X[E_H
%L,mpQ=,=DoB,6761Q+W#SO*B&H%@X*&a<OPEpQ-'EXk^Hhs6_Efjo@JANLJ<i;eFFV1Kc5E)p$Kgt_E*S0=XBTP%a%8B)'F#aE9E
%5nIo17NZm]8I=HkAp4Iq>LHR_geoX6naoqj>n3p'#tU"kADpea\i=lRE]\4M=WP%@']sRj8qMd_jO1UD"J#Qii:r&_a[$\(lfom2
%6VuBSd1E0S)kLLD&atI7*O2"j''dp;`O2EHL+XZI#8oOFKF!P;/eL@/UEakP>mn@i1gMMOEPU5.<%M?6NL7lsbX->o$jpGjYhA<^
%:uN1]9(0A;k&GUJ*JGZtiHkX6_:[gn'@Ad1E++ju0"L?rDK(R&j#i*T>Seo%8=&D^VU'E-65^mi5siJ3KmFO*=+1k$.,ebTI=-)N
%Jmp6<iNT!A+n[+CT#W=AI1e-sf0e\X);J^"YLoXJjIi>2iWuegScl=>oN8AlE\.bUOXg$tiX'.LX>']qi@g@YO9=kVaE#Lh?-Xr$
%2pNU.gl=e?(5N18EGnk\,471cOAH&:&/;RmAgL&CU]iOm_B>m^+]AX[g0U9SFDN<9-tsNT'8^,"o]@k@!L+31MMQ't'=*>#pgmP9
%a)bd*I<M]r@bQAo&$\r+['[7b'LcD%=Fg$\!)="8Pd22R=f/#S$+qC>L#1H#Yb$Lg%+W4@/7;cNE/qe+U6C$RV=,Yi[#>IGSgU*B
%TU`a$nVoC,kirgWqS"=0M^<XSUtnIpPM/h[Zd-dt%$:->E!Y*AZ=1AtlNiXH;)2r!).F&XABX"p8;43WjiKLO!YEQ-`W74>bS?6,
%)/mQV_d3RNA8iZsSsg=?e/aZ@`97oHQY,l`+FOm)5FBg\V.Oqs$,e`naA.X>$kP^m&e`PO'P_\)_a?76PTW*jGKs#>oYcb&'fe:W
%+i`kc3/CR*n/.t?4/*IoNIhC7W+ZF!DdoW\M:N0L:8=!%Zb&W3N77U0mVJ)$fsS_CBUB?3jWmSBnrh3OP19`W2U8^#,3-f_"GLD'
%D@6mi3FO>87pd5I(^iYSh?i\jI>'W@8qa.][3?Sqh?a/fM(2YOD4Fj!NJcb$U5H.=Y`*A&'?2R:o!"q/CnWT.fSR.5Z*gFIi!^$u
%E/bS<&Ft_rgKMR3CY>sYZ91(#)U%6AroH>](VREdlt7alN?4fdZP-sT[bCmqONY`H!JLT</JSHnAe?k9NX89>j8m):NluU`#$Jkb
%[iFp"86:,W8p\PgZQEjj>)pcEgp0>5+r>iU)'C;_(_4_uhGokY7,GDWckt=D[%T'6D'k[g9&2dfhCpJT`ocY45[=c`B>It+=Y8VF
%i>^Ma/V)W,N`5&nk&ALpdIALLlkj>R]a/)HLhe3,J=qRV/KEqX*0HFmqi3^+pJVHAq,YA/&N#nJ'"HhUTRV<,K%Z1o^VccoHP<LN
%fp@Sh*%gqP8-1e&$!u]U&;X#lchS"u,K6C29jAU(o,CeSS(#+fCbtcr(^*c5Xg(S<0IX:0",_;r*4VT3JNATX&920'^d+EO5orPa
%r$j-qSd`iIa'4"K22FEI"R'PY1(LVO"q]t9_6frfY[OVlLJ#u+$T0pQSfn3Q:9d`Hcpt/n<#p4biNg^;Q\adA':DXL</OC-W'HnE
%Ell<R33-P*n6jR[:"ffSpj<)^7g>RPp9J]a17Y'(30nV+_q@7n#\og-q_fD(#V'U.q2s_Hatd`_p-0R)Z?o,B\@e)9JN75A?.%j=
%Zn.S$,\B0ih:S3+$\VQd;o(Ot-40r6?r`!<<d:hKH/aidfGOaKJ?Fnfh:_9%F(Pk$9G)'u7N#?\P-Qko_^PoS@Xak6Snl\o,5t*Z
%R$0CI6WlU_O9Rl"O]4&&aW_nB,EUuAY]pq1nI@lL/Kd8MIj=(:R<GloJMA]6$Ue&H&;YTd^a;X+RUf'9M<l(c+Rm8SMNeN7?4`W1
%b>X>UCZf(g]J*MSYWB)ndR,#<=hO(Y$fX'&cm!KqC<\<J^0nd=l!6B[gU4(?H@K._JmL?*iRgH:Y)2+PRk#kjU;To7Ossph&=js6
%C_ftQ&%lEX&aWJpK,7#q,?fD606uP0G-:`a+R%*'V1;[>>i'3Q9+`XH`tfd1MB;^<W(<QqDuE''HP-,g(Q/4dIG9QQJ5&8GFUjS*
%67mjtL5(_(J<%Za#)u$/!T>e6d3):2AXeJeeE7GW5V6gC$)cIjBkY>o&VtgD,p;b-6irHcZ(pt#>p\h$+pFs*ET?[H+QD#Thgf3Q
%'MFhtApfPRZSs-;%(A$Um8,m,e7,2@ZdcEt(a>gYa>'fYhDY085b0$$:<+.s@#J7E?-G*_hCFW5`L`t19DTdY,$%pQ%rQA(''g^q
%O*%B@\AHI/U)@0hSR$&4Xe"58jmr3CbW\=RGb-A+ea12[AdB)+Ml]?(\U^=b;S>oBg'9_0L+Q#l1cZ'b]:T_R_p-T7-*C+7@e5m,
%'!uV:4VU=V6;Bne&V;(P@35<I*kW:D+<H,IM1p@SRW'T`C.a:YojhJUQ@`M?G"`L5Ke7uuhF3!R16j#s(>=%o+4VU/9[4ki`WO,:
%G4;_-833-*RGrH_Gu:)bU]>":@?4TtTaj2/0;ScR^u=>YS:5L6Zu8Ap%N5X8fp^8/DcZHP)AstJQ`"@QP`Z>E!<_>MW[o*c)=.^%
%ZQ>HJY?@$p0I2ANkJH^pg1mE"^``\U&FO[lJ65E9Rc%%oY[mTHD-g0k@$_?2kdZr3QZn;`H)VLX1SSHg"/7B"lt?Knr)<\oSBJ;C
%`,q:m94]=Ka>Q.GC=oGHZ(8kg"5m_.E?8b(3=Y)d^');ofO]0XiM!Z'D-BN8Yg'>WXj'PTl`RImO54YrCEX@B#QRBUAG76*Icq`m
%Tifu\&9A2^-Q*guhPF@Hg(?>*,cLfB6"iLaap".K>Ya5Y'M,VOo8Uot3^>1?@JU#iaMpD2M)#(!W\2dTO:MBu8XLkJ,"<^1C,Y,i
%C52i"PsBM#hGr>Kn!#ng>OedCUQTLp6>%+^-$Z'VR"W`cBmU,B$C+1HLR&]!_<*BeU_7a2>=Q<i5\HmA`$HIU6UIA:`mM6JL%M&f
%H.@!Nbe)MA-Gk"bL35K[iZ\dTG(j2uau+3VR:1r!OPJjk_7n=$*_!Jf_n$oK%/81kBI+C+Ej=XXDj$r.[fkdr50ENeU(stKP7ePR
%;BRSFDkt#-<L]81.10TL#KXk>M#c3m6QF:T,E]:ekZ'^#p:aBL`Xo;EknUm\$10H@Ur/!E=GO1!fjQGH^=7V*@T(]%<44R4'!AZ/
%#?&@s_3;J&&X@XS&]c^5(%4\2*TBMX_lJX]6gC(Q7=<;lk9<EiA3!qR1Sra1oPA"oYRecZj?iQ2LM.b1+t%YQ(eDnF'\^^jIC\iu
%),Nu.+.1:t(QeF<7\gV5Q:*#M\<O$V=H53pP0pY>a4`X`hI\KoaD%f8759KhrBSYn-*4n]%d8NFV-:=[5)nhZ7KX8SVM0aj]cK2+
%1`:-g8Mmk55_:\K5b*72Nj_f]m"s-s:k%TtmK57*dR-R%K?:6W!t:>Jm0$a+2]YJoUBH_P,\^RsD:XNA83Ve:KLaZT3+I(nnH&\"
%]cQCk\SVu_#hP(G=C5k28RWB,%`,R*BsCs]qC\9]E#G?ZRrWZ<\a(q7;4B#YAL@WH*Q$dQ(65.VCihGUPEklFE"iYr/.`/k%VSO#
%;"5I.26i60j4[klo0T]lV^FHK6Z(s:e+5/L9s5%TfcfZJ!V3c:!$Deu&0MMR0nZh`#6OtVn8K60C6hEmfn(oUMECtJ%7hXdD$W\f
%?mtCmnRVa/Pn_/hrXP.L<Ur6AWA!S26h@%SPolFNd$MUbj<NWRJ`W.rs1g;;2OeRF86n7R,sP9cN_GkA:Pj&kU2aY(0,EFUUco`p
%f2gl[,4tEL@OfLcYeT*"ScQ]g!MjQ],mpo@V@=p^,!M+E'o"cDHr266*i4io=4<]N9(K4#'`=ZQ^bK"kS)DOWGlmL-/1qTlf8Tou
%\\RpOScpbchV\jW*]=#>$;Z<N32jkSk`C!)PgmG%1ktL$+?OuC:4Omu(^Cc!F++Tq([;pF[tJMg8bnA`#=h4GiZ%&#P2c=e<42(L
%F,h#ZBOj-=p&JXV0t,Ao%?be0G^6Ui<''"tpAHh"A)8OJG',gT(Ul(0DWRE&;WfH216nFLV^++E#af'WQiO,<Kr5ST6Clp8(BG8F
%?d"ZbF5@-3T^=c%KSPVQY4;4=6f<(u7C7;dUk>L7.`<r"#8j$]GNF_1OSpdK5g]p,#uC8Zfm%56A47Arj,)ZiG[#_#(i6U4Dr<b2
%&JKCel$*\PDE9g5'/_80&"]9seDhb8(s3uX8.q$Q$HUV$"Hr.5X=J:n,H*-;mKb^QSVYb2Wus%J@TSBORQLmW_$`\I:bN/N/Zk;H
%[#%pP=C-0?V'[0^Y,7_ZTq86)[8B*3:;%r^!bPnh)(0N"h5fXppVejQ+NJbTPY/J!E*>#OO)5/Bs*`LY5]D<r&rW-O1n7EqLp%-7
%Q+A5)\`QP<i`h^_kb(t86*=q_@B#X1YY!d\CLb'1Rr`[bJiau,b:+mP@7a=f6ujE`<cSb'Xb5VPbRr;nC*Fpq2$GUS"(b6:q%1B:
%n><Cbn=&I`iJ'W@[BE+C=K[1%/$_TpkS$3a)O]9r5`'&>7a/)&aE#-80gG4E>a^I\)MM9:i?/iG43BD@A0aD@k@ON-neC9\l=Tgr
%::0_G10Vb?:^5jI!8+Wn?bA7+"Q+s)Q"=ro8b0_pa+A547ds"+'rs%G'k;kGrD7%Aef;&Lqa7?di9;0_M4D;uSBt2p*!1[1A_E4j
%$/?p>K/uni$@CkQ1X(Pi;=pbH]`JE?Hh*PHBF=GFQ"u5,"#$\Q[S_gF4-qd*VSi\8TWXP`K-'.q2_tA#AgL20lGc[aVGMSrn@]0n
%Y]GJD;$H9C>!l[Ha-4lsdMuJ$VZq00CdTOB.Xa.2)VD^n((@Y%YW/(%\rdf;+V&af5U!$B!"+i`eQfc1)-`+b[A\A1X^^\=bQIKC
%'r]==@X*q&/L`s%YrfV$GV>3'R#Aj1S9\.?"!_e(WqTcUi+Ic';eXGmCMjN"-cZ61i_&X$_JN$i3/Dls"sM_J(#3JYm]b/l>(''U
%[B)Q1Kj#J&iS>%o*+Ek4a,qk&fIl1;/#XZ8O^*RWi>9=T)a'A,\Ho6lpMd\kK[Ie-3'S!qL5,TrfaL4kC(k7,O:$c.!";+49F[t7
%p8O_S/LYY838d9M63`P\"YluXoS,Ca3>Mdk`r>A,cV#U,UK(6_!QTI67I-Ud.LE*XeaDo22#M!fK$VJ17+63//?B]6d("`/Y:;"3
%!CRW\]f]hE'O+#/(IRrLXpq'HEO`u-N2Zoe_)cU-a,\@JTDjADEK)FlrXB]R,OX*0%L\_t_eu6"EJVCrB)rk('qml!)qRm&#(SZ.
%>qU&LZ4@#A,;,.)ZT(J:Wn;oYf[9na69+M'!n=Nl1rI*$9tH2JXN.F#ZZRRMO.Ar'+I&$>:@W,\cWk!C'QVmr`2fV-D>'_=Jedn[
%V<4L5R6[ImT9ZQq==WCJ-/=8N,^'G]83C,+WR"(4)&QiKNm[M^OcL'=h0/''V38I?"+rMPH)X$lJVj@47K8%>N'/mlCd3-;%'m5V
%JTSsUZ57ZeEeI65`Zlu[/sKTSob4@@BJ0uPc"uj\[aB(_C.CN/)R;[sFhU^dP':Ah(<.A8`h!o]Lnb(kk7Lh2ZJ?!X(/sVZ=<\HG
%nr0d2JmGp!!-T#5=HN%!'eRDf-1EP8KCUW]A&D$:$3T-C7ZSGoM`$'kA&M3iJbObr5*u"rd#atN#2+0-e>T.=@Y5qhQ:H8>(;4XN
%.umuSmK2Z&<j&qi5hOA67qOQ5[n@QK6\??>C3tj2.u?_4MF6IoN<H=iEE\F10$dC>(,6@_"FtagNb-:Q9XO(ms-&;!RK4It'H1Tf
%6>UOtB'/,C+ne?1K,TRfVl`9Lp>F+VE%!j\FWKJ+-QpQ?/V'Uhe6^k5Ztk>b`b&o6mWtt''ti9Y!BP2jB*/[r0_f*$39J)$!m5Zd
%#rjfc)[tGW'YVb(WM09-0cI"OAreo*-*H/6/&8;2G>DsOA+KsfJ[7mk.mkC;Wi!b_$k:Gcbn"8.<R88bY%Q#g#2$)FPB?k/>Rq8?
%i#B;NB1-Q5bs#Zg%CKi*)::!ok`(Y?6YUfm-`X]oP\.bG^+hOUPCfn@W[D36acE[b8"u-j^H/eL%78S+EDO;b=ekio8pj?LNIo8`
%4+\^djPLJmqOq/b^d3j0bD2jCG-mt*a9`r]Y#*Ao`372VMci6F(eOcJ](#`J0VC#H5ij.=?=4UqkBp!S*Z%$8>V#u@LI)+8O0#Mq
%B(W>Ym?nbBe!ofq6<ZPpC'TmTp,F.Oo7sIc.8S/'%WdD7niX(P7.iT91?HFVG1`?P*^P-"s/Z\'!V5j7-A5r@YFUaQ/"<XLOr+><
%$!/i03+C$!YrI":Dd2h$D&*GJBbsDK/k5o;c#U]snd/@&P;Y&)0Qtm!eRset@PbH_\,l[Bc"RZ`n_mch^,hCA`)_i\%$#R$BCO.J
%Nj5NH/k,h3nX4WP6Bq8?6T2k:Y[$F)bcZ]X`O^c93?^>u$(QEO.+)0PWcmSC]k"BPJ>;MaE+B-l#>QKn)+,H;<?rJ4e?4r5;fY>0
%h'n\KOVD`jakFX:@G?L27:'XO+P[:>\k_eg$RPto<=pneS,`O.phV&2&c5$6iUR`?s&%GC%\r\e:5Rd1)lJa),%:#,QrfL]5fH(:
%D"6miHY/WYQU.ir[rHVC<#W"AE-`Kn:>pT$k"BDt56HZc=IQlNf$MQ!m2e1%`'>g*:I%`#HV]N_TiaBmG(cP>6&C4b1aecMA9#!o
%FtP@P'<'rqPsZRZi]Tj`__pu_DF2*&d2Nm;:?1h_)M\>njDC:Z$)%fOIEZXO1@mUc9*JY/<Q^_J7Z/Mu\cYCtCfbIQ&ugCQ@N34@
%'/lH8nAMkSmZ@os&?p4L6Q6T"jm]uu.7bHsEk6E>n6?uLS.HD_>#9=>N@Ur%A;tsMMmJSqBKFQub*=F'`51uF$TN2.NqQjG7/^MC
%(p'oh2\,iC5T4+p7,i55#[37Y,h0L,Ws#.@Ig,\a$t7=sn!^0bf7VB]i^sQuO2Sj<4eWYnjK]2GHijCb&!scrYT4!ZKX?XkZj52!
%0>]B!dmtX*pc2lj=VX9]@FeP5^tV6S_^-Ne]nflPN+1<Y"2VB2,R+;<rkfqsF'CFd2esu"pjf#Y9epr/fAaZiC(A/odm1.a+(>mq
%GqS!,BSUaNL@^BI0E\8hKF)b2qS^DY!]"F-DNtODSBtek2936NLMB"01L"goA(V?fI*p"j6:N[nNak!-i1:8VCohcpG26f&%pV,g
%#hMCg`gq+6CnYo8lFPs^"[;R;Mb?k`ERLBt3@d;Cb),R@%_=ZcM3e;$O8M[V:;r6ZdErFG_j2.o13Il2$di8MpDd:&pk0g5W7WK)
%\Qf32H4dJt8'\=@ap7@-npMo_G*i$k$WMS2]l3Tl*KCYLW61:5'%Lu2CZ#=WL*bf18)CktL8f1Kr'6aiKf8%Sm+1cf0Z\29#S'+.
%>D5Pc/&e2D*#l>7>hpS-r.l]:^bH-/i`/a_YZ2K&Mi9b`KP"UY'@]A1cIHr:DR)`50E,90-?PQo7opDVq8rkQ]hj_X?1tTq<fMC3
%i=:G3D.RuU+;P6'>]jC8n7Lke]tO)hbciG[+])Dr`XZh7),^L/(&!S(5tq,\jq]n6&VtcpMeMY7[mr&PWtkX)oDde;aM&&O9S`62
%>F"c"Xjh]mhM(??g4a.NY9b%<4h#\Nm.WD>4Vp9$%F;fO&]]c*P]0s\rV-.kaGkbLk;DYA[#_;RQ8Q=bmCVt-54#^<Fml"toDJT6
%mhPbmXp]Ugh\9aKd,ZiW7rTYgD[AoQ+GX-Jr/$tA\-'DeAjS^kH\%mkPdg/AcEOLiTh7FZ">P;mYS)tcq/A&b!>9Sk6i)Q(JOX^=
%4,X\1K4gfD(/G3:e;B+@nKh'F&=1K$!#H,t@td(-IN!=%n?q1-`18?IO[hOj1Eh=:=s-%;Y;g9O_E92B]m]R(HDqHAj2o92`<`!M
%o?*'V1E-)U*W]nSQ$l9jp-?#j2olRbG1bKZ"[V)=C>B.pN'mBEY9C-.Hp?ku#LoMl@qb(GTm4%&jBHK]SBIQ;,RVkCEcJE&K;b]S
%LlSk1<E^4,"[_r,f=E`^InJs35<3R;"j2'$L7a9`\3VbZa^EF0@FDI%d0o5:'epC?8Ykn9cM5V9+7s6(#\%=tY=j[UGrVZ$#<V?%
%L@br-"-$n.p!kks1MEA\U64V)FO)eZkoVkJ!nli!oJ`pMA'?,^56\Vp*(<AR&bcI*j)><Ec\r:R:kA?qH5`Ms`FO^umWq.3KSZ;K
%o]"0-(n=(fEZKSAZP&:Nr@fi4!==kD,W[tEc;*qb3AqR"OK/H(HN;\OQ[;j$P_8<3Dr*Ob@061$3lhEEp:E4a/Jdk/?b1t)"cu`)
%QIqf?jCV#D1D-=Ei]8Wn[6b"QJh69SLXMaH7EaXaCrCCk^,EC]<Iq^kQO(*WQ>E2M<dYu(5cBD2h%\IGnT?,fXq#Js%Co`%mh<R=
%[Nc(Z/gH\1-PnY]'Y"8+86N6VlmnK('S'o3da3!U<;9ok\KN=6*1,!23]oih0C]$oLtBFK!',FFPCp2W\@-qVguUVI82?8`&K7DA
%b2tGi7nJ`'k6ShQbO,'1J*>%.jJG/rgk!\Yq/NMIc7`k1]'!:7q.^EkX\Fh=9G-$"!qT8nl6oVfn@3io_/YjD!@L;UCbo47<=tmm
%mhjto[*/YMOlc0I+HAkb%?T'>!TYF9`s5E&XAFgeQ5PJ"4m>apR*:<;0GdtjFo\[2P"r.k7=@;06clnS<NBe/D@^^IJcJ<\%HQ.R
%M!7GF*6JRbIH^/8$(_/XaN$?SVo5*>Ercs#%n61Y"WVEcAVmBNT<Bm+8`8S4I[QV]jrJe6YV2$t4N=[h1<9;P-buQl%^rhl!sPWA
%n^(Mu5Qh,/j%K]hG+i7C$@T'SjeM=NNCFt$7SCEC;AI7qn.\_#cO5fW"s!33d#XF^\B("^+9J]Oi$)^eq.%SOY3=Z,agek!+HSJ#
%DB1@/@6L9'#Qq7db1M/2(&0eXk,*?JNE5U<.qqY.*JV]gf+F65:2!-?9*pD1BE2Jf8218KlN/IgS2iGNi+WsH^2D5:=9Mm>OW:6!
%MbppT19]EAqS[Jh4'Xp<<5Sp3kt`bOW+RC>*)mGi_N!f>I8u**c1c3CV)b5SNs$?.pe6=Xf;XJN2TW1MO[A[_4tpMuJV:Q"h5C]A
%b(6UBE/i_C-r++V[fQ/)fC13k,p3^54^?[cq$Ar"U"m$!([p(Z#-ae7bGcRKq&Ubm`B[B\MUe!>YSn>G3g-reLhh08jE=FfR1noS
%L!^Sd^,CZk$0A][7G_p6!:X,<^4jtt.6>2%B'b-:7`sCOBt"erC*San>e"]F)h%)u/X-osD/58)>;#SP'<(#LN+7DQ#_p5hN#iZp
%m]/(EP^n-gC7+db<j"I&FW>u!*:r*9>RsZFA!cYPPZhoCB?P^q6%N9]#nZf:,7D:En]8dS^0(FMhq=mE0P#'_iuL76b93S]Q'_[p
%b+T9YKV,^Z=<F7o$LHpGmGIC@GXiJk7uFI[6p]Thk"FSi]&&^20a%74$@k$XAcP_VM`3m:DD:$(7'S0,Kit9?F4!4=[t]o?<%p+Z
%0>IRCK_ZY&B85/TQ:/Gf>"fN8YKZt(VD9ql7iC_b'q5l%9(Jf_X;>\-'G_2Pg$B?>$UCt>iYZHF_r:8oJU0;;`_h[:(pg5iei[97
%N;/']-`fakN%d.INija`8q<)]Y`5JJ9bCUB5T/U?SM^$Q\?LQl`R3#%=9RJ&`P?#X`;RMP.>lq'RkJ>s=KC2rcIstn%,_6I!4fgC
%A[1!!qh>aca#3g8iLLTF;@:q5qh\F5U=od[15[[2%)T0.<7,.p-PWVB6oS=M/[sB==nP$\2LV)qB1o:iR18&gi.tN9[N@tNearRg
%#bX/l##O7Q#/k_k15M!@4+)[F>\X]?_C'KEfUD+\(s5;2%a)UYCBEKd!BZ>/U(@DL3DBpDMesDCVgV&R#'(a\RM]71NZN/A+j:GA
%qXX%$4F`hd\:9Rq&/Rg]<>!'+3?\i',3*`3*O>[[:'jr=h)YC=#`d(SHcE8ZjAoR[R^m=Tbf8fbIG"2Pg*?mED<niq@l$Nbb!<>(
%:D&*,1I`qFZ>n$U9m@><Tdn;>K#[?e"?RprSae<!a;QP-=V/'./IWiTBL*dUTl$<]!/K:\!t3(PJWYRD9<@=GQ!ei<.GkE+CVDk3
%:fJ9_EQq51)FXj2^iJf3\Q;IZ'Xhrs>Y^UrW1Z9'QRu$!4h_%6:^=U7/0Ij$h<.l34!6[0/ejIa$%YqN/D"0cehh8rlg*tXnkCN[
%\Bm!->UR^-+Loc,[`3L/=^d3W::MP#HMPR)#^d;jiN#5FaGNWt#Ho6O"\?F<-%+U0BWd;&a#])'?sGoQiX^;D?""0m#f9-SnGS7X
%A,/TY*<&hHiR@j?A_>Dlq[AjaEB$OS()Lr%]^t2RN3C.7#YbSRGPKSuM5P_8W^5/1@Qn!]Hm;:[.C_R-7DSU+j5\].5+9G,*/1Y:
%##a(A=E=)05uL.#]uD?qir"^#J=>K6=V2Q`Am99WN2;25%7FO4jTH-T&QrOG.-P]IGYF$-,u7-'qGrK6_$GGSOV%l5fd]&>,XrNf
%"C,aEMo,5'1DEi`*:ZDJ@ttRMU#^!6^g/i;2dG3XRoZ]&8.lp,LJdgMVji[BG)VEiO_s2/80c(WmVZj;/boSmr_agmWsW3Z&Cp+D
%VYZc&g<eKq^lun^!*q1J#bkYW"K-X7QSEI47DLeGQLUIb9+Jr1GqQYY*XA%:M9T\?`36OfUm/cDU]SMhnYG_6E])tV+5RHt0_/M7
%I&dI9RiA<I6OUh:EqhQ_a=B+qUE/^?_mj0O:ng"b,tJ5a1^@GC1p3@k"dHK@`@eqGn3I]I2<3iA5dR6.DE;DQ*([U0+m%I(fY,kE
%R5d)B9iU:!o>eWHf-e2M%%ulp9rR1l_h-<EQu'9SneF,:nf.V$]e`a<,?_>DX$EJ?=^R)8OeG)fbsmFK-'HU#r6FiR5H>.#[u6gq
%,?lZX1@rhN`P^;K:nLmaO<*N">S/-PEdQ\m5[gXrZ<&HM4jgUH7fg@e`Hmim-Z/Y!e&S*@?S9C`*clf/mCdJ^Ojn!1k"9%6fV_pH
%2J8%@T?&2ocg,9)luk;4diK_5WpY6@1XR+1i]N/0J,4g>5C,_;I)XjR/pr)bH.o07rI6/"nX!c9B\Z9G:-ZD;<)b(ErglMHK(k6"
%qe:nE?[9ipnk@#DM\)P#VLhh(h'@0>XSl\36l_+5o2ESBSbFHk;Z$t6f[o/f!6b5C8W^k3faa/"QViDnoCH)qdGm_=ddqXcVqp8"
%q.$&:guFrU75cR(>LZ8j8C<RA`c<ZO_gRB56h->>+EDpV4H?WOphfK-PXI5CXhDJE^bsGn]d1pt\:s,-mRQ)?nG-#_Kp9Ou6Wg#>
%C%"=GY1iqs"'%J+!DDlaBAOae>]'lQK0kSn=)eQoKX"e[on1;6qjX/LVm3Ro^Y)ci5@\>CR-g:1^PAPKiml4]s)"?.i-I"#kk@o]
%dL>`nBNX/s[6e:VLbJdNPcZ.STqhDoV)k]W"<Krf/Ln.RFYi]Q%b]Ai:n4kR71^=W$;h=-MakqM^ichhmh]\^$St\dM224D)L`4q
%]?Y^6]rUJA,rI-.?*gU?MaB8OUR1kQWt[$O<1K@E@98X!i&6l@DfVTlWGaAJ08O5j[h5t^oH!^k>ORJ`)'/ol?VGK_.Jl_UFrUOC
%BHV0DrEg,D-.')pE*em0pN.g.+sK$H12r87bLQ-:UDiqL:<I??FRL:@]:3E<YF_RsNSFscVYfJ:[TO*g3q*N5gthXlcHl+]0JbOT
%MXrWoW<]`"@Qcf%0?nqFhIS8%h,M;X0`f?MRF?l`s7RB.pWre4n*;o)%gEJAo)5n`m^#LrXs;QF*5@;_$iCaERAt[=bo>9o^8?s!
%-&!0?,@>(Q\p+aZgVM2WQtu,/!Q$DrrJP9(M5G69o>*_^C?ZJ**j*)J.]Pp(Y;\_M,$3hP$i5pMe+237$7KN&#(cTuaHHj'`<Lq3
%$T\iX<>_M*-+KCq:abY4jQmGX<Y'H"7%0aom0^d!EfnAL7':qFHslkA.^A*NZ'ogU]*L<V?8Wng$\=MW^^gYKf,VUkVk3m\h<(C:
%?D>/mRYu8*fBu0U.chF#[f(:Q82Q<'b_VU*J;\bu/feX]`k0$ho8j#OKM`qL&Wl@B!\AV@P9@.a*;b>aUp9Nf#Go$LDS`'R7Y]X]
%)"'Om26W8i1'^MT0C>poAk<$u%oH5:JE8)=a]Os8X?K=DU-=Bj;Z.fTL7su7SHT-CQ@h'SB8Lf3oio*Rdr2nLSmWg2oHiphlLuGq
%lNYnf?>AbsU()s&_s?6RoS#GK/^X`\!t0/VMEjR3bn]P3Y^5/sjK.$W``\/U(!uYN+"*4CE3@4_hRmidh(Oj_nK%IAEB-M=!o?j]
%_ub@,L@,:EAmDFB)S[<]^rphn[k_g68>3gP49?e@FX%A,RV?pQl0Jm?n^4IpeWk#8^_;G&#L8q./4PVb?s8hNGP-WB$N)(o3KKs=
%09&Z"-BW7e]UhbIThFZYS><[1g,+8lkP"\TO$4NnHQ?)[#rY*9Z9AEqR^G2h;u/Pf;1c+-f"/udPKJ_IY,)9P]E]^eC!)?RRq>`R
%+dhrrc,sb"1+\&PE1(HE"&7HR-7;1V`%36H_PD?Rk[uq@h<Lh*^b20T5kU&fgEoQrCIZS5'L2?-&k"262^$VIq-:8.EanN/d]eHH
%,%b<+k+,gKHrF5Q/5_"q,fc7Y8KgH>3YnTd9XJDsGLt^;JM3]k3Wl:($ZVP0;puG-ISJ@:DZMUqePoXQG=X+'$q+[`,=ND%U,H4h
%p-qp"pX"7YgK>XU@+IXFAlR3S)-gNtYS)E67K6Mg_a!1^p_0lD6gTccMHP=`a4np,N+89Y&^LA6B!/N=E$H'D9(954Kd+5,+5RL<
%*,A?H1bp+N&4Pt9X**'EOm+.k5\'gcqB$;30QAhE-_THm]3mtL7^[C&I/K6/qD0"H\T&J2p+FCM*%Lp!V#uT/dk6IQ%.cl[Vr]W4
%6p%dliXf];Br\u-QYAHSB8J($Q3QAQcdOeN5Z)(7Q*C59j':EGa@)%JM@WacUg[f8;k$H7etEd^'[utF)W&bQ-C1S_NB?[&P!dq/
%aid4/DQ0"6S"5[N`Jk0$LTb$0mC)t6GEih>JQUUji35_YN!l/?/!FK^!\FFlf;B^h<4`nVeWVjq);m#U"lYL*BL+/mqOFP2;u5p,
%T]i2*+Z6;fPWt7YoB6@FYThH<3AXVt70D-7Xa-F[4m>So!HlL$HUE<D"sTN/d;dLrk@C^-I&W7fN,N.JH&&N4NZ5GjnD]kI((`?K
%5q#0U!+u`CPYK1W?$Q%ma':/3WgngUB^KN&1PGCB%aX?/,OsC48Eap0O[X/iNH7q*+TAapPMV<"%i\*rpPg4NcIQE05A"'=btEBg
%\%huS66cH.==-?I-U-WkjVYjK+6&:G@$tC"$ZT;ad]_j7%VJ<!a7#kGB>bV-fSu^hb\NN0?h]<b-!_,EWm*5&![CPK8jGs@ML,_E
%WVVaM`dA3DF"kB.A/661LRclr!;eYo4)Z8W;!BQs$+8oD+m@Xh<FsQnTeBX3+L09sr6<Zhg3$O0<434c=QUi#$M\:/>EZ>9+s^-m
%2pt[4l1>oM;$+[%W]V:@3Z2X&hpHXqLKNQQ$ncD8HOh!H`MLeA9K<oFZj[MJZ,/dT#DYPalcBqMBAi_jI2LJ+5AqZ\bK''$a`+Ti
%j9YK>+/qYNhkJmPE^>=G`B]PV?$.Z`Ae6s7-#r$Xe`MCr4N&]fpQdT+0q6EW#=h=R@5]?qa4?tt?fnauU.#UpIZqVLU:qA+8<'/i
%4')\#gm^,j!p:QtDqGu2L,7e9jt$*[T`+2#p!uECJ@*I]jmrI?iEMUo2VsGELLL/G1T.s:NP7rl@cdYfO@$UV"!DdIAVe*G8THg\
%i=H+t#/[>h>#C=n;Ufj+DaSWW,hM6ccVLmd<Q3K`"7'1R^Zb5n,r%f3iqEP:K-a8X?jIMN&`KM.\bntgRhW9`n0Vo%bdTf34D@a7
%+qR!@?VJ-S-5%(K0nt![_\BNXf#&=+l)^AVOD`A*-(LS"DO`m"kYIg,\1nsObEo%=8oi+DR1H8bH/0Zh"<c'qAg(?Aic@No./ejH
%kb?0b/*i:PL,<Zm@;*%%"Q,([7C4lhf3^j$p`B10>mT\J+4*5m6lhXp7!0sF"0=mHPW5l!"gKRX[j-2O=4a6j`.*X.D@uW]k7qac
%&03\@(YhEHP%KK9E$9u)*@:@hU\0(8J,6ei+Z%eKDhMaIW@CPd5GX/h)>T:>>7.&<hV[$AlLAo*.k\/'n4Vk:GZARC<$?$Js+)]?
%a\=)KP[CT9,"nS5P+W%#0uD>>eV7;tL0.AYgt=Y1'k!LSRBaV?[+k2-R!?3(9CZ39.O(u/,7QTOFGg8hXD$V7nT"/R^[MX?(5Hu\
%C4HdBotsm[(t>0AD["bL5s^)ga]>4;WZ=#)WC.5Pc%'&]81Z/%YsB6Y!UQuqg=9`@'Vp$?m%2!'G&Z_*-1oV4U8O8%)fu4E9tIRC
%a/s,IKX(X>m,,$F"9Y](M<o%$Wl+%#]]*L"F@U\2eBH)MfU<L&6+TLR67b6SBT%LWSKJ5\Tn1:^>MG8uYkRpPh0"<5#OB:+rp%H#
%ff^_VKC//4KDtQrU_.JP.AF(@a+fD?PA9l)8.NBC"kq/TfgK4FMbVjVn[(tCUI=EY)Pk<s^%k&Y-Q<LjEgh2hD3I'm#gu.CTH":^
%A)5m"`+Hs(8;l[up%me3+HJoh\10b;NEXW0>G-R=#<a;"=Gjgn,-'@P)`q[p/^HKpjPo_]hNqf[fKE,QlBZ;M;O,*TR8Z>9EXqq6
%\E0/LC9KHYN;JA:qW[md"$CGOG-ke<E%N(Fa4ZUidCc6"_GHPshP(n#%LNN<E!6nf(ntaT.3QVZ#hN(q,`6W=b.2_\&drC%B8cB:
%l8ah2etT6G@I3#QbS#h0GhtqO5RKpo5Y7\k+f']%X-uo],;j.F#*@[6\22Xdlb\&OWJZ8t\>A1VV+GhI^`kJeI_Q>AhOnQ=&J_]+
%Ce8A[+^.216OTL`1_#ZN9,nJSk7?VP@=nLS)YfpH,G0J&>@FSqn-L$695bu]4uuS0-Y:0i^h\M"VfQc9c[u;UF"=dTS+eW>'dk)-
%hUW2hB4W&1V^3d>JCJO:jj=M6X3E3s@jlG.8IpQ\5mg[aqFE-u)MkE$!R6`=NM#LUa9TsE]Z.%G+MV)G\K0Z=PHsBE-KbeVI*1Lm
%C,;#s/;.%kRd%V"nLc&jXQGC!V-]@N)ETF]<H/rAn6Yd@l=St0P)bnj(7`H[(A0QV#u:]RY1^o2Mo`:o-=cZR<qYQ5.Fp;["Lld"
%(BZM-<(iE$YP1udZQ>FcV9!2KHT[E&dQFpbUP<,?dU5=;=Bj9mW9+uIBk[3WqZ)=EJm?I4qc.V%LEhYtrfZhn-%ZQ[HleGOjW<WV
%3;OPJ/#hKQ<;9eu5+\V_p%['0M'\mlelTQA,.,7E:qStH2=l77$j$/sRe3qW-I!*53c66aKL+O]@:SW[F2G"!5I'6(&L2;4ABG5V
%XbWVXB_*eXN^;'5jI@bY5/5A%"*MjE!7ut.kD3h]Cq0*TTB7Vo@T5:ZopY/@+;bm21J"fKr3$/:6.7%6?$[ndp9rs\0QlWPMQa3@
%YHoY2-o&YUj3Pl)c`n<;d5<BQP[\A$>5)0YJqWiL-\R8Rf+L`g%BWDM*BEhD7U>a,^HJI!7Z^Lfc[NXn4K+o3,oS@M.lt50'c6;8
%0^a\?1k&J1'?]^@-<N@+N*H#aI94k)<)!HQkR--EF_hUnStTlJHR;HSj\farEK_W8or,>hX1s6g9;)pdh.q\sjGj$uK[\eRhp,9(
%<U.*uA-8P<?n.&/<)jF0C.MFUE=l?J?6i)_PH;H_?qKH.ng3"]XPa:PTY1%<kA)Yh2I?^eZD\kG=/Tqm$TeWaMAqg%J\a593,oR!
%?nfWEf/[*17&DjOe7<:\&#[g1A*\?2P5kDd0VM,Q"->je+RjQBd"S(6LfFu;GC;iYnfS*rY*J=[!^(lmHT;I'6#k3m4SIBAJc>u>
%L[-K4Ij@l-^X<!!*E)>b99[Sf>7,*1<kf9A7PPaSCE9Mg,rojjF]PeQ7a<iP1"'Sr*NUFNSY@+s#]"*MGTp#<Vmmn\<N]<jH5/<e
%\a61Q8[Amr`OIP^`6]jOM:k;KDbF&/:aZi?9Aa4hHAd,=3/M=MI'2daRf!gEMW4.YfWaW$e[JbO,^^Jd\=Q-DD2X\3B8Gh8EV<OO
%_A0U:.KY:(XZQ;,WEDiE>C[,&;%lic#+I_&U>htS%VtsRmk$E9',s4s9sT6E0qFs!rK3^^]%2np\fU#,b]M%r:n^H9R2/HI80Y(.
%R/((MNmD3h"`a.sVuC7!X_SMShMH?;n8+Z!04M$2M2T*Ck>Ydg6)9*_=<GrM%V',fbERlJL=7>2Gj`o8P)nKC[d(\qd")i<-(-e/
%hFUt:@`d6n*AS[()J$;CU>W\mMPQTVKLh%sr\QmEMB!gCOHe(5'21Y'41<#Q4\ug+=aJbnbG2R<$X;]-I^8.pHWOJ&7]]]OrLEEY
%U?:0sRM4ZS92qcWV)o#$`=60;V(:^WpK@T'NAOm(Unk5gdo'PR7%6#8&bC=*jcHh%)]6O;:_A+tH;4=i/#8`#V*spVKj"$mC-7Mb
%?/>168=QBaVAWLI:fb\ZlJBe]F#OU,#<u2m:+YO>4<?XC`DS62TIM>$d*DHM%gS#e'qmrY5PNbgj?G<BTtIj@POi-XRDZK?Ip9l`
%$$lnI8*"aU`)&1Rs5T7TN\NdSKhp@ie1RR]"0"Dh^aR%BlN"C?)HW=q5ZZGA%)rGF(/N/=&a!K1BpY"_JstH98=JPT@j_hAQIVe^
%CYRHP&dE6Yj487Ip^b+%VlQ1LW(d.Z;/+a2fEaeM;@MYX&\4Q:F^h.p[.8kOKW#O#@#mU<\5&97#H+DUW3Sp-;h*K7:qtV+$G)Qu
%8;9Gq)5rWpD8U3^L6<*F'l[09aGnh=ii-9i2FuV8$UCkc8PQblZ;.fe-=94F&n6'RGZ??\)Aa56'`83A86Mqm,S8oJ"ht47/2_-W
%,uB7n'JVa$@90l*YnBb-/Tk;-9n7>M,@0YN7"&aV!bY;,!`>c$5W`>U2W7bur$52q_P4tQ=!,$9$kh]sMO(e:9]Lp(IVL+CiKUNr
%MPbVQY`!+ZNM[88AKW]DF<FNt"C)n(SiDoF.G#.=QT(kg.i%+1ki9(A6FfR;&]4+('JTU9W287Y>eqT1NO5F?$J.qgk6VX>kP+uK
%3lKq>.A//(Ds*%SEjO;VdXtFO6le!s.E,6[7L#n??&Pfb>3(95nD?2u=c9#>;`7-J3X)Q@)qs6`M08X*(V<brFbW.U(#M.WFj&VE
%JV&J<N9T:H0U8HtX!2X6/L^H0=,u0<#";\jDYaQ`2d17QN!771q>#Ae[;>=s5qUJhlUl(,AYP?[<YZq\?;cM>[iU546I/S)=40C-
%VBZmOX%9=,,Y6iJH)Pqjl\[I#<DTZ<`8n=^s/M,LSP#>"S;YR*@>B$Pk9Sk^1lF/m8qC!X/BaWI[%X7^j_TAZcom9aV03K*K(EaQ
%9`4Und6$**iGdRL'0kH*@cBm>FW=uL5?ie``^giS.XAefd#\KnYP9rs:LufBCA(c&H_fX]OOLrd;KWPM"%AtS_(#O9`#LUB=cU>!
%S]R:CkdILo98C$P:'3ViVb@"E5X\B?IMPO';r";!$E?q,#l(.]RV0@5<c<pR1u-U@/N6'3+fsm_.@J0G.,%rO[[DkDXC*dl_-..3
%.NU"F8UVR9(?On)%7%&GURbXS:uP&f3B+-#PK=2_5)VG"FhAgB:BUX#WA?le2+9`*-Frh^cSk,mgY(/e;m>Pm>@@.^i)r?A[hG(R
%a-c\pfY?1/s))KK]:JcD[POfghfJU+4j*6JR=,;>Nco$^*q\@=c:hFD0(\PqB-q=h7fE#*l[Q13q*2dm=])hm"p9SQc,-9tgCY4l
%FB/-r/b67md5$F!?LIHF#\(7@[ag8g:'`SP;h29\j:EUR,`+^rL<(NVb-\1:cZO0WOh&G7rl)W,ib8tG+t5\pO^r[,PmOs@O#R7G
%*T&F'3CP?*;<0*Y0<Rd$E+BPL()BbXRueCeq]UZf##TG1S:6+#&>H#=OVY#33#4`Fdm8s77NWcJ1m&9*S?51Ba+_.K#9n_s1^@WI
%YlL2fT&]&!gO7"/K`pM]**'>$Wj!"@PPK4DT-b)Jd8A4h;*>aHU7+:QQhBnlc^C.i,c4(8q]=\W0HG%KECB6dA,j.(-k.O64:%%s
%&X+J*g%l=*)*ZK&AguoT\dZt59@,47mA@lm$MBi?9Kd4GXU)?V\&,@P!QU(7Z_e-u5eXN$V.?>]M_88d4_u_7AWY:9-Ac^.FDGqp
%%FQf_FJOOI>D[r*.D+6\[TA=+.3JIF+qT?HobSR278ad4,K5\/aE7fM_0S>C^RBKF9B'W7Hm-^A5urcUnoSf9p>hO>OEtEKJY1"p
%Ym)V)*t3_fl=LfUF6O>dZ35s+&-TpC-BZY)6\s+V96@-PV\Wub/LlSm4i+^KP^FB<Lau<IPOn#QM-RGTe\eM6,RAPOK$QTk7iFq>
%$AS9fAMc4@hatRJ,dn&"BITmGiZh?d)QT_l(9YIpL/F:Z*70@JjbDK403!-Q.$%SHLT'BW0D-=V*p$p<3Ub#E"92eaIWk6_+o!(g
%3P(10La,OK>'WYs=FFGmer3^]BPa"A6A_qJGmA5>>B7$in!g/UWe!XP'[.,fV\D;-4k2.3XQkX9TP)1W6.qsa5LKW4>T)`uF[.-S
%>#dsB>5UY3TjYrO7l=Fl\,A6YLO?;"!7;Tg[X3C,,JJ_"5.Ee#S%KYJ$.+@f:n@l1O*;iABh3aMX:Yb<d8Nn$S4d`781\L54AnR9
%JK%"8p(3)Adj(;3dP-d-X3e-`YQO/W)e#\?ORd&p<^]q.(I`_u/g6B5&@FY"n//EtRok7'>q9@-@eP0_eYqlL=&h9eYMD?`h3OU1
%I*)ld5ID.s0s>o[\<h?6lt8^B"H<rqJt[uLU(NYkMCtq%JX=Q-U-=(Op]S"n,H>/"lW`uKpSN.N;1V5FH4b!QTo-US=QcK[2'sO7
%*hQ'XM@*t[#uu`6U6rtrOd'c9m7`RT*0JP6JS-#aA-ignnmSggXGWXan7^FRV`I\fcR_3D-r]"6.AH-9SKX`q*77k;<:Y^dRP.n1
%5)D2_U1bde+m,ZZb>l4o.%>WQZub$'Yr^k09UdT-m4S4:L(t5>SrSP``+5CkLu+@:\EUt[eH^>Q+<.'*7tdf5QgW[ONeG*TPRjPi
%NeRNk^CLtTN)a.F::*tEhPZNe&L1D8#%j#JNIg?\6J\]..ZIGJaZn3/:UR;K15Ks8?'6r7TB>@807uu';@Q0Q5p=UEV-/0U[hM].
%7S,'lYZm>j['u'-]NA'u]hACdAFCiXRPipWl3ni1]R;jfQioBK's)P-M:+;n!R`;5okX1b8b0Q)qq+_S8<R7A7mND_+(8ARWF+/r
%3L_2h&=O"2l&p%mLZ(;d.:eT`Odb'Y]Q'2%-Dt213e_;@$W8V'U&$I?5C_B0%@<eqd9#jMWT/B8'N#IV1nm;OJ9($dVNE:r>7/?Q
%#!nV+$pY14P*@*pCGRsXm2$u^WMa^IPX)/e.LCZUHYAnLr_8I6[,>9W6FGjRcQZ=;j_oV+A\W?p(CC=m$J+O)joCOU2b@No=GKgc
%rAs15rN%-j=VheJ#]a8%#T.MAr^BPbb*O122,l=MArFBCbg.JJ/M0i-P%VIJ&q@B.c0;ZTYCVQ9D@j3%&mM0SG,T9+^!6;'e6^GP
%:01ejLF)98m(Dp%K0j)QTW,&Hc`+Oqf7G9:2>!GSk9_]Pg(i@iQJsi(Yof`$>:o#K:,U)a9PRt&Z0a1Hk_HBpVRC/0\Vq^S"kaSG
%O<r!tXn?+a-$=7N=r)R9>]`pbB>38`8e%k0em$NF3J<N#66oL$H!4'[60[];BCTpb/d=gAS$Y"fcfX0'i9*b?XV=#o`9F+bU*pFT
%lf$C31"4*deJT`_K.9@$<C38#1q:DB7,NT:)lfpsX:bPkbM?.hQia.RWmG?d"7eu6A0O"]9'a?lV6J+O<a)=%=;C^8lLLD%hJ_s-
%Y+sB;+T)5CHT.o,-fE(fC5l=g;\TA!?F3g@)0EIJ'T"o8dsY]D&jAIjA@K'dDW*%CNiH<jjq6.BYSBTW^Ql8Y@W8(h2oR02,_0g'
%2B@GbZ_G+I)j,KG@#oH!Q[l3[dk@oBR[6=bLDLq5[_VI2Ysq1OSE#TMkh9V;`-t[/+11%R<kO.g/dE>XGn']?-!TJsMMl#aFbtE+
%,\GMen!Sd*"FOHa'Gd*ffbZPp)*DK:(l<UbE*GuCh(3StEpu+>eVShC)O=-`1Kef$!JrGeNEu^=^P]F.q4uhGlPQ`f"e8,#67f=I
%"U*=XhZjOV1WA9!"Q+r2`m*Qhi/s>=Hs/Tiib8($cY\I#?47(/:AH-bU:V9k]ddWO8<KA0VQ<>C:i&,Dm4;,6Ys^Is1m<G$_ue44
%<\:**Q=a-I%F\t#!d[f"/S'-a5n(=o3K",7E(=XOi6EU,IB"Jm!;L,o9?!m+@NiEUcZ--nZ#FS2kl1Y^Y7e"Dl=c9<4E%.-Ke=S+
%C0>;glRu;"f8jgtSYid"V1kiaq_d@F1i<D4dBk(d%:qT#h)K`ZXi7PG)T.na[^;?Y4TLl`O.FB/@[sU]dkfQFNaJ0%O#&plk<!Ug
%P;J(Fo4H3KW4"1[/nVQ#G\*'@=ZBH\Pe=m&9cQ''d@1@r,YS3C=")NL:_Gmu=IgV'c&t4j3&Q=E/iI$Rq1P2Mlk+H#aq`SDKhO*<
%W_]a>Lt12bXrPSmD*`aU#C@B=)r$IOBQq/3HA%R3R^!%W>)'$gSJMpD$pM&=-T1Me*P`S((0"/\CuA*bAWQbNas!c00%AR3-oE6f
%6N5BMc<)^5AuNWnXZ/d';(G>\06TpV,F7jl;0G6HYhQE_S43"$$Yui@Jds>`rGtCJP]^kA6+RO!\Zm+8n$BG3UU$G)5ucZe_Qcto
%NZcY&V7X+,+qnqU%"+KI]]efkZN`6_&#?>NhOq;o=ZVuHU,IsU7V0bq,EB%[)*;>W'R+Pe&I%e9;8;S5a8NmYrHpO*c5ETui[9]Z
%S#&j?&@W@9di)(nYpIPQ@t9#BN%?.TWMWe,.[p9IhdW]%1$26\(X[DBQB3V&p=u,Xb7f.qe-)eT0XYt:&m&!2B6si&&ZsUoMX`U+
%?nji?]ORec-sY/)*=`_"Ug51\h"bHaICXP>UJ,#7D?DjU/tT6JS#Ntq]T)AMlbft+C)5bGrr9Gl2j5+YTB&1nDSTTDq7nQn"jS]"
%EEI81KW5+2Mm<FHhmrKIJhmVle`1XtR>:(t]19fQ![_7"lR5n0/mUY:H\n=YqiIED]:\fnLehCT8F8RtM;362Z(TuPog20kpLMkV
%\I%o!j>do-.31P&&cHt.JG&,0gs;;oOm^21G>$)hOF$eunuV_.&(,GL?IJFopX<Fjn`ah=Z\7Q"re7H6K_RFd#kMoAp`!,)EmKM_
%Ord;WfON.dpECg%7LOH4Q)DUmIQ\/S,En7<rU)8s?7:o5Zf_"9__@b0`uWR>hgJ&A$f6qkIE(I=IB9j>>@DKsHSj<@iusuQr&TTG
%E02fqqj2V#YD;$o^RiGlmQTOC</>X7$UgE'L&E*E96WVfQ99XSKWg_X2`T(\"eS!O03r7n8):g[SOtbs9S8#Y:d%D&Rc4p7Tal=C
%Vb#>WdRm;L#M,YuGs/9lpUZCVa0-Nr[o2*i`Qn4h&9'e6n&Nm`U;tSDV!%\_O1W0do@H0lg%2?(F6r4O`N4i4>gh2W"WGTg*TH^h
%kkS74l/j,G?QP8,P>6W-<[!@JW2f!)>Y(0fpNM[FM4VKZP27j:5OS1^T>(%Q?#,^7PU&J&^sF"<cIdniA3A:U^GlJhMs=2R@!IR-
%qKFC_;gLHm0[[V+f#=2.3ENDV4X/]#+IA,s=#(-&lY-mOj&[>Nqt9BT]ftH)f07d>o;1AdF\+]6^NADidRl!)eVLsUbkn=%3>O7s
%3!]Wq*fo&4kL=^.&L-&Ckb'Tt/qh;FhT+r%0@BB8?defT?]Vf`j4!c%[;0UmH<0fk=NT[nC4+QHUUm!@X]p4!'%)gNUZOp3kISCu
%+eqO.a8:=QE5J7T]RTQEFQXu+]jJV\s+!-<cD)GDo7IS$rEAAMO-fn=Q-V>]H6"0H`t5VnD`GU+D-bibBa^SiVs#u>03Qd_]UkCP
%Z39XR-q(W_'N[;`8(qW21'#.9gf*h`L6q7U\b!&W(OZ/-hcsB8)?JF"Q\[td]*,JWb$p=NHDHA::*C8M";6h"X"5WS"A$TZD&'>`
%KN`Mh,;k)?=^V)O3GelB-g(Jb63d#KL3edf!"&_B;R<Z*H$;L$k*gf9'mtgl!GItfJHB%Q(jH\d!;'3s5S#-rl=.@3(p^JU'\oU+
%97+Tii533U&k$N74^P'm%2%NHqn>[X5Jh.P?c?occUQCe;1PV(3pJ38"":dK3jC$d8FVtYFt)j$65if:Jsa,5*`:YSP8dH9a).aB
%(p4S*]SjXl*O0s6]4qnHFe].ge:9&VU:4Kq:8-IFdr1:\$Xe]+Kj)NeQY8[FT_>%bRQqV`Ang*NE[8N27j>I\a85Y>&:]#a_R1fF
%(<G4l$'\CW$b'+7r7p=geA=N.W1L'PC8[&'W.%1`Ut.'KV2t/q.1:=;+F^bl0aTWAIGa+n,S$S^U(X77fe?9N>/'\p<.7pa_^A8,
%HI!4*UaUF-5oWTgAH3cM&sWY"%@pq0VW1P@e2.h%75)$8:ch['L_:8+LouHH68YIrHKFA^-5*Dap,>X2C8I#8lEcelL8uVPk`oh>
%Z5=>qd+"ie,E(E?F?(cU*k&C^RQra:!E;].LTT2UEn$KhD&7OY%#$"mbdpCu\k)pTS:f5B!mD6`]AO>^nC?KYkjm&s6u@08PaG]g
%Ras:t0BqJP"qfc&2JuD:rK]?qpoC'HW%"EG9>0/B`V!p[rp5>f.7r/B%^%Z,?'Mq+*B1@Z1puir8S2A9F7$G\f)g4>--\Z!mb]$J
%Is:P_h9kh,4*i@k%;`B.e'ZY#<W@D,H7G<,^S@Re=0I!I:md,!r*N)n3*3l=iBK_,BMGn:W@mB0eods]!\'pnM`@G61b"k\Ztt2&
%8qPl_hFVpkH!3m1b?[/"UTU#D0.D1'8e)1.EpE*>)/?nSEU,2N(fJ\X,oYFN4F`XGcn'X4q[F4T2WO5h;p#G<eLh\YIB^hTLm<LT
%qAPbHqYG*BN\pBVc"2:4^"$7Lr('&]l=I^+!4`Ncp3?*e<gJZ]ZXEGZ5N!\G31c1XA#SE&qjC=+9"\SRM9_MQ]l\;_0IHT#X5W#&
%Edl8T-m1?0Dspb(GG\HVf1u(V\b=eTdGs%f)u,'KrcS0$'V("rE)W4S:Xb'F/JcJ%J4h"MTr+Wqmb?b_&8+b%oZ-.nIA6aiUAoY9
%s7m_lV(MDur]n6jVRHAO\+BNsUBX#E\*08;i_Bd0]h8$p,S[8X8l__/i,CR*^8S:AVB;%,"nXf3?H#W-Qm(jA8J^1>Qe-)INe>jO
%eM#l'!5k"Lh7I*]*#MeMY)!hBqgL24'\2"uI^OLiMu:lrM9spSENsbLqqq.;hRB$dqW]6q&"HE+?!g#Ip)5(c'ZYZ_ieOdfS<YS:
%(>?7CKtr,JDr=8l4+48;:rqh:k=N#Vc+s&KM8+=,r[STP%a9h>W[aB>Q`2*E_W8J.M"5GG7,&Cr8i.8n+ha.G^a3^P+`3H',-"#(
%"gRf-#+0k+8iqk2mCfQE^;Y44U6]+(jiSro6lBG]`3=DQ$[U.hZTT3ROZ)t`&T+e3<L*8a)aP[1=Z`]]j'J19bDtKIQbB+$POibH
%!4hV-kJMJ(HNBIJ_pS^4=''+6,"5I9bk&Ao)WOugOV3@M#a[36j28*NQldur%RAZ;k=98\>S\L"GXs.'itg`&d@^coU1+\q0&"#S
%T=j*TkdcJ$J4Ncu4kG2-P?psFk+&k[.T7onEEu3n7TouSh.W9@VJ*P=9_Y\'=Y*s5+u4"/<Q4TQ@AiOqSFE0g7WiWnA[@`?k%b,]
%3R<#^AtQ7a3N6>fa'-['b8ob5n9l]E'I#acFj3J,cFkHnO]mL.MNPJ^?]RkUe%i_jTpRm0Xd.&UkO%@_#PCf@aUkOYNs,>%d4Acf
%'>1=q99G666e\M3Q"Xqh!+el/St7SJ@:bS!.lBEEK3joJ_CoKWX3f[W;p-@XlDh56eY8QBVqqTBV#bCA#jAj=!3]cB]gIV:$0]rO
%q>u=S,UH!^?4W05[1Q-UB+[kS'.CtNVS#OO<55\?"8E/6M0rLUmbP^bWj-?B2jT\u9J!7*$^J\YNV^]+3SR8^HS^+\\7,MRXgL9e
%?0/15ZLt>6m8D4g@tLl0[D/1h9`t9?#`BLVlfR^NC&7Kd'R,-Z/l>4qjZiqVVMp(4jDuSeYZ8epoM?G,$]M#2=%Mm,3VAcK%)O6`
%Q;;(EW]C_@NIjQ/\%5RuO7=tNV"b5C$(Ns"qH<ntH:`5qYTho'=%54n7$)*%db?k'DMar`b8+X[\94fE?,O-n=^V-fW.12+QoA2f
%@p$<6?/I3XlCkqgLf-FgZ-bW=^$5V`,b>"<5HpWiA*BZ"7L%6O#V;^t,nRG=93U'&CY0.q&^ZjTIUNAnHNd@VfY.ja;Y#PSk#_I/
%_sJHm<lV*H>O`Mn/A4eE6t;/q="P5L,MbqlSgS.M`niSU,KYIHq%/0a[@>8EWAk.THCITmhKZL(q?5rJ5"jG+$r`ULpHmT/*(\8Z
%EbP>QNtMCG2)/`Y.b`WA;P4MEZa;f.EMSC!pkC37*/1>iSkq)-6fB;]4QfA9%.A9Gj>#\Y#DP[As2Lga@8Z&k(`,iSZuVu<_V?\?
%WA5Z#XhWAc')cn;<7V'.AB9%[,d[V[a)o\Nd!P\,DKD@M*\55,<SEB'\](S&jhf]:\d<VpVJ=lndXk.Md/7Q$6):S8P)ZHY_c5OZ
%Ym\E1Ub4$\'V,`WcogDmpTT.7T<m4D;V&</QQ<bB\:f]X9-p;^`"IfYIX3_j9/LiDHR_XJ&@=_KFgVc,kU-qLTq,CJE;)E&/o_`X
%.PtV#+Fkf1,*f6#P1:XQ!Ce_^^egokT-/K-/MBM,C.6RUhRY+ZF'R4i5n<-[o/9KL$XGm&Z9]uX.E#-sF_QWs=*&QD(Xf)r-?%L>
%r9P,#-/UDS2B)nBNknEAB^r]0Cf]760I2o,Q,7bUqYSAp].O%M@*VbE`\jY"99nI[Utn9Ndr2SW[-<fh`,'B8of->E&b%0c2atYd
%YtCQgqIEof8>WoWe6"U&IBOf`Oii@)]cLm6`iFTt$gphC,[Pp4VB'k18Etu,pk`cCp'4G(7ZF;[_Ne#@i=I'8;P^r*,*RtI5H\k[
%DnOVZV8e[pXbDs;PTu`2/aslEP=f,G$hf\-W^DnqoCdl"SKr?O0b)NnT8i(2n8kXtQ1TN(-F/*<j,TZlf/qCOF.Z?*@Ka-H1j105
%l?:Vn2l$EJ_A[V.),,jV`C@fAAl4Q.c#,40]lDILa_%<.!mq"p?RqsNd\lOMl]LmX?2)$:T]fC+&t0s6l!=MAi84<a),%Dkc%kZ"
%9Q7dn]m[%F9DeZ'3;RG1V*O?U^ifSk]1l:T[oD,,jfb=lN+Hk$7NI>gA%*JdZpjT(>jeaHNDXWA1]r]DSCbQ$3L];OT0m22B^OBB
%\s"o&,0:Cn2j-&9eYs`*DO+27A&VM:,02L<]r7:uXJHuWEZ)%7n('JhUuUelj,N8:-o>pbn>YB,lR4j#9'A`g2X;&8QTU3'q&7Ct
%CZ*BqkXQQfbWX,;`r*a8*/.FP&##&J.Y"e39q<t..T,aX-e+c*!iWJ#&o<+Y`f9+`eNL7OqDP.bW\9c^<TttVQQYQ>bf-B+U6hk<
%M&F/t(TPkO#ATDL7<;Bkb(0X3R<kNR'"?uS"oVk0+3o&8C"M/%^2p@'9$_:jB$p;q9J!&RMjA5<+q3Sf!6>Yd5i80p*E7*dkS#;@
%$=C3kUfZA4FFWUO4bd'L1pVX(CEH%E_t9JT2PYt36UfYdc-k+<9THIfc$I>:je9(>.)Mu"$+=.JBc-G2T.%X'N6YI/3g@j8J@46f
%r23lj'U(-b)S($u]b4(,io6iZ.?"jqjmQ\7X/#OHGo_c^kB1=heBJmK,[ait*\Jrq.O15M_O&]AIQJ_OF<.g\2\\\"@HT]`<<0NM
%j]Lit,<uX?0:PN_S1tn)):ULBESImnqs(aoW+%lFlsmfMr6s_sh$-$DFL^%-C\)E_6(Dmeje-5!:8Vd6fX\\;b-Yi@#RD`=8B-@C
%%TSA(USD_e54%'bWr8FgqMbLY)odV]"scO4002rk-4f*/9jXm.:@9IV#raYOcfI#CKJDQEgXjVfbG8T;;lWe+pZqNL8+L3=Nd"XV
%nkils:oEh7g%3/8C-+/#;X`3@LmlpIY)FTSA.*(^f$_GmcZr-L\')Wf"l+6/Z5rNVoafMmFrLn/g;4`UiZ,Ri(9sAOd]W"B)5\9t
%B]9_^id5sY>YZhaDN>6W@MmbM-E5!U0;?>%Tt5Jp29[M^*A"3QA#/^.[:9/Hf><)HjG912Td:SiolFp?R?sE,L_V7P3o)R1J*7,+
%f3E_o);hCUNO*kHpskW,Z/S$4A5^CcO>KK$oNCiTYX\>Z:a:aQ7FXIKiua^K6!Ul99[Tu6\=)@u$m)("Ll+Il*i&^KH;5T?f"EjD
%1IiFb&rYKT.AG!2M.,XJocd!PD:H'89/8"7(XeiKAF?ks6mS(aCAgKc)51I7<p1?[YV74gA9TV&XLL-<I!h8BRXlFb-T03MSO9FR
%"U.S4<%r>p.<:nn4?r!_/[>AGipA3bNWRq`1CeE?QD@Z;+UJ]<U;OO>\8IF1i#B*f3Bl>/.),1WB.]X!Shij#;N?l&-thF%LAh)C
%S="4BTb7<eM@4C7!%b2b6Rn3H"XT=-^_sb%&_;Wd4l0n5@F,$T0](,(F9'<P+-`:jBN;u'\eUjVhcp0qq9hp_-@.!f/X<9Vl<u#"
%DrT@4@"khb[]V]1#8UX(?bL*b/X+rZH6T8/Kdrr"q"A:;N)*7]q0WE9=facVH/h<4qeB\')3[hK/d4%eqJ>[2UY#D"T$J;Y2FdKe
%oqB,>oFJ;"p%N%RrcfqZ't;=%d=@J!)dC5#Hq>X4+oahROS^:!cFk27leK[i#6rUQf-a1_;Vk9icI=C;-$Tp)L8M`efMj'`7AM^M
%;$XlR;:k5&<*R_K<oNt01ok")%Qd&+if^De8PoU!;$eib;9nq2M2_PO7l3Sa-jd6>CO>R)eBf*>D;&/Si=ZllkHsGNJiQ5RY$F4Y
%\JJt>d7ZIZI[Zp&hMq';l1%(W%1R[(YE3pPZh,0:q2cdm`oYC[IL\5`E,G-YbPiL0V5c/DZc@c8#]Kh;7GE_A\'J'>*dukF^_&o7
%+R[/V(LT(C$0N\sWHEKo^eh>r=/i)G6+p6=n?^Ch`\DElQpCFGh/f@oF9aBKR/hBdlCc\^$)&q=;d@a["ZKX"naYO!jYojaN"O&J
%($sOT/@?i9h2$3iclKuEEf7Y./L"=6qT+.FllY@;-B@lV/28md0DWl@3mBo);FK41'>-<Tlk8Ct?[$1:M.nLq^Z9-Km3-71Ud=8J
%i*.7sin-NOH_dSLW*=%sYZb'\b`HAWe>BoPCrbH3`nR.IA;PR*!Hk0sYS,>=KI^QrRA:mnfJG:[c=e@W7<ECDJ!:4,AVl.E>D+dH
%oW.oVH+S=3Y1-_m\5Ajd7*eYW8iLJmd;3QOeqk-6OOW9Q+*JOM>Xg9F!LTW79P:2=OhN;-/"TT"E5Y?no")M>5_bueVZtqtqoSiA
%.aC55k#G?O>qY\[@EO%kOKtOGMYn&$_K/o@!cQ73?k&uL+R0*$a9^5PUqNcbK*JnPccpns^Q$Sgb<.;)k9Etp`1e<IMCIS4QR-n[
%\U5';<-BMFL6;ql87!k\q+Xmp`P)6,WcrYqT!?P0[3EjuXa6I4ARi$/G)(.-347?s8bM<ULTrJ1#Soia>,,9[:hS5Q\[NJ2>_AQJ
%L.^g\He^j2ce7H*6[E>WRW8'[T+7sX662'V%1kD^@M'JV)H"UBm9EZ%l:+3.*9fM<it5]]lL??i7abA\kB'q*W$W*TZtjal'oPu=
%df_Nc*hkXOVMU)c?eG6'dHD\?Kn:\eHQo1m#,.i(%PK^T/gF[k<8+oB#:d%9feZ<T=[kdlb$qcWhT_]<#gU!41s8JR^Fq-NgkC&:
%Pbds0aTaE]Q+J`lFmI\"FK`2,Ts`lqb<pB4<<%>S)kTN@J%QRAo_JJQg,3ACW"5#)D!='a"ctssC)UcO'FqgBScR2EX6e;Mr(VP/
%:P.^0/_P1ZRI&uGolZ4T-L21V'r#h6eOG'f<)D1ZMb^@f]`7;b_$d2X2MGI;`G:?&cj-GVA13D6_\A?-"NVJ=[R)eQ5]'kGjd3t1
%C%T:Xf_1;<=E-hWPQ6_t1e#>6ldYbU(i`E..13mhrJ'ap/e:54gjh**.8c:"FPuf+!R$7/7WTkQ<7gZegg"qT!.n=/5L=2/*+[Sh
%Tt)%gCa#ZU5s"F!&tl6q5oIHVahRGW;,5*U+GSaY&u6o@QHuHuF128BE.>7\h91t&_udTYGb^_4W1B0=hc0"fXT4@b?N<&b6LE$2
%;5ia&S"\._NG.YA/b5?0B$M#308X4TT.;&]TfKk=*CLmgdMPo+PT>0;:l"fJ5oF;AG/+a?#RG4f8Ad0?e[4UAM4#HZ&jtoG5OT)I
%e83tX_3V\3-S+_7R7I9:iEJiQ9\7"L?IWOYQ69pJ3KF4Krj&I,PPSiPdm(sPYnng?m8I^+I9J@s%:;2N+2UP?&Qt0oVI]W2V@--O
%S-?_=6\,G-)k&/a#`J`3mFlY_NM8MSK0R2/2?ORYh%i^e="39T2<u%/^mai($(oXjg#U7(2@X.9@7-@1nGZD<a^BP$9<K=)2[,1B
%Jb#6]^XE4UPf;6]CT>$IdO-fW7ZiucE&&:)Ard-"VV>K-6=6aEMok*T-BC^!rnk6t@e[bQ=11,GS&jmu35k+`RaXat+2<=5eNj<8
%5M(TfX%#3p8s!>n6`YPm_$\kV9B#A%!7>F^I[*8MWTBq4Qc"gleI\&XgXmKm`Mn*MT'OT"@R<+YgNj:k!+Sk8Ls=Yl(Od9[YJ3j0
%#YJ`*IiT[GmjQ9:?bj$H([[\hC"e"BYE*R1;I(@!7<MY+TL5Db@?aL`*Y$<0AqZKEp#su*hj*BjJAJT`L2IHdD;?Z[VRS7piIPZ"
%N@L>/Cir-MTjrqZgY/.^ililNbh2nHU^GM,p^m]N6q_tI#rPa&P>[Y=AQ%eS-q0=9$V)?2>)6qMiSuKi`=[7cfLlq#/V35d<02s?
%A>C+InRf-R(/MAnFk"sT"fpo<!G<RoD@I?f3st_N3MbZO99F75\\UbV+N<fDX-W^>AsO:9hmndCa'TH2q,+HTmTX>hZ-G-;J0siB
%((@3qDaUmrb%-Q<5GH/Ep63$paa/(GYp6oAOCG1%-]"9s7Pq%KD8m[aB/0ol/#f7a=pPh$q;*#^5g,31kVDG-#4h*2>^"m`)$#2X
%-(rNte8;YZFgPh-0>!IsW+7eDiN*rt\/T\U-Fc7/is5JClN86/Ohjc^:4n_!2bR?fX*Tb/9W`)?X\l@BDm5efVk<(!3DmY6XcB:[
%\3\>i=%L3Ocmse3>JX0/0[7%L)hR,DLM'4tg1!S;d)BDCTg;J.5e499EA5.2(In0(P_O(QasJm86c6HF4i&]on8AmmA&_,?oQjLO
%<9('`SP))M!i=)G?DU0aB9Cn7F=EVs7E&F.eZ*c<*3-F,F>3tmVj!DsR')Ct[B)a)MCn.pO-r/mFt$q3Ro.:$p8Oi\Xs&s6^r`pS
%5\9,q\`1K_9$kQZ%t^U#X0P@t:\N+`=pT#j87!X8%_B+omHYqop;:ZqZcV7h*rH<Kpr:TK6)nLoH3L&Dj9Yo*:@,Ykp`VKF5q(sn
%5"T:;%N*mY1n\&^U-gtQB9gZ;M^j2W6_\%u#]:L\)T.E/VO>7WJo@6l#<N!'O%[pJ6'qX>G#fujZ"9S9"AN<cd"DDE7h^#%CT7[T
%SgdT,pU-S\J8JAB)(V,CV$[rBRRW.6h@sGR+[!C4&%*<4Pq8F_,",@?MED9i:43>"I5(1qVjmmN^561K?e@*qP$^jd[`M-R5DV*=
%Db5\._IssG3$gP->;8Q=Tc(@578ZI^rVXcB!*#[]UVkf:i!0(FBNqF8DVDc@g"b5f4!j*r"5.&+6q]^13$5>*^.t<d.eqP>;0is0
%20)9m?`O=hl]EMH=?fqT<RWddF>XOKPI604;D6+!D9(K6)b2gs2#ppSZW+\BFBRE>VjQr,LVWb!HOj6$<W-G1ib(BM7;;O>'uUtW
%kDa-eY=ih5P@J6BSOf"/(f1f;W<acu[:W-88;tb,LRQa=h8'/Z"*Go0ZiK+';7P+QIEh_br"gBZ<?gJ2`b4UBfu"dh%I+)&1/ik'
%<Q`MO'0p9b7CR,S?oi$qOouR=3hDKYABPi:_C#RD2Hea_VK'k#%$9K%hWD!X$93?3i6IAM1t/CO%i]gVlGZq7L!:T_F&9=Q7Eeq0
%;SXEhDc\!akiBan_6%f^6:l#L4#s['IP3]N/WCVX:5_$(`R7:UMn7qmr\?o_f^u,DaR$kD\*o2n$5T1D3n^qmHke-H5Xi2gM/@hu
%OXRbFT[H5Sa)8[H,B'QJ<s7'(>?-ihBJWsI0D!`/R$9g9LZ%n*>6NWen47q8>pM0#!C&P6J2"!&\SC(<Je18E'YP?IMOfVMM6%.-
%_.r$dPQqKqXt"\<;F>Kb-cHHN%!Eq8['Wl(BFPnWZ4=QC;p&e=[S)Hu^p0_mo>'1hO&Ferj;*Mb\*eAr0B=tbcAKEY:LBd!fqbW.
%R)dh_<61g4]9K)Y6Zj)JDCS[7*!8qAZuVK)/B3A+`hoQ<5gU2_qJ]1ueEi7.5i++*FmhCs+Jd+[E_*Tj8idaucCgY':nmM9G#X[h
%&:!cJ4aRF]A-J9iGTfkU4J1.ST!oW+PmWq=bl?("b7F:iU8BEi/1.HDG3KM/5@R)5$N[j%E)fD#(1m)lMMEjFYt76FfF$ggTFj^2
%%`]kEbaYlTD2/.GS&`(Ik8*!+K2)\d&T"a[p3,ON[cgc5$MN+To?e#tIBLifgLu2A?*_H*=gaHjir=TV%t-k8N]$=L&sod\>Z!J)
%/n^`#e.cpU9I2]aUDjO`!;9tM9>`h:omhi2O,k8ACqTC6ojoGHrKc7e(b2@RdR]9=Bh='c]nCYNc(HmKMi%EQ.>APZ8Lu)7L8#;N
%TK$/I7kqBRQf&k"iTjs\/A=dr"fmCl"#k'6M?HR^2<%;+6/dZo(lHNG(kf-9:^ge;5r*@PhF:l4eF$&1=V5JH=O=M+*6MofUl1#/
%Ms%-hp81q3a41Uu4H$t2Z]g7gm&d7oedUi7n(&pj6u\>*6cF")=gMG.;kL$S/0ha3/$j=:1`>NJ(!OteJL0)6/I%/U!m_340%,b+
%</NH)Ts<Y`;_TeB0qt"J'^D>k22sZR@DJmRf2K1-S!(X?p[XZe^dtGAg;&VGd6;?#_D7C_NNb$s'L`2DU"Q6jPd/Xkf#oe8S)DNq
%JIt"OW`L>Brl%!mdh5Y%@qfj_Ou?=I&F/K&R+$AoE_sbaRiWECBo#I5ohs3fP5tWL*.4femBZ8QAqUqNUW*@?a.jl29T-O,6C8'j
%HOl?3=7*2'1b%aJJ;e;HkY7tg5bG(fP?u*[<>]!HNid&%Hq/roI3^#9;J]*+>,$RjG`=SWru/A#^8U,bNP$%0!J+c4oT#up^6o[%
%n9b+9+FLl>;$;0QD?LCQomu/ZZmi>=R$A=fp/[kSbK';tZ,9#+`l#9.>#CP1!Mu6'6\uG*NBs!ZoIm2<Y4d(?m\R].SjIM3QjtE"
%]lssW+mXNV31nMBHQh][WAq<Bk6Uj!+#!1:o#>jLa-&6Y(MAi7;n!/Sko+b;1m*e,qeP2OOG#;995e@[AoIcrpQ;"Y$bO-o.1r,>
%XS?E(80eX3To$8\_gBH7$$2O,$,^ZUbV$Lk/'4ldPi424'5t&%j&CXnJdh^ZeW=(O0b%rc<N>S6G/jbsc`^eu:jWM=07s,<p0>I/
%Z;S<Y*4lL@\-SR]pkXT7-'K)b8^-1'jOeJa:g-a@^ph;4>)u0-'Rh9<+A5Q'DPC@.o7smak-:15WSD,g%(,"QRf^h85'!kWCCg\#
%eetAi8l;)*>::G3e/j6Sb$na2>Q%t'I'A['+YR'<9nTMMp0.ekGC5(,#lI8W'b\sQP#U$W+Io1j7+ebo6,M1Ja<V)qGat)L+Y,+F
%IMo@RIQLQ#ZLNW#_%BCe2+GZpR]XbOPB^nr/BARA09JZq`L(W^/NdcXp?E2;iSP+c.*DiLf-ABu_43!<IklD+G4UH;G;Q??S%Fks
%<8p4_6i/Ig,;Rc(b':dD\VA#;,mDi=9,5:]?e//<?@coh?H3gu;7kl1b"0CZ6YhF8`uA<1at*d/el5gpVVGc7hRO#DBRih&I3]Pj
%gJ0#`U8qHcVq\IaGbV/R<&tR3@ngBicJ9[(*P)#I,&55m4$&.29/9>ee?qR,1nPQ6EC,8"RNS2UT7ii\Kq6k='*W61m/!*fF`@;M
%3o\[Z,h1a.FCe[.InVS0q%$DAq?/O)D*!s;fYj]-d>(0<?"d]Le4fO*!//K%Ba(Ir&r6&jW5\j)fG$ST7-!HfTYk_j]IIA84VXAd
%X!3><7?\^kW2\(.0<;YrS"n_;]2hWSDXr7T"o+>j,Cqno=4?$+qES<OBiCmig<YbDRSC0V!^&aUEnMX>nV'?,bX;&-&QXI^MqlAb
%qSSQ_]Bg)aH^$C!5c]i&@igsu4JH!]K^tBfRT.:d7):mr9JO6NMeBj]@@^uR6(t]H7+I>*0MMq"A\WhThKU^$#ns/Z,[uk6iOb!W
%;t$^HM;jX\1'T6HC)ccAd?Dj"g>_P<THM1/c;&+$i(uSO`t9o\]GIK,*&JadPR:M4S>gskI+B_/fo4N,==I%("cm%L$^r3QFij"f
%(-tB2c:5e=i2't!3Z&?eqo!7O.2WO@S>7b'3AK7/aUpfU"qW@skUom(rhAn/>pko#P^:,cifM),C<Dr&2)TMh0gmWbbV734(&f=2
%M3&6J9XM%73e;hKQtTPpO%W4fKk>Oe1+t<<BZi*I6B9fXaN(Q:Q9-WD<%B:T1$g/4EaeGK/'bF.Z`rPre4R6Q@).S]8enJEF4-?)
%<Ma'`'`4I3$hkMd20!0CV3!@,+ATIa##.$cEoSZMa,25b#.Co'mU[gqGI\^B(>h.p,CQMRV![i]X*JB#hoh$-HmLt!VL^D@Q'XnC
%?aB\*\M"7/N)2U:6K+Ns#K_=2C7hs]g@pHW;qoeQ*0c\s_rr_*<>dYoZZPZ2H'SiGWF?rL+U5)]($&H$UQQ>j(NuZWHH?a(TUeU7
%LRl8MN[An:0B=&dnLZ`$W+2?o=mr`9ckfSP6fneiWN,cF-mM?VLK?>`PM)"k-+eJs*tnY4]NBpP6A?kU1`WNkV)B%5*667N(Ac"d
%_QD!BXhJiUm.H%Jm\"_+KRc,Hlp3VNI:HXCDIT=(iNeTq):jkd]*.:k5_G`Br'oda'P,)%KPOQAT!37b^2#,bnd8J;I\tRYEp:&S
%210N]2AYh7Omf)?;N;^Xbi+,^IdJut"k<b0"B[nh"Qd0iNRNi^/KotRQ,CgDb!(O3:n4m153)>r"Tq."MW:U/dn&soKuo498#=%D
%fVA\UMZOb?*t]4r[]!pJ[Y$968Cu.O5Gi55Q>.`071mCqVpqmI'qRXSfsPCaOE=5p'*4n"GR@,$'t6e5EF(&d8$nTA.jW`dR`BJD
%1BQDr+*OCDnC::V&Ch&R0r<:<Nc:6MGqRcb9u&ij)JI]V8[]J!Q>\?YjObWOck/h_G!:T`5l=a].df_O<L@T.)l2f-<gVMEI%Wu;
%IOd[MLbe`D_&Pk%hb>Sbc#"a3=J?_m*&\-n[E>%3lHFA)hH?/Ik_a@dM'_l*m,`6"F%j=IC>SRb!T8<p]['#@63XA!:,Ti,hN"g#
%/m0SM\"l)F-!T)dko3Q/(H,8OXk5")mY8X3Q;FpdirJu>0`7hFr=:.LTB#pC1'9bb++-[:I*+kT3+)29Xmmk5n\YdW%h^=`P:]#C
%afI0ISO"ZEldV`0G>JmfPYLA$RE%n';8HCPXDc)aCMg*&!*qu":J!O6L[<Smeo<l3J8lJ]O`AY)=K9o?;gM%/WT_o/kZn4InG_eN
%NsK73[R0mo5/%S\^p^mL5l]aX6oKLL%SM'pC9bDs"(d7+d`I_nhk^eZE?L\]kr,@c`K#_hkI)jJX#%.eI2(qs0OMa:+mdEe%g6s_
%$-Z!MInC0N'6`(5`M<>Lk3d8]O`kfB*pHC4/s+5<MB9[#EFMrtB:l7(LsgD3SoMtnW]>BF88bj\\K'%;Wb,EudTP$jCrr(KFHZLf
%QSl^"Y&XTm@LQ1<$FMOs\,rNh'n8C2fV\h-dGN[Y.<0-)*=g"``C[?$4Za*onl]mYs0HDi$oU2Ki*L$e=1&gHs%B@*:d>&/GuG]a
%$Kb1B83L^9`R^s!RT/\A0,K\+qEX,#;[T:tn_nWJ-i]oZ<h;(^Rlm_WUMoHU/Fa=]o1aJ.:pUY+V,m;ai:EnG1aUaP86T]WQ=EX;
%&q7HH47o`+Th^snqY**';F`0)>"Iag@?aH)3KVH*b-l3l\*<`9ppS,m)#C^OG$@TiVIE9FWIq"KIOq)gs,4iprjI(N,)`?eYdBQb
%Ohnq1PBi?:"8R!?Wl*:XqLN)r_?#NbPIooJC<hZ]M5n?U%a[dUQNLGO/5mE*96Q6b/?-jaeD&3NK<TLe!5`;.oi@k2S+JqG5"1oa
%VHDWrFlr0g(<7I/J]DML,p0,"H1U1V?BRte2Q-('Z]WO>:!aM>p57QN<Mp,ta)A_YFNC2\\X_.$%dJoq05"(*=e]J*5%=Io7\eO@
%47PGd,nOP3m.5H2--K_ug<Qq$\/>1u<f@hl.g<oc1.VuFOAnOR1OJEdm];R_:?_,m]gdL-aFMN;4K_80/d.#X`(bI5<qGp]&M,;T
%^T&q>\diDo(9O'IC_q(<bp18Dht^T7D;FBY<'?'m"c`s"S$j?8El(#QqAg7g<OiK/*T$%\]6YK<T23@;P!Zgm2,4Nu/]1an[Rqpl
%XC7S+*HqfQAGE[-r/f#<F2-]L;Lq6mRr!.gAlKRgX_#h&W0icYnl/cABSb&U3`Waag%-[JIZ9@%:')^\(r!H1Xb_n9SM>kT3i_+\
%k:gpe->F)K5F0eTIbHq<WJ4B*],&?c:1=-*1nmA_1?e/S:_lt$(7K5^LNXMQ`A)]^4]\*?K^Fh[=,6-S!&qBR:UOcIaX8f6IA_'#
%=diZS8Zj)7:-`jOEkQSdPb\TX#:hU\]/$PQA2fFDY.Dn5gT+8mU5q]L11n:NO%K^hI>;r@D3"gmEZeI@?JUr9^7[F"6<6)r91u[B
%Rst:pm@KT,g.HVF;/oaC0Ol`s,ZXVWF1fao'1E3%`*`,,+KT=,^6H_l;KCLOc7Gt=JmEb#j*T"`bQK@)ML:2MOs2:c-'D;R-)@S`
%9lB]+=";A>o#ZM3pJJ+o@UbY]8+9+P@9UuY(RloJc[@S=8lTO]i^31T7QP)]#Sh5E)e4MK$XkVfjP(F/4eNp;<9ZH*Ut_%nqd'YI
%a&+Tl>u(MYXGoP.XLfUl;==DDoJSn6:[tTFfWe\PU(SM-E@UV.0h=>hc4Ulg/=RIHF^40pCq5L-g7PM>l$l-u:Dg#Z7=[Y>>o3A0
%s"9!hh<un'M3cEf&@Wo!-\kldCP(=7]l8u)jh:@`dId864S\cJ6fQ]*m6:`4r\VANK@\N)U-3f'E//d"mO`dmMi)sSj,Irg>>8!N
%6V(>!3O.X&>f*Y,1GCPh*1(MH5S>*tm,ZQ3Mg_\R$\M#9P"gOZ2\e2YQXOJBmW`^CGq6G4"cV[[`e$1@-gdAhah7Yln%[9CG%o]/
%IW*imc_GdH\=4g2+ei;;R"673o%U3/C/DEnb9[<t*1,<oFu#+;4_,(KPQBC1C9\(pR8MT[l09;B!OANun<6:3!p,'WODCZ7[b=e;
%`CmG]P)!pFH0#%ufYqO&qAa(??tNFAf;B/WmlD,L,>QYpet[-W,rTe;q]V4hfQ)'G.HcG'gs*)L?l2\FY69<QJ80h_+<V7,G"l#/
%W=*r#]<Q%WE+`/_FkVg9E@q-Fb8J+7!hG9Oaaq3Zq\oQ)oQd"j8!LFK*%FFTW4(Ygha(WmY_j3Qi\"EG0**&EM0_m(WI\b\e2BJr
%1`.Zq\uM\A@*uD#:`<VW"eqD0YdNhk[b[]Q0s0<YDl-M:ZUR2aC,r9$]c6Z@oCMW&F0:[=<?6f+7qbCWXf5mVLQn"+\T<cZPsSf8
%R])$HN>/7VRUH[cK[<u[j`rIXJ!!LN4PHd&5(Sf8q?l?\i:=@;_]H3>m^?r3@BWN_'0&TYBI,71CG#j(7m$*qIZHr%GuK'!N]QI9
%,KMAN%Cnk.SmJ=seUZb.\Ftk)QpM,3R-E&U^aZ]1C4Gmi?^WB]VTtr2hl,Y^)<-T:asi[=N7^2tb<or7r?PL;mV?:QG[<9B^<mlJ
%a,Zse(TmFk6N?(mZMPNB=/Q]Lo=BnBG$Hsm0f6K^4(T&iMNKL0XA[3](PA_a/t?"MrD$.G;N`):0*X]uh6XTF#cWE51g(`37SPYo
%\$k-\[)^;cOX9H.2m2FUD<pt:KTZXu23V95UCUC!bg[CrWtm%L<ba1T#<S`7r[OqGM:K450MIl'L8,n8lQDJndWc?rfi>YQB/jD'
%SBXhZ?pt<?Yu<9m4@EqU;A8D?DZkf<kXaW/Ug@"*VD8P[13/>2+KW(qf+_<RRI>mp4E$;r<gk4W2c@koZ_#LV%(`A>97,NA4nTQW
%&\2Tb'*6A<W?XSWPFo"]VN=3Cf'ML-3?F5X6iomB%PHm1'*%iFh/[^[;c#><R)95IiaCEs*V:4\T#HDZj7HP)!OEfN88>ELNDQ]S
%5TB+'_=ZmWF5Ll>^/_G!*&4dofZ.09jQ0(8*Y(IV\%aj*jFL/$*tCX/<D<LA"Qa<XEW#"YDGU)%DC\]+dC+ln0_L(Kp59XAEG<t?
%LT6i_cWA0eq_<OY'gI,P+[aEG*d-VF9:!;E2-rU@U@>A/C4HR1r[:>JQ3T+QWm=_m%<V`jJ#a%m$U@H5(pZC4'*mHaK^/<00*T9>
%FWIF,7Wa)h8J4m)TG1.fJH4g1Zo+m;F17jSNR60D[;7'skkT\X\tbO.;HTm\CS`LQ6?++_0dZ*%YEL?H5`UW\(pIEb"K8r-\<3?M
%)c,'s+B<-KL!cbPgo`e3]fa=6dq&CKfj7+\dZ+_)D/U38'jiSe,jej6]"4_S=_(1fkr12IetY)OF^O:\.P[t<7H1%O;H0^PQ(LX\
%6Om_<mW&V4Ok@<o]@DKGR,XbS;':P>T<_F6\B(P+e"":8=Xm"MT]J6jSV.H&0ET_NEB!c6`G-1$$kGOM)YD=TL6$PYJfPCd_pj%b
%'uR?'MJqf%Q(:qaT(94H\tC"6"8mThrqT7fW1N%)V&Wku3DH-r'pc4p_8](32U+T',3+TKP$CCNQB*4HLg!3jUT!nQmL-0A%pOTF
%\PQ#NU$M1W#.9:q['puhZ#<]+!9RUI7Nsgrle.*b-ujPDWka>W*[WO0agnmJLd3jm8*T>`l`'5gpeKa<[/bM'/f)quT1g[LP%"rR
%K'tR5c[chN<Gb4d'ds+_X9pEsTTuc3=pP?Nl"[aU'i'Rd1-D;;g\acG>`(T(\q/A2[#'C<`PEtt8TMaGo<ouYI)UdQI]X]!*$3pR
%Xk$.Uemb"W9lDNZP,aUn_l+1t^(\HW"LP/3^;`-1`W-NtpZUt7*/Ii@=H($$1C:^^\*>U!Bf>CiYmPp'f'T+C[2Qh+atKn6XFf`V
%D;51$n<c+.X6U.rgK8l7GucJ_$@&B!gM223Beha%`?fJL2diVM`WtQ"FQ)[ohlYpFFsmsDltBoUW,2oEJU^_1O'C2S!!fo-h((gI
%4JDm_\'hR_)Mo?P2jeSV4UZP7LA?.a>5I>O4%8Vc`?26<:DmJe/ZF[P1o@70M>$$9qt/4c:/lNn]ZJZ_@tq^t[aP!`?>ffDgpF!]
%/6<^VD&fp!W)S1rHL2O__UmjV.[@N]mk=&oTYd#p$pYdZla-4&dS(I;PRhU;;mUD<@"M0b7j12<,'_>SOh5j:"D+P8r6e]q;)>3r
%1?Jkp?<-38dTY"_[!c^AHP>D?kh6AY[56Mi6#:YjhE:jOQeCYsV-!pk6>'SR+;rS4JYk'KGGZ60`^09Q*ZH`?5s<U``fAh;MM9J.
%77ns",T27P3!t2i3.;p&^"g/EW%.jDFJgMoQ2XIVT=q=JORb`h3iH&E_[_>IOm.\6!H3%_>?qtd2/Udn$n_.YFG#_#=gU_UQcJJO
%%6)0h\5'cB)WsSC5%WK^*>i?sN`t0qm%cK'X)H3%[#2!ZmN3-F46e*-LZ5KDn:Vi8TQiCr&1"`fo1(c(_c[hh$sb)WSX%u-*&j>R
%<N2DK_9]_Q=]83la&HeU<G^hfL8<_kS#hb9C5l;(/GgBq(bh<Aop*UKO=/R$JSr^t3F_t#_?f+=;O_@E/kkgf]##r)Bpsd9C#q*c
%1CZh-]!l4XC&^T:a*=^qa#(rcV)E&LrT`u\c!CT;#;$XtWKqM&bs[Ru@%$^>40U=1R]Dn&QaPsep7WZr.F<'!KV7!D8e+,mB[Z"u
%<L"4!&0%VqZGO!fU=>=><r_GG)L"22;O'_8.m6<_49[t&\$ZP2T$dM[nB'*[.tSZ>G7J+30;9PYfg?KCq47BZUa@0TF_caPJWYme
%nn&hOYLO^mR3dDu5c@Z&0$Rc/B-]K4<aFiH:EX1Ph(6Bl$I`BU.H0Tgq]&jR:QK2mGZp*1af));omG&ZK,,.<.mc!^5+fsY]B"M&
%Qt``r*bL=6dopP6Y_8FrMc1t<FEWqDU0&@[9#qd[.SimUL#O*ndS`"H'oEK#$P`X\*Sh(N2pSlP*U5'O#-]FE?B_#$l&`5!i1guj
%o!@Q;IGm"n^Zq&NAO2bZ09ApD-qA;N>50Lt8/(8>FL5;4p1%lhkeu%e:fS6gX%5rsQ.#oP,bQ!obu0Ipb`,Pha')3<g5<Ch-._lA
%JI8H:Y@9W3r+!#jHl5J!_`L7C=\)H?fP;^SSR)D;13A8^jtmqX&3+MZ%Sap^Y(8QSF*tt_WgDj5ZSme('2/GOelEpSOaW)\79J$<
%A>KH&,(jbE<l^#YBT3;Y$etHg%5m[Cf`<5q,8/:6i9fU&Gk@L+6WAs_Pa*f@V4$/m`Q=Y7->Xl7:RrEh[YV1$5E8Fe0qDA[^$KWK
%HW9YNaQ::W93!A!<a'f\f*4n6]-nO1Y.(b)>)CtpX>/=HOlEZPCens]\hEn\p,M5o(b%J*=tMq<\#^+sQD,b`U%aZ8;+!iInE+"t
%TFs#")TmZK)'E.8b9.@(cJT]hJd>qjn#4W(T_'5ELQ<9lrDcGc%+DQfTrMie8-"H";5>"!.$m3J/6B80eItsfG5LJ(DSk0Ed/(U9
%BV]6O(b"XTjaE3]Kj?ht]U/n"/VL;*@YT#ZE#(-8mLc;XHQ<>a\l8N-/_i,9->d:[CR954;J59lfh'a2KrM!&#0k?5^1DV2%4*ZI
%gtRj5S[WI7.V_rp?BuXdcIjh$.P>4n6"\gT@&&&@_J82"D&=kaHLj]R3m4+UQe@[!9$k#$0+?3"\G5-SJDm347l85*N)+kknhNp?
%N;<h>:eJ'=dBBN:)qr!`PLPZ#Gtp$(-FGUWH6T)J:7knQU?[E5#%0L2T]b!3X7+BY*uq%_Igb3'cdj"JpD^6!s)#q,2VQL".AS-u
%XW^j7/6-2d_F>+?f<6KT<4,l6>.[5&C*Sr/)?E#U=s#-Md!LX<hBE^)bu2rc]%<E\&rB4c="+:%XT=tLDt4Fl!:.GnDqRKugCGRX
%:=YOJ5Y&Jc90X+S=?/5.k&:X737\RY-`opBj>dB+K$%O[<m1;*P;^AI%uuB]8j5ZKN;/7N/"`'WMMKI9/>[VHgPm9)D9?C]D0e@j
%-NufLoI6%hgNc_*\rX+s786KpN2KQ]3Yr3HX>J'mJ#mMRfWKO<:$t+`!JTecc"(Y#Ah)E-$sF*S-IQSud!Cje-.I43,BcH!jV:l8
%#C%`MjWe<*Ob_1b:G=/Wf_a_,/=#N_r5+c[BDXl[<>EhcRl^3RohfUNV4"L*WBRqAQhe+OQ&=tQZH+=[b,-5(/tZAj]?b8#V^RLp
%4pX^am)WPA\bhfM3qHLL0G3UB\7mub*7d/[Cm'>q4_cuI;(4<0;5PZn.#;6rX@q&:lb\sX@9Uhk2Q%%m33aT]Gm@[1rhFf7fn"69
%IeV)p_l<?AU$5U=YaS`LeiTGJ3n%s(6\Nn^4@>:CpBh\#Nb@'%Ee'e3P!((i`7*.ELX(1.M0ho<csrs*4bMsc$'T^\O0,:)DmOQW
%W9Ar#+Fg@*c]-*)IF33?LM!WZhe9ACb3l5"i4Dk'MJ1n'(TU&JY,_.=Q:6s@YOO_@_*VcIL1&[nY>5K$Jgt#VGi_AI80m4"a6&pI
%p2sB(B@3<Y;Ze46YoG65q,m`2`,V^(?:d=b#s3P"U)`&!K4B\A$2d7\M\BseQH6q1DMHPu_JUNGgg;4Z/^QSR1o&^?.F++)rTTtk
%;l^u624$r3OG\YH6"/h5O(HK,@+jp]pTU)>``0Kl"c"i48\%@c\;frRW<M'^?[&B@(!j`Z0RimeT!6UT*!&Vc9d\&'K#c;h^I*JL
%*[GDV_i[gMl-7Z5:+TOG7.n@IG>:A1^fCh7h<2QTXF6]S5AT'DGL!Y]6to'/h.K+Y=,pQg,@rO-arCuc2.@K,.B4#o['c([hu1PF
%-sS5JU7R,YV%8[fBcCB.\==U7+*NR@bJQjb^QMXiluBmY5$OLqQ`(Hu-c.,1l$X0obmHQ<ger=%+UV]'*28UV4X`k!CeJuDW1O<#
%k-.Td&e%K(o@il6]iCImH\N"M%ZP2O^8>eOUq=Qc\`P)"F"404b/ZK:W7Hb_5pJl.6X>g(R\(t/Z.))g:SKhuQISr.kGNfI$QN#q
%W7e.8=,==,+e`&Ofik.BP4MB8D:hJFE$-BqUP,l!J>heX^W/kW=4FQCeIrUBh4&TC\krFV^Ug4:GOgTm6q`T4^J:FA\?qH,620pG
%.bH)U700YWZFEUu9un4m2W_69>DdK&_<P.EW<lI4>2tbehM\gD,gOo$`PP;#]Wjc]H52U:Sk\N<\fK/3\mI:l3*;KHC02Z*j0U0-
%Nj1$Kh+,_WB<VOA.T*7O!^#QG,,7nK#]hW]?3+>H!@Nh6R3160RtW]>nhQ4GP$8l]Z8S43<QnNa^!t\=M=OU0]l4;Aa,;o,WNgT/
%Q%^J'>JGpk)T\icD_So%C<j"b[Bl\hP'2fmCRBPR(DIQoh)g$.%sB$HPfs`ViOGo<<R(gfD)7.!<SCmhimb;=VTW$b!2NnT;;h#j
%iiGA*gHdqnKQ+U]QqOKcOHHV)kAF)Wqu_BGo8a#0?fC$TpUhN)Tse/P4$[W`lLpg@`?kfoT0Gh69V'S96UVuq,n]s=6i^)X(Ral!
%iUiI^X1#:8]#miiC;M:"U)]VdDfO.$":UJ&/\17Qn1f*HU,#>+M6Y4ZM?CWTlc-&-(&I8N?>O(4S^Y7L.&gJV=VG.@]]jD4OZ5oP
%EDkFcmknj-Zc_sMTX!'21g-YW`;"2$D8lA9)/=/A#msU`(VtE22+E79\l9/fJN:a+#$H#e967H5I@mMV21mb!Is^kaDGK(`r6J_Q
%"G%%9@HE;jZSY8]6RW<l[=E-.j+T\O4;V_#4QQ_49fe"$70&%f]WmP=aTF*Rm^)6T2VT4?ZuPEt>!HhP[7D;Nk$1apI+kuj)Kf)i
%FtII&.,=R>)\\cW(s9H[FbDSC4ggUr@5<m=ntV2Tj(Y[1^tNZZI5k$^UgQb=WpQ$qD!Dk&)D_P^rT/4j?)`S94"qHB-?lt9!X'j.
%Y,tO(H`_=1>0Ak:bfE:-m21CB-"RekC^FJB&:N4'CD!^@>qRQH>)3";T'd-4ih*EeIoa\_LDF>h=./\p.ug#mW_HKJ?;5iI0U'UN
%;hg>WT2C7$>:YZ8q-Xui0IW^4p_VI2d91=8RpsOX-7D*B<u$q<I<>kV&C>BnULnD]RWMUL!)m*,SY'3(hp=j[mZ=V9R%(V9Rqn't
%Un!1T.0MJ>.P#7bSP=;%Nnb/rI5:$:'V2kW?\i&IW00jT5aThODfilR0]%%U[s;%q-1K;D?J]dEe4q0td;kC9`8J$PBQ4m3b5e9u
%5plti_$inB<rbZg$5)7]pij$ZWAINTQ6_9mUQj(116#OjH)NtJ9[5/tU(@BEKA*+%_b;:k=n/UK!&_EB?OHaRUI6m[I&,@i'XdjG
%p'=@b%51u<<=n0h*I^/G%p2bs'8R#,$iMYt0L6[h:FVL.<AohhE8=/jle5L4f+Wg&WG5uR8j%fPMPZU;2mMGCs."E`IOCjAVl<5O
%qag*p<5g137q6SC6DFo83qDZWS:BB5hs\,pen($m?:_,*ke*IPCk>k7*U4(aiZQ"k(k[_P'r6+s5m%GSM\99bjg<2R)X7r#Pbt;b
%HYCHMn,<A*P9Eoh.hJktXCE#X!MOGr<s=6&]2:q<^aKL(JDkkb7<^=],E_=F*0D4]D^d:bcr(MH)!`?%=\("6(#aUFXAj4tM":\2
%b9FtYK>+\?^&!ql3'[_6b&nTPn=l5X35Qpt[:6LaWV4EXgf-GZC.;0(<%)=8F*Uqj[oaD.:P<OTpDW+"L^@OfjP\Bk!_@2h!Sb#f
%aI'DU(DXIZ^VcI!>q%*S:3LcR&OPRb!YEL[T3=tkG*iZ)D+b!=*RPlVl-nu[Fc#a#=sS>omTn;gk#*Ncn;Y^#5qGS:1JQ,:)9&U)
%o&tZgc\G`*X'Zi9:\17srPd$Fh9d:;d%&AkJX%i\X'92j9lX1t<]/--=4SpLP=6i.aT`d<$J81L/]BluKkcj&e#TTleNPRKeCA<5
%<)m&3QRE7&?,%n+5!U<E/WFM:BZR*b`E5_DLSa92T,rr<l6,TDTn4^ATF\3QaG3bs75BJdUbkA,(SWVo!K;C`@E&FQ&QC5p8'TtM
%R/huq6^)"g#8e1#+1A7A&5/tCKo!Z>X+?j^R(ub&d3,)U[9:ELVeW6VAm%0p3Y4PBR;no3f6+sQOAOLePRMu-VZ)fAH5SE,f5mBd
%MgD(U<X0:-+aT7cqj"cKTUIZmMkHT%8`9G:OIuV_']5i\oLPcJh3Bh'C!"loe=*a[WR`iCMgC_'];1V=X;aCj#L[N]3<HHU$_<&G
%N2X+[1#H[;@f<FU0"Se+gWA8fA2R*qCti8l<?\*5;,LpsH<1!q*WRrqCKPc5!h<<`,O@Cl2A,EG*2q./C<#8?U55]D%#a\oY4q('
%.@b\&LZFUc=HjGB5;:NZoQsG\0:]AU/eUnOQdV]0?A,k5mL:Vq&k(#*ZBr_g3'hT5j$6c[]eGFE`D/BD\LEABQ2(Wk=8+1gK4qPX
%&.P$^Z4nJc.D%k?H]f$%mn*;[8D'ojJC(?b@@5ojJ05S/c0u$CH4T#J^0ZS0rUPTipZiLC":M?PCBCO5FqfUi5FiRq/]h>=6`*,D
%!235PW(>0'<s\>lHJUe`NS)3W\]uolZ8Ts*SH^8qNO!f^8l@8FdQEpki38-&QnSronO)qdmTreKjgQm"N%uT&,0[9s3_6C_@N.E;
%"WS]LA6N/e%<VV:B84#J=fRE,N`!Ff1;BcifBSo7U33;YA?@h[5IESQRal4fNH/666Jn'm`]=^8E$''Q)+u5<2Pk06k:t&`E2e`;
%*jl**OnZ$g:6lWEK<rECGJm"':uhl0DjD0f>Dcf>%;k\[>3[ZWmp%-\=ga%Ml#>jd.r2,*i_jQ_cGNC,2_3LtKQHK8aMEdmM76`/
%f*0i6inP:H&k[BB33UhSNGb?dGX!DnP]j<<kZ64@(rJ^/En>66)O=6RZ4!^heF#:lBK\'O;:@,EHJ_(4N+#IG-]:!6;nX,"K/*bE
%O;n_*fhm'g']b#-C/oUUi)g2p#DT%BPn\X#'#IOf'Tu'f6'Sh'>:>dLW&4;)bN,TW[nP\"D5HXgDo1"T(Z".g3jF<f7%M?+M$g-u
%B$tdq*B\2!l)HdMQhKH:S16QHIYQ79WOc+b>aN9Y*@Li,*P4=hiTcG,#R]gZJg\oj.%i_'^_$aQ_G1fi]5tEr%Ktpu/]/8lk&)W:
%"^J`(<H`/IFZ\'de9u=<*;6VMMq^0:b"&gLHWlYpBY(3\eA,8'JlXY#$Cta]RB:c\W&RIW$_,2YXcPiJnpYD.?B_(?fXS)0apK<d
%(=,3A2hj_hQE%q4;0MSY7F2$sHSb`m3b5Q#^HBK;S%]1sh;.<g-*^1=AuI#gM].S`78[H9I(,OY%^o!XE,J]jG)QRk+YQBWKAf(<
%Ogl5#3X8KHAdk:]D0Fd6A**$+"qF6A*>sSESnXp1i6>0-N4l$C"SOF2BZZu6Uj@>T,BQm`$!Rn!BpLAq&Of*]0oQX*NlQZ;GpekI
%U,kRd(c\e^OV$943kn+'X%Vh%(QQtUI6[*JH2["[<R2Z;$_m$M\]fP$=l!M,QG_#"enF"/8t`Vs'F,\9/jr9'Uc_pa,PK8'g(*m$
%%GQe<-IsG>do#r]p^]1QX5W&fqif9jNotMfH:@#R]]rR?kCaPs[+DgV")?O/lWhu87C`u9fl<R%)C4S;'1j,IOhFBgI(o;XEJ.$<
%Kjqcml/'t8e]fU4'))%IGQP+-"DM!V:7t"bf=9@6HnNq]LN,rsU`j)GNui->JT4mfM5P@+82Q??cWER,F\#N[$m>%6Fa?Rnne'jq
%PYu8ZCJ28S>&?9aCF/Wt;-1CB*S7@PD6<HWE>qT/YJ.Kt(@!E:pt_NC6rV#s_UDch`:P%.9"gj;D5VGMHIUW\f5,q?(1)E8BT4rU
%9\eASbdTEXr-@6QlF1H!:\jO75BtuDB7F2]rpp=niPm]+]d_+_nR;r/nDm+T'iS*jJ^^u`8`"bsV[6meeNk478r]T',b*^WNJNDU
%+lbCi-)*_,iS6M-Pj7F?T":l6P#59XZsfcMW@l:P?9n,SKpW+gCl3:oGi]+TLUa]2:*[K!ln_Mia?B]o9tX#TOqGYo`5Ph10nbP=
%RSI5^E%52BN`@Znm!D.=Zh8^23_NAj*Fid"#g=L3fk*(/C'K$Eqr\:^*I4sj>MGS4k]In;G],k9^l=Ycc9,cQ$Z9&Hd=^.9XVqAJ
%+;%=G"sqI>gNUUQH#?We,["ZiGD3+[rFa?<)&_tOT*KsjH43Jojm^r&fF<nhiZ9mbL&fE]JOVCbgK)(2)OaUb1=d'fWTaQ0X8%f?
%']Pk8@qR@ATa1nSiF^Ri4IkB3*q!NNg(5r!_(2o@"&97WW%8J#:&##Ed*n'gSMONXq@,"f#m^i?'FI$?K[n"jf>84jhL_Pf0HHG+
%"[2F^ELN\.0FKQ6b%&B=Wi8M=FQpmD^f*gWEnUur^IcHF[/-!3q2d5sU^mb;W9QpOhUf1GLup?@-DL@B8FK]I^?i`gNPKQEWY7Gi
%P/[=/FWf.&_.Kg^Rpo(67>\)=c6@2XmV,H_#]6V?6o'></qgTSes,:--jQXW<fi&<;`Gf@!H__'c1f)$L*^-Q'L9*S>gZ[':KS),
%j^_t;&egN=L8o#e\PH:COr1K>G[O_<_P,3q;tf79f"Q$u>05%"17+.!IGEuRFO#[7YqZ3,Z9kdj]8paSP$D$]0KIj_[ZDr7AlB#[
%%#=WAH6q:B&+LCe:GIgbq&udI'uA;p]^eFDWbD(B<k_h$N3u].ePsj+do2J5;i:\\outJu2^32`e0tC8jBhUFF`0!)"K#3u$r"V0
%8m$3]_ZV'[9XSVkaAb_i#t+,o5=XF!\Z>q!oEq3`jK`YiNf)ESplN*$8q\ak%8kH\a>%.Y0XikX<)CpNm>WI7bMctuSSia26*E,D
%Pt5U:!Sh7\VOKIJ9Ydb;2O"+R:gZ)+lE]Oo62YIW%blp)1c`/]L.1f+rCs4($\cbZjc[I`.j(N1AC,QBHKnV?IeXZ<h(eVJ0Rh*1
%<_>81LEP/SJJ;FGePV?:`Pd(2'.<^+n=LK]CF96nZn>AkHXKIdP]BmMe;"$-JE4\dn+$sNOFtGROP&M=/"EJ-JBEc.;0#Dmp_L(p
%7'[iRkMG"2PS=M,aDDQS`tVAa(%e!o^_\UUS.;aqD&R@eTTse@MXh&gf)iA0#B''Kb*4H_TUu7c!Eps!SFb54fT3&\#]&!d8r>`E
%!?S]Ij"C2$SmG$V&bCXt_]:>(NuMMl,t&q3l'iFl=Q>bM)C%a^]D.d4eA6j(j=QYB,:j&D9!EH@ldcsHRDmQrR9%KCBnA06VD69Y
%k8NHRZI3:K(S)7bRYRS_DhQ544nNA038n'P>Dpfb=VT1kUrp(-)+AnlS`@2>#jB`j-Bn_9;el.0ifa&f7VgMFgAT'hdmdpD=7o9s
%lsZ)Bm[4U>S`C/,GsXVR$0Lm6)u>MgHWXjb7%I*E><#2JF[`Orc:<plY6[l//:a?-DF+>'f/BRad<ZSHfGIT+7,pZAd5IaeFh[u"
%23>fd@j+XeDlie'_c:5^_31VX:%C:iR8ZDK&W;^CHZCrSZ6Q9"88ucG,];WUr0rinm-/sH&jqEiHXL5-iYh-(S$\.pKZ"Fg;KqMR
%>e!d]/ecc-DU;3`V"+0cjsLaa@d<&pb<P6c%m!Gk^L.K#JhP=1?5_5+2e"M[l]J$IHV6aWHGC.YgMO*o'QD3Z9/^CV%Ne)\34#+0
%@.E0l)*#h&@<E\:feqd.olP;<hBairLo2k(`'<Z.BYJOr%ec5ZVQl`L>?s]OlO!;FL7p9J.0n%"kDMuPOR(IucEC.ToQaOJ=\pp(
%LqMf3hJL_3Saf!O.Y_&jZ$oSSW.Sf,(.<Rsj\Z?Ph4j]"S;Hi(@5K99AK@cNe?2oP,>;(Kr5<ZKrrVZXVb`,!DdIndfpB0TI=LkN
%lW:P+fRRO_rpkj!J,SNlcaTNpp;`X]04*JKrPtDZ[m:H#oMJu.q;LJdb89V0jEgT6T7-_+gGcT[s7E'-R,]oNqlVTerQCZHGQ7/\
%2==,`55k'Gk1.ejj3*o.0E:V!LVG.SIHB.[?bH46ai.W"H27E^RofX\Q^\e0Dr,mAX'bG%!T*:#e.6jqH*;Ff%sl:"^[#kQIq[H(
%hisa]qYP3GrJBG(lJ&NAkH?PR]7$m?I\+-XLMR-)Icdff2rEN,rQk(OTcNaN>l$P.-n_$''TJ`qnrL75^]*AS,%3)=TDe"Is5W4!
%n%Um?Wd"_OYJ9_3s)j.1T?QPL^3P(sqR`BqpZW]I@N+Xc&qtgcgtAGK9GbCN&JsEYRZ\Rs`j$qgN@>a6+K;SAh%?O9%Zt^0$@64Q
%EF%?O$G2_+YM+$++h=Tb7@,"7'/G9f_eP63MmW&u^+c_5MS$sX+mG(;"Y)dgJ_QI;Pg<Sn48[2t%@4;d0)!t,Rb=D"/qa^]^p$je
%ljV&;-@n=D$,!Uj=[Ls3DJn=DI>jTV,To%<,"`8/+oA_l.da$oU(%KF<[;#Raj>_[5slPD!0`M8T=^!g"l;)NOP[5c'j-p\F)iC7
%9(QIu^>%ZYYqN+aC=/,AYE.Yh+cS!H`OE7F/[6K[.o6LuI5Fh*+(_gb9E(PIp6RWZrf=W$($$^SAR^i3iJ5#i89nU.JAr@c/uDJt
%o!p$6L8F=2)&G\J"/I9^4V&/<&;h`EXK8L2MW$i&3/#U'<#9GQ39&$e/'(bLTg1IW.4!!UK[S[.10'YNT<&-#&7bTq9uN^tdW/K*
%KQP$dms&4jTaj2XHfA`fZH35pRS7K%o<$ASYa"JN$=s.D>9_'O!j+\P+qTnVOk#D&g([#T;=[>F6_&u.<)l5_h?OW#n6'McdR)\^
%<cM/Mm2=Q3>"l8--A:_rC6T=XLFG(Fg6l-Q,6'5QJFoeHT8ne9iCL[AR;E2Q=`uRh?*N#58T=<(A]h4baJ?s;/C^uH_Q\jkqUia6
%cosgO?6Mj#;TZKaiagD&hO2/K"mn/*8/Y@ej!@rg&nmCM9a],hItt8'W[.MtR++P6C([:].@.BFT]H;66!h_bn+Nlq"f_JDmTID1
%@SN#[*]jGCA>q\i-S^T$g3eE-ASD0N[$@;`o[ZPe$u4:;EAn7QDf*92+lH\u#h9]`a]M%p$Z7UBIW6i-c,tiehD($Gh<_k@FOsS!
%?:Dk!aDGXL2'e3&]RqcH9ESgU?4_6D%95PM1^3cA?E:drl=AH"7YcjUouKRY3Xh#Polh:8"7,aFGpZE[#*cuRr%)9qC.sRT&Ou;`
%b1aP>0Z=<W4:sj&).RXj/m5j/#\5W&;`8@Z0X1-,3.>MUs1RT[J=pu3'r#a_mcV![I2K[9<gi58Wt\I'R&C@VWNL8-9Cm,m`/a>G
%Je,i9*$I?H,t<8l!+&sNg4'iN9W426r58W3Z3L1u5s.rb+IP2S;KgG3@%F]N&;h:tFmd,#'oX#\TRK/>EsIr<=-H>MHt;`N)RnC)
%dG`-&>n5?;Z(e/Wg.5?i5N2dG!iZ%RDTo55=SuJ/Xm!nKPS2AEWtC<TiX=_7@p%2\IIeme[qrNpg(#CN>+qR_oqg:j;^QD':*OBg
%TYmU\$"]"c?9:I:l>64`6>>CUQbP=7r[)G.s+9lf(E_(7Y%7t:ROd'S]dnl?P%U7u[#-T[(2Q_J:K&C4G#f#*6-]5[,5r+LF:m1+
%CbZS1lg"?^OGoVPCaA0mO+=]*.4NTc*$S'FV<rVQi@5Yoo3*kbNu[)9Xdg(OC;s@)?(Z=sbGK9BiDBlVZ@<E6.KZB0X[AT6HtPsH
%;l#t"Kk[>-8Koh&*Y]`I^Uql.Ug1\>":abQ):SI62r:uB2@.]fA5BF%e4ZI&#(MPIWTl4^\1*EPUMMHc7Qc1a8t4pPn29I%*$l\j
%,^3+:AlQFcg'M@,j@5"aC0#&2BnHpl0?Dn)f6Y3F65o5jQsdSX`[CtG1'5`@"cDV3."j(dXb5?IX9W[V&1LM.,O+kQ#\Sr#bt;)U
%=,VLT:c"?WD687YaD-Xq>&Z%Ll\^ga"@-XOACJq8[6LM;Mgqi_8>pflrjG:cPe[m=USC((:_4qaLIiX0TX+On=(KX2NXK88X[K+O
%l4nNG6)a5=/*sr$:YH%n>7h9N)E/lN*@`m>aKc**?fDm[L^WlWcS+[c&Z(cd.IU81gbPaslhrAR_j&lcQ<@Y3:lOVR61YCp=9$\h
%ktS,acs8ui[eTNrp$8M6(N,%H88X-PZ/%Gbh9B5r-=L\'ZWs0(ffmlB!Et_L6b!IcLeO$[UQ8HSe'h;o26ZZt;lM&nZ#c]TVt6q:
%o"d!$^E)b-V/i:A2,RdONC<.L)lRLg.p?-\k2E+T^7)-$bG##!js_rSc"MNrA;#[j>4R)8XNEK3"u64`&R<)JI\@)Q<(]4!:ALmF
%]F^<,C2ZrJq8m[TeLtX:I?MZ[bk\;L-3*[_I+EFJI6[J'U_%rUIEdlJ(%0=PUQ,T10!YoK].9\+6B-k/bE]6j0SVNggJ4B>#bbo"
%9m%A,MB^>2['OW=#oRU@Hq$K4>EDi>)oVk7`\]B!/8][.L+7:)gU#3C?6h#Iho8G'?3PanNi:c,9AT?;[jR[NX[.O\BhnC7UO6gD
%0^r:-VHh$V=%StQ'2_JWMAnm>Qn2&ZhOi3@j,Pf+M9EDQ(%acqnS.NVeRPmC-j0-^AD(G$.apW#'";%&S:Aq6/+U65cO8s`<$gZ)
%E`bgpCIGM-?H4;[KgMk>7E(*YO37RblU]1:@^=JT:-@N/L.OK^q<S/VWVK6>8bsJ^#=[C!V9]5lROX#d"s+I1NuRiIB%]Zc/RhFG
%RDt*qC]-j>G_jV277*C3'JNm;%\m@!jl%r)Ful>ND,n-FH;9^*LI.I[rGl-KV&Ui77PMesOcmVf:2u'qJ/uB-6W:&o(L%;ZY?2-C
%[GYF&/m1A(nZZ$#V*kWh/(F1u<GfiWA$:Ln[@_f8cbt[G\P=Hp)DsG9;O2OZCneKMpS%Ib834CH8PuLq/_t!Zi>1:O0LC\mQRY6]
%AO"==9u@9?Lg(;%&o"^h2)kbC%j!Fl;=DQEl6c`O6?9L#89?=qV_;Au*!.T_Nj;`#YQ_sH.#_V]"=g6ej,17O<UBo?i9j[rEP*Yk
%WWG/IV/S"bDDc1FVo01o@1@s6Z!dh":dPT3cm!o^?]lRt%qN1nUacPQX\fFXi(7bR\`VgUY:'NrM#ZL%KY"QLF=*t.LOf>)?>Y!`
%iG1Bp6`A?T:C;h\ZWVO,$dO./)#@86&8FJ?EM(V;p)m2s<_%342U*IXjATu$4:(II?uMg]'-^kH:WA^B=g*B9BJXBOKjmjNb+u*+
%:+X5A3iKhlHVoPM2A5=#@OFs2@4;^\s).&P`6f:g:SX6S*jrjO1)sm/*L]"$,)$[a2^hdaD/#aX[^8CWf:nuN1($r.oI,I]1L5gC
%LAnJN+H'JqWb.A)]&,98m]@#[gh\G**9%)eIr4LrA5n>meA>Rn8=:skknCJ5X;V+D.9.St$qLmsL?_.0D.2ZC`J/-bGIc9Y2I73X
%A$tkhe4p#d"TbCIA9QI&"Jd9\Bn]l6.A[(bnuLjSljR21;X[e/i>N&).QuW?_?pT+kctGUZs]gQ-Z%8AE0;rRp6rsri68#*7+WE7
%<,&noa!ef`l;C'n(_)!d$J_u^W4t2pVOUpEXGY-1HQZ:'APh^j6$9<'Y9).MR"JtO@StN,O/a\?2_(lVHq<se'`n^C-on@\5_!(d
%),79>lkofcG?q%6?GtJNAi[p,Z9YCid_)4ggK\i=#e/I@(ar5t-d:qg["E//MCZac&Iunp!b_qWF"/61SH\!m-r:0fc_BR(KOFU)
%N%97%TrY;\Zf9Ib!`2o[02taoD$J^0;4SR#jRXr%1Gka1!K7^$*2Rie<gS(=?^p.8X'&YD3nXUP!6#*hLnhNsFQRqsH1cW,MH,Bj
%K_O.$S(W9;/@?],YYmMT4ms]jclZB,1J6ftH$%lF:Mt;Tm\>-0<nN4eA<q@T$'l`?3q(/UmGdc/Z1HNe'ce=Ze9i1.LUTi7Q!Fu-
%H^Un-4c"(-F777/2F_3dGfb-=A@pQXXiOba$f-s7()Z6I/qKaKVD>QkKO#10f=&r/:#Q_noGAM<njit*]>GUM?M(ZpFA&]5EfO(O
%9*gSKaJ7KuKZLNSe)peh@3,sb&5'\)?&%IapJ:R)@W9K]\;%$Ie6&+NN[XL>j\-AIEE)NbXa3/V9@F-f>)KYD8`qbQe_(%u$?EBW
%Dfo'dJi#tWG?[OI;\SU%NM8FnZ\[R]gO\WZ/+(Da?of+#eh0O0o&C3NWRtRu#\P1A*$J`8]Q5XcS7cGNq;1m+#UIS(^238d*aU14
%o8(SiggNm1@D1&T^K.+-GMKe#FI@@DpfC:o[1G8=a"jEqV8H+jCdgj`aHM$Q36Zc9Bcb+[m]FR,Ms\WY2bfJc;sl^c^!m<0)>OHJ
%kFS#i3k^.m8%FHXNZGb#Y/q<r%94a9Y&aj[Q)[V9J.&\:FR1*fr?Zq5Vgptn[2.jP[Le\3ppd^)M!Z4r5CIQF4^Kg8a=T.q>0Mic
%LmPp&.8IU$NF:3n<<oFpHF6^Z.70AFUU&n%DqDN-W6fKd'uqD)lLVZt*WB<c6>WII]Cs'W;h@Y-g%jT%'.H>Mf7N"<mP`=qf"fZW
%p6H;[<5.'/F*#fj';h?JYh9/>[V5edb`h&&/red/n[R*?`LCAP!c.3FN6@_^RU^^>hX.&>9j-$LcCK?;<$%&3b^G)FRrlCBo6R8l
%TSp<=O+,%_@nWEZ>aQZD+_;AT<(]Dgfr#iHe2B"/,XZ9#,L6r2<D7Tg_V;#P:kMrp7"(1:&O$]Xd64mj.@Zu9?!AO8/hkH'EUQjA
%2L<epT+a8g%RP!e_h<A]"Z3oHq>arTq%e1[7\#;$$(.pn:rOn*TuoB8X-*n3nYNgU25$0Ie>_OJa+IFO'OB@><UtU]>0;jZ7lO+D
%ZRc9*PcXb8)\NOm*p8t473M/[W;#eoPmY=>6L-_(TMs1e8)[E?KLghWl1c.eid=`jiFZZIC><#ppLJ!;`\NWW`0!RF9,R^$m8tma
%#^BKoGA.Y3as+lgBi>sV&E&JoW'$,VZc&3ER,?*/I[cQe_UC4)J4u*,d6oc8%3'N_g`$ND@T#CS"Wm>#T5"/0'4cIA=PF-75<es,
%3@">&7ALTH.[7$3eGrqu?gIn'P's'@HJ3R;2*WdCId[/k$P+BThXpTVTDuJ(iV0F>Qg/7DBF`m@85X$sXoc[sQ56s3'gHhSTX\3B
%-N,o,7tOBIR,[>I<Y;=r[KStVUoeuH4W?M$Z+/C.X-Rmo'H]-M)P`bZ61D_iPP.fq4Y'2h+8A`j+pms/Gn.o.f+B/X*B0VifO'TF
%,F``J9A_*ZhPe=SRjr0%C=)f*D'Z/GVR<kX1=Q2Mai$UsRql$=$jgh?.pEZpEFIOuJ!qjG@&J+gXL>&=[tb[NS'On^Dn6501ioB[
%`pMB7ecl'<YrXOceI6XsT.I40\ou_=;V0'rWlW4Kf;;F)?@?KM51=J+?TZr<U)\tgNm(J%Z-s%fmXm]*3q\qZ9kREVWf7bYnC\lf
%r^d"<($]Fj'ahMM`SiVt*[%^*M[+jdrBc^u'C/B`MMu;NqdH*[mG*K5(-R:$5>sr^Yh'p-gEK/.g8kZZ_?>u'&qT;C97t&^>Uh0C
%;R]E?MFLM#i@/;_mgZssj6`X`"O_h1>g5u4%p]3Sj-gn0U?O+e7HjhOB!S"p%iVL9ATO9.%G"si\Y:>fa7W+`Nf-NY!:<%_8&pb'
%Xr+gm-,:+Mrk>iTDi1bU&Zcs8h<Hg\m`qYcdnNK>Y&a;rq,!j1LjOOa7Z=GG_UMa_M736@jYBH36odJ6ZGP6TZYB2fnZ^K6o^8nb
%O?X<3.>@Hu>"_".=9#Z1B\Q\0A!LaHe$B?uKS9`.>]E/S@50J*:<?F)hX8rQi)Og6[Yrj$63fq@:<hCmSKk$\2rK*\3Yal]8D>j?
%k$5[Z@(c^cSEXqoelHCq@?lAlV%+&=_lC^FWK$5peLpnA*1WDiHIk"=]=1heMMKg*TfX[:dV5QC8f3%t$$Jug$r*G)nAfV2&G]l8
%INY+(7PRA&m?HX=15QdjB[G3+hB)/AGt7D76+moEPG69<Os6=AM^/Z%?DF$t?u@0`RQNR6Vu,L\BVlj]MAj')O%kZ?eE;="Wcl3"
%M%`i7p&nqm'O.7O\IF]Q9t4TRPZ%3WQ/U2kl\F+O>rjP`CHP]&E>-I&8]5I1q_;,Sf/8Vd6Iu)$eOLac1L!dD/?#+#;GELXidZOF
%Ik]JU,,C!K.LbN:^\l-1_3f^eDq+f!cq7a=6]P0D"gk@7Vq"2EjCH,,/u%+Rc@nW3(!ulQm42,`q&9oFWGd2/A`7dm,ZUX2l;C6n
%'6S(idP^dWB:i-5+"^1bnG9@_^r)JehsdL!9Zj$*4O-rAUnn<tFm\OUQDBUbN1e:pAdOP*e.__q\S+JW9A==Ln\>G<<qN*G]OS!]
%*Y[]VI>B,T>(Y/?UA&fAH[`%XX=/7"U6<.(>HEM_?@%W0U'RC-GbPC/$<9(:j@*?sQj<#)\*\P,V^`79"dJco:>\j-Fc64&Qnj"X
%TM>S.T%U`,%9m/#.4ad9cN6BLGt;U*UZ\Z&L#\bu68.?mLZg/(bQCekr+$k_N'OmHdsAHH-3`pVdPlTWHP&E@[Or`$iDV?bL07!'
%;HJEgP,Uq+_=tsZK`d3VYRE]6n;erO<tm9@Mqt"hXm>o7qY]NXp\n,"-F<iG0O/<Op[L9k*l4MZ,n&=IfC4TAe5OZ+4U:E;AZ5OL
%S"]L3BJem0Ikh,+'%Wt-C9W5fHeLXdeP5DObmVSCkt'lg)+NE8P@K5#D*566C,&.i-m$oaU7t9._\$">JfdBlm\Tsm.2n(I(.UnN
%[ZZ4k>hdDQMFctaT>MJ8bW(--J;]`Tnf4Pf-NrIaE=+aN2k6bjG%HB&fMe(/.jj,:Ap:.tP3)b'B>kltLNTeJX?Gi<]X`2QmkC/8
%%T<Al9sn91$XJJf&alEl^%9g1a)fgpI6AbeS@7hj<^.q=-`6h:_*</":H\%7C]?UokGE5J_(*ruk>E*U.C?+/T"++7XoW.i_ZZ:Y
%86eNbjmm[#K9TH()]r)HBFY":PAb_hm=4jhkeoTLa_FdZdN9<;RE$FHIu"N'XMj[td^6GC')fEF&W.kK'`+EMgt:.E+R.srK>0=`
%0]OBXC@XKg@g<SZ*:31\Z44XgUb`qe[2+l9n9-g$@+O-LM5Vn8KRmNXd#o\TMY%5-O=$3`8!"5,Au.Pi'Jl]n$>![UaWmc:dr^=]
%ncHQA6#o/7DDMH:ThcsJ(?("IK>Gm`_AHau9=A[kSp(IZLbQpr0Ta#nZDMqK1)a66]-T&c:pp&=<)%;1d[F0IdZtDm>5@l'5*\<$
%*5V9jL-fmU`Eb]n^pBN/4I_+/?*!oXo&g<I.b5'TNG.f[IV8:8)Ij9fe`sc;CNS_R@r'F;'m&ieX\kaXd3,%N50b<T4OR`03^*:E
%&0Zn1D%b'blb_W/V3AiaX9/7APj_?#@V%%WGN#AK$`4t)98fr+NUA<_D)@NKJ.7s+e%n:Li"ShZh!MUtD33)o3fG>h`Whi1:!B5C
%KO8&'*g3Ner;6<Y5PiXF^\ac*pE/8)G^f8EmFtE#\MJX2cSo4grorgpb?)/k5PiXVhqe3Lqs<Ii)o]=)s*XREB4&EerU0Q$hqgQo
%m[J.p.Z82UDYX"e5Q&tpI.Wp."ZMuJHi~>
%AI9_PrivateDataEnd
